{
  "version": 3,
  "sources": [
    "node_modules/grunt-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "node_modules/grunt-browserify/node_modules/browserify/node_modules/events/events.js",
    "node_modules/grunt-browserify/node_modules/browserify/node_modules/inherits/inherits_browser.js",
    "node_modules/grunt-browserify/node_modules/browserify/node_modules/path-browserify/index.js",
    "node_modules/grunt-browserify/node_modules/browserify/node_modules/process/browser.js",
    "node_modules/grunt-browserify/node_modules/browserify/node_modules/util/support/isBufferBrowser.js",
    "node_modules/grunt-browserify/node_modules/browserify/node_modules/util/util.js",
    "node_modules/json-stable-stringify/index.js",
    "node_modules/json-stable-stringify/node_modules/jsonify/index.js",
    "node_modules/json-stable-stringify/node_modules/jsonify/lib/parse.js",
    "node_modules/json-stable-stringify/node_modules/jsonify/lib/stringify.js",
    "node_modules/jstimezonedetect/jstz.js",
    "node_modules/mingo/mingo.js",
    "node_modules/mongo-query/filter.js",
    "node_modules/mongo-query/index.js",
    "node_modules/mongo-query/mods.js",
    "node_modules/mongo-query/node_modules/component-type/index.js",
    "node_modules/mongo-query/node_modules/debug/browser.js",
    "node_modules/mongo-query/node_modules/debug/debug.js",
    "node_modules/mongo-query/node_modules/debug/node_modules/ms/index.js",
    "node_modules/mongo-query/node_modules/dot-component/index.js",
    "node_modules/mongo-query/node_modules/dot-component/node_modules/type-component/index.js",
    "node_modules/mongo-query/node_modules/mongo-eql/index.js",
    "node_modules/mongo-query/node_modules/object-component/index.js",
    "node_modules/mongo-query/ops.js",
    "node_modules/node-cryptojs-aes/cryptojs.js",
    "node_modules/node-cryptojs-aes/lib/aes.js",
    "node_modules/node-cryptojs-aes/lib/cipher-core.js",
    "node_modules/node-cryptojs-aes/lib/core.js",
    "node_modules/node-cryptojs-aes/lib/enc-base64.js",
    "node_modules/node-cryptojs-aes/lib/evpkdf.js",
    "node_modules/node-cryptojs-aes/lib/jsonformatter.js",
    "node_modules/node-cryptojs-aes/lib/md5.js",
    "node_modules/reqwest/reqwest.js",
    "node_modules/rsvp/dist/rsvp.js",
    "node_modules/underscore/underscore.js",
    "scripts/bs-expand-processor/Constants.js",
    "scripts/bs-expand-processor/ExecutionTree.js",
    "scripts/bs-expand-processor/ExpandError.js",
    "scripts/bs-expand-processor/Processor.js",
    "scripts/bs-expand-processor/RelationNode.js",
    "scripts/bs-expand-processor/RelationTreeBuilder.js",
    "scripts/bs-expand-processor/node_modules/async/lib/async.js",
    "scripts/bs-expand-processor/node_modules/underscore/underscore.js",
    "src/AutoQueue.js",
    "src/EventEmitterProxy.js",
    "src/Everlive.js",
    "src/EverliveError.js",
    "src/ExpandProcessor.js",
    "src/Expression.js",
    "src/GeoPoint.js",
    "src/Push.js",
    "src/Request.js",
    "src/Setup.js",
    "src/auth/Authentication.js",
    "src/auth/AuthenticationSetup.js",
    "src/caching/CacheModule.js",
    "src/caching/caching.js",
    "src/common.js",
    "src/constants.js",
    "src/encryption/CryptographicProvider.js",
    "src/everlive.platform.js",
    "src/helpers/helpers.js",
    "src/helpers/html/htmlHelper.js",
    "src/helpers/html/htmlHelperOfflineModule.js",
    "src/helpers/html/htmlHelperResponsiveModule.js",
    "src/index.js",
    "src/kendo/kendo.everlive.js",
    "src/mixins/mixins.js",
    "src/mixins/underscoreCompactObject.js",
    "src/mixins/underscoreDeepExtends.js",
    "src/mixins/underscoreIsObjectEmpty.js",
    "src/offline/OfflineFilesModule.js",
    "src/offline/OfflineFilesProcessor.js",
    "src/offline/OfflineQueryProcessor.js",
    "src/offline/OfflineStorageModule.js",
    "src/offline/offline.js",
    "src/offline/offlinePersisters.js",
    "src/offline/offlineTransformations.js",
    "src/offline/persisters/BasePersister.js",
    "src/offline/persisters/FileSystemPersister.js",
    "src/offline/persisters/LocalStoragePersister.js",
    "src/push/CordovaCurrentDevice.js",
    "src/push/CurrentDevice.js",
    "src/push/NativeScriptCurrentDevice.js",
    "src/query/DataQuery.js",
    "src/query/Query.js",
    "src/query/QueryBuilder.js",
    "src/query/RequestOptionsBuilder.js",
    "src/query/WhereQuery.js",
    "src/reqwest.nativescript.js",
    "src/reqwest.nodejs.js",
    "src/storages/FileStore.js",
    "src/storages/LocalStore.js",
    "src/storages/NativeScriptFileStore.js",
    "src/storages/WebFileStore.js",
    "src/types/Data.js",
    "src/types/Files.js",
    "src/types/Users.js",
    "src/utils.js"
  ],
  "names": [],
  "mappingsvhkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnjvzlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClxrlFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjvjsxhvmjgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACflnlnmhgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClaxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfrhxbvUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnjMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxvzhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzhcjzz5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbjhvtSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACr1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5t
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        len = arguments.length;\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    len = arguments.length;\n    args = new Array(len - 1);\n    for (i = 1; i < len; i++)\n      args[i - 1] = arguments[i];\n\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    var m;\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  var ret;\n  if (!emitter._events || !emitter._events[type])\n    ret = 0;\n  else if (isFunction(emitter._events[type]))\n    ret = 1;\n  else\n    ret = emitter._events[type].length;\n  return ret;\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n",
    "if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n",
    "// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n",
    "module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n",
    "var json = typeof JSON !== 'undefined' ? JSON : require('jsonify');\n\nmodule.exports = function (obj, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var space = opts.space || '';\n    if (typeof space === 'number') space = Array(space+1).join(' ');\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n    var replacer = opts.replacer || function(key, value) { return value; };\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (parent, key, node, level) {\n        var indent = space ? ('\\n' + new Array(level + 1).join(space)) : '';\n        var colonSeparator = space ? ': ' : ':';\n\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        node = replacer.call(parent, key, node);\n\n        if (node === undefined) {\n            return;\n        }\n        if (typeof node !== 'object' || node === null) {\n            return json.stringify(node);\n        }\n        if (isArray(node)) {\n            var out = [];\n            for (var i = 0; i < node.length; i++) {\n                var item = stringify(node, i, node[i], level+1) || json.stringify(null);\n                out.push(indent + space + item);\n            }\n            return '[' + out.join(',') + indent + ']';\n        }\n        else {\n            if (seen.indexOf(node) !== -1) {\n                if (cycles) return json.stringify('__cycle__');\n                throw new TypeError('Converting circular structure to JSON');\n            }\n            else seen.push(node);\n\n            var keys = objectKeys(node).sort(cmp && cmp(node));\n            var out = [];\n            for (var i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                var value = stringify(node, key, node[key], level+1);\n\n                if(!value) continue;\n\n                var keyValue = json.stringify(key)\n                    + colonSeparator\n                    + value;\n                ;\n                out.push(indent + space + keyValue);\n            }\n            return '{' + out.join(',') + indent + '}';\n        }\n    })({ '': obj }, '', obj, 0);\n};\n\nvar isArray = Array.isArray || function (x) {\n    return {}.toString.call(x) === '[object Array]';\n};\n\nvar objectKeys = Object.keys || function (obj) {\n    var has = Object.prototype.hasOwnProperty || function () { return true };\n    var keys = [];\n    for (var key in obj) {\n        if (has.call(obj, key)) keys.push(key);\n    }\n    return keys;\n};\n",
    "exports.parse = require('./lib/parse');\nexports.stringify = require('./lib/stringify');\n",
    "var at, // The index of the current character\n    ch, // The current character\n    escapee = {\n        '\"':  '\"',\n        '\\\\': '\\\\',\n        '/':  '/',\n        b:    '\\b',\n        f:    '\\f',\n        n:    '\\n',\n        r:    '\\r',\n        t:    '\\t'\n    },\n    text,\n\n    error = function (m) {\n        // Call error when something is wrong.\n        throw {\n            name:    'SyntaxError',\n            message: m,\n            at:      at,\n            text:    text\n        };\n    },\n    \n    next = function (c) {\n        // If a c parameter is provided, verify that it matches the current character.\n        if (c && c !== ch) {\n            error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n        }\n        \n        // Get the next character. When there are no more characters,\n        // return the empty string.\n        \n        ch = text.charAt(at);\n        at += 1;\n        return ch;\n    },\n    \n    number = function () {\n        // Parse a number value.\n        var number,\n            string = '';\n        \n        if (ch === '-') {\n            string = '-';\n            next('-');\n        }\n        while (ch >= '0' && ch <= '9') {\n            string += ch;\n            next();\n        }\n        if (ch === '.') {\n            string += '.';\n            while (next() && ch >= '0' && ch <= '9') {\n                string += ch;\n            }\n        }\n        if (ch === 'e' || ch === 'E') {\n            string += ch;\n            next();\n            if (ch === '-' || ch === '+') {\n                string += ch;\n                next();\n            }\n            while (ch >= '0' && ch <= '9') {\n                string += ch;\n                next();\n            }\n        }\n        number = +string;\n        if (!isFinite(number)) {\n            error(\"Bad number\");\n        } else {\n            return number;\n        }\n    },\n    \n    string = function () {\n        // Parse a string value.\n        var hex,\n            i,\n            string = '',\n            uffff;\n        \n        // When parsing for string values, we must look for \" and \\ characters.\n        if (ch === '\"') {\n            while (next()) {\n                if (ch === '\"') {\n                    next();\n                    return string;\n                } else if (ch === '\\\\') {\n                    next();\n                    if (ch === 'u') {\n                        uffff = 0;\n                        for (i = 0; i < 4; i += 1) {\n                            hex = parseInt(next(), 16);\n                            if (!isFinite(hex)) {\n                                break;\n                            }\n                            uffff = uffff * 16 + hex;\n                        }\n                        string += String.fromCharCode(uffff);\n                    } else if (typeof escapee[ch] === 'string') {\n                        string += escapee[ch];\n                    } else {\n                        break;\n                    }\n                } else {\n                    string += ch;\n                }\n            }\n        }\n        error(\"Bad string\");\n    },\n\n    white = function () {\n\n// Skip whitespace.\n\n        while (ch && ch <= ' ') {\n            next();\n        }\n    },\n\n    word = function () {\n\n// true, false, or null.\n\n        switch (ch) {\n        case 't':\n            next('t');\n            next('r');\n            next('u');\n            next('e');\n            return true;\n        case 'f':\n            next('f');\n            next('a');\n            next('l');\n            next('s');\n            next('e');\n            return false;\n        case 'n':\n            next('n');\n            next('u');\n            next('l');\n            next('l');\n            return null;\n        }\n        error(\"Unexpected '\" + ch + \"'\");\n    },\n\n    value,  // Place holder for the value function.\n\n    array = function () {\n\n// Parse an array value.\n\n        var array = [];\n\n        if (ch === '[') {\n            next('[');\n            white();\n            if (ch === ']') {\n                next(']');\n                return array;   // empty array\n            }\n            while (ch) {\n                array.push(value());\n                white();\n                if (ch === ']') {\n                    next(']');\n                    return array;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad array\");\n    },\n\n    object = function () {\n\n// Parse an object value.\n\n        var key,\n            object = {};\n\n        if (ch === '{') {\n            next('{');\n            white();\n            if (ch === '}') {\n                next('}');\n                return object;   // empty object\n            }\n            while (ch) {\n                key = string();\n                white();\n                next(':');\n                if (Object.hasOwnProperty.call(object, key)) {\n                    error('Duplicate key \"' + key + '\"');\n                }\n                object[key] = value();\n                white();\n                if (ch === '}') {\n                    next('}');\n                    return object;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad object\");\n    };\n\nvalue = function () {\n\n// Parse a JSON value. It could be an object, an array, a string, a number,\n// or a word.\n\n    white();\n    switch (ch) {\n    case '{':\n        return object();\n    case '[':\n        return array();\n    case '\"':\n        return string();\n    case '-':\n        return number();\n    default:\n        return ch >= '0' && ch <= '9' ? number() : word();\n    }\n};\n\n// Return the json_parse function. It will have access to all of the above\n// functions and variables.\n\nmodule.exports = function (source, reviver) {\n    var result;\n    \n    text = source;\n    at = 0;\n    ch = ' ';\n    result = value();\n    white();\n    if (ch) {\n        error(\"Syntax error\");\n    }\n\n    // If there is a reviver function, we recursively walk the new structure,\n    // passing each name/value pair to the reviver function for possible\n    // transformation, starting with a temporary root object that holds the result\n    // in an empty key. If there is not a reviver function, we simply return the\n    // result.\n\n    return typeof reviver === 'function' ? (function walk(holder, key) {\n        var k, v, value = holder[key];\n        if (value && typeof value === 'object') {\n            for (k in value) {\n                if (Object.prototype.hasOwnProperty.call(value, k)) {\n                    v = walk(value, k);\n                    if (v !== undefined) {\n                        value[k] = v;\n                    } else {\n                        delete value[k];\n                    }\n                }\n            }\n        }\n        return reviver.call(holder, key, value);\n    }({'': result}, '')) : result;\n};\n",
    "var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    gap,\n    indent,\n    meta = {    // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    },\n    rep;\n\nfunction quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    \n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n        var c = meta[a];\n        return typeof c === 'string' ? c :\n            '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n    // Produce a string from holder[key].\n    var i,          // The loop counter.\n        k,          // The member key.\n        v,          // The member value.\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n    \n    // If the value has a toJSON method, call it to obtain a replacement value.\n    if (value && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n    \n    // If we were called with a replacer function, then call the replacer to\n    // obtain a replacement value.\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n    \n    // What happens next depends on the value's type.\n    switch (typeof value) {\n        case 'string':\n            return quote(value);\n        \n        case 'number':\n            // JSON numbers must be finite. Encode non-finite numbers as null.\n            return isFinite(value) ? String(value) : 'null';\n        \n        case 'boolean':\n        case 'null':\n            // If the value is a boolean or null, convert it to a string. Note:\n            // typeof null does not produce 'null'. The case is included here in\n            // the remote chance that this gets fixed someday.\n            return String(value);\n            \n        case 'object':\n            if (!value) return 'null';\n            gap += indent;\n            partial = [];\n            \n            // Array.isArray\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n                \n                // Join all of the elements together, separated with commas, and\n                // wrap them in brackets.\n                v = partial.length === 0 ? '[]' : gap ?\n                    '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                    '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n            \n            // If the replacer is an array, use it to select the members to be\n            // stringified.\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    k = rep[i];\n                    if (typeof k === 'string') {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            else {\n                // Otherwise, iterate through all of the keys in the object.\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            \n        // Join all of the member texts together, separated with commas,\n        // and wrap them in braces.\n\n        v = partial.length === 0 ? '{}' : gap ?\n            '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n            '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\nmodule.exports = function (value, replacer, space) {\n    var i;\n    gap = '';\n    indent = '';\n    \n    // If the space parameter is a number, make an indent string containing that\n    // many spaces.\n    if (typeof space === 'number') {\n        for (i = 0; i < space; i += 1) {\n            indent += ' ';\n        }\n    }\n    // If the space parameter is a string, it will be used as the indent string.\n    else if (typeof space === 'string') {\n        indent = space;\n    }\n\n    // If there is a replacer, it must be a function or an array.\n    // Otherwise, throw an error.\n    rep = replacer;\n    if (replacer && typeof replacer !== 'function'\n    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n        throw new Error('JSON.stringify');\n    }\n    \n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return str('', {'': value});\n};\n",
    "/**\n * This script gives you the zone info key representing your device's time zone setting.\n *\n * @name jsTimezoneDetect\n * @version 1.0.5\n * @author Jon Nylander\n * @license MIT License - http://www.opensource.org/licenses/mit-license.php\n *\n * For usage and examples, visit:\n * http://pellepim.bitbucket.org/jstz/\n *\n * Copyright (c) Jon Nylander\n */\n\n/*jslint undef: true */\n/*global console, exports*/\n\n(function(root) {\n  /**\n   * Namespace to hold all the code for timezone detection.\n   */\n  var jstz = (function () {\n      'use strict';\n      var HEMISPHERE_SOUTH = 's',\n          \n          /**\n           * Gets the offset in minutes from UTC for a certain date.\n           * @param {Date} date\n           * @returns {Number}\n           */\n          get_date_offset = function (date) {\n              var offset = -date.getTimezoneOffset();\n              return (offset !== null ? offset : 0);\n          },\n\n          get_date = function (year, month, date) {\n              var d = new Date();\n              if (year !== undefined) {\n                d.setFullYear(year);\n              }\n              d.setMonth(month);\n              d.setDate(date);\n              return d;\n          },\n\n          get_january_offset = function (year) {\n              return get_date_offset(get_date(year, 0 ,2));\n          },\n\n          get_june_offset = function (year) {\n              return get_date_offset(get_date(year, 5, 2));\n          },\n\n          /**\n           * Private method.\n           * Checks whether a given date is in daylight saving time.\n           * If the date supplied is after august, we assume that we're checking\n           * for southern hemisphere DST.\n           * @param {Date} date\n           * @returns {Boolean}\n           */\n          date_is_dst = function (date) {\n              var is_southern = date.getMonth() > 7,\n                  base_offset = is_southern ? get_june_offset(date.getFullYear()) : \n                                              get_january_offset(date.getFullYear()),\n                  date_offset = get_date_offset(date),\n                  is_west = base_offset < 0,\n                  dst_offset = base_offset - date_offset;\n                  \n              if (!is_west && !is_southern) {\n                  return dst_offset < 0;\n              }\n\n              return dst_offset !== 0;\n          },\n\n          /**\n           * This function does some basic calculations to create information about\n           * the user's timezone. It uses REFERENCE_YEAR as a solid year for which\n           * the script has been tested rather than depend on the year set by the\n           * client device.\n           *\n           * Returns a key that can be used to do lookups in jstz.olson.timezones.\n           * eg: \"720,1,2\". \n           *\n           * @returns {String}\n           */\n\n          lookup_key = function () {\n              var january_offset = get_january_offset(),\n                  june_offset = get_june_offset(),\n                  diff = january_offset - june_offset;\n\n              if (diff < 0) {\n                  return january_offset + \",1\";\n              } else if (diff > 0) {\n                  return june_offset + \",1,\" + HEMISPHERE_SOUTH;\n              }\n\n              return january_offset + \",0\";\n          },\n\n          /**\n           * Uses get_timezone_info() to formulate a key to use in the olson.timezones dictionary.\n           *\n           * Returns a primitive object on the format:\n           * {'timezone': TimeZone, 'key' : 'the key used to find the TimeZone object'}\n           *\n           * @returns Object\n           */\n          determine = function () {\n              var key = lookup_key();\n              return new jstz.TimeZone(jstz.olson.timezones[key]);\n          },\n\n          /**\n           * This object contains information on when daylight savings starts for\n           * different timezones.\n           *\n           * The list is short for a reason. Often we do not have to be very specific\n           * to single out the correct timezone. But when we do, this list comes in\n           * handy.\n           *\n           * Each value is a date denoting when daylight savings starts for that timezone.\n           */\n          dst_start_for = function (tz_name) {\n\n            var ru_pre_dst_change = new Date(2010, 6, 15, 1, 0, 0, 0), // In 2010 Russia had DST, this allows us to detect Russia :)\n                dst_starts = {\n                    'America/Denver': new Date(2011, 2, 13, 3, 0, 0, 0),\n                    'America/Mazatlan': new Date(2011, 3, 3, 3, 0, 0, 0),\n                    'America/Chicago': new Date(2011, 2, 13, 3, 0, 0, 0),\n                    'America/Mexico_City': new Date(2011, 3, 3, 3, 0, 0, 0),\n                    'America/Asuncion': new Date(2012, 9, 7, 3, 0, 0, 0),\n                    'America/Santiago': new Date(2012, 9, 3, 3, 0, 0, 0),\n                    'America/Campo_Grande': new Date(2012, 9, 21, 5, 0, 0, 0),\n                    'America/Montevideo': new Date(2011, 9, 2, 3, 0, 0, 0),\n                    'America/Sao_Paulo': new Date(2011, 9, 16, 5, 0, 0, 0),\n                    'America/Los_Angeles': new Date(2011, 2, 13, 8, 0, 0, 0),\n                    'America/Santa_Isabel': new Date(2011, 3, 5, 8, 0, 0, 0),\n                    'America/Havana': new Date(2012, 2, 10, 2, 0, 0, 0),\n                    'America/New_York': new Date(2012, 2, 10, 7, 0, 0, 0),\n                    'Europe/Helsinki': new Date(2013, 2, 31, 5, 0, 0, 0),\n                    'Pacific/Auckland': new Date(2011, 8, 26, 7, 0, 0, 0),\n                    'America/Halifax': new Date(2011, 2, 13, 6, 0, 0, 0),\n                    'America/Goose_Bay': new Date(2011, 2, 13, 2, 1, 0, 0),\n                    'America/Miquelon': new Date(2011, 2, 13, 5, 0, 0, 0),\n                    'America/Godthab': new Date(2011, 2, 27, 1, 0, 0, 0),\n                    'Europe/Moscow': ru_pre_dst_change,\n                    'Asia/Amman': new Date(2013, 2, 29, 1, 0, 0, 0),\n                    'Asia/Beirut': new Date(2013, 2, 31, 2, 0, 0, 0),\n                    'Asia/Damascus': new Date(2013, 3, 6, 2, 0, 0, 0),\n                    'Asia/Jerusalem': new Date(2013, 2, 29, 5, 0, 0, 0),\n                    'Asia/Yekaterinburg': ru_pre_dst_change,\n                    'Asia/Omsk': ru_pre_dst_change,\n                    'Asia/Krasnoyarsk': ru_pre_dst_change,\n                    'Asia/Irkutsk': ru_pre_dst_change,\n                    'Asia/Yakutsk': ru_pre_dst_change,\n                    'Asia/Vladivostok': ru_pre_dst_change,\n                    'Asia/Baku': new Date(2013, 2, 31, 4, 0, 0),\n                    'Asia/Yerevan': new Date(2013, 2, 31, 3, 0, 0),\n                    'Asia/Kamchatka': ru_pre_dst_change,\n                    'Asia/Gaza': new Date(2010, 2, 27, 4, 0, 0),\n                    'Africa/Cairo': new Date(2010, 4, 1, 3, 0, 0),\n                    'Europe/Minsk': ru_pre_dst_change,\n                    'Pacific/Apia': new Date(2010, 10, 1, 1, 0, 0, 0),\n                    'Pacific/Fiji': new Date(2010, 11, 1, 0, 0, 0),\n                    'Australia/Perth': new Date(2008, 10, 1, 1, 0, 0, 0)\n                };\n\n              return dst_starts[tz_name];\n          };\n\n      return {\n          determine: determine,\n          date_is_dst: date_is_dst,\n          dst_start_for: dst_start_for \n      };\n  }());\n\n  /**\n   * Simple object to perform ambiguity check and to return name of time zone.\n   */\n  jstz.TimeZone = function (tz_name) {\n      'use strict';\n        /**\n         * The keys in this object are timezones that we know may be ambiguous after\n         * a preliminary scan through the olson_tz object.\n         *\n         * The array of timezones to compare must be in the order that daylight savings\n         * starts for the regions.\n         */\n      var AMBIGUITIES = {\n              'America/Denver':       ['America/Denver', 'America/Mazatlan'],\n              'America/Chicago':      ['America/Chicago', 'America/Mexico_City'],\n              'America/Santiago':     ['America/Santiago', 'America/Asuncion', 'America/Campo_Grande'],\n              'America/Montevideo':   ['America/Montevideo', 'America/Sao_Paulo'],\n              'Asia/Beirut':          ['Asia/Amman', 'Asia/Jerusalem', 'Asia/Beirut', 'Europe/Helsinki','Asia/Damascus'],\n              'Pacific/Auckland':     ['Pacific/Auckland', 'Pacific/Fiji'],\n              'America/Los_Angeles':  ['America/Los_Angeles', 'America/Santa_Isabel'],\n              'America/New_York':     ['America/Havana', 'America/New_York'],\n              'America/Halifax':      ['America/Goose_Bay', 'America/Halifax'],\n              'America/Godthab':      ['America/Miquelon', 'America/Godthab'],\n              'Asia/Dubai':           ['Europe/Moscow'],\n              'Asia/Dhaka':           ['Asia/Yekaterinburg'],\n              'Asia/Jakarta':         ['Asia/Omsk'],\n              'Asia/Shanghai':        ['Asia/Krasnoyarsk', 'Australia/Perth'],\n              'Asia/Tokyo':           ['Asia/Irkutsk'],\n              'Australia/Brisbane':   ['Asia/Yakutsk'],\n              'Pacific/Noumea':       ['Asia/Vladivostok'],\n              'Pacific/Tarawa':       ['Asia/Kamchatka', 'Pacific/Fiji'],\n              'Pacific/Tongatapu':    ['Pacific/Apia'],\n              'Asia/Baghdad':         ['Europe/Minsk'],\n              'Asia/Baku':            ['Asia/Yerevan','Asia/Baku'],\n              'Africa/Johannesburg':  ['Asia/Gaza', 'Africa/Cairo']\n          },\n\n          timezone_name = tz_name,\n          \n          /**\n           * Checks if a timezone has possible ambiguities. I.e timezones that are similar.\n           *\n           * For example, if the preliminary scan determines that we're in America/Denver.\n           * We double check here that we're really there and not in America/Mazatlan.\n           *\n           * This is done by checking known dates for when daylight savings start for different\n           * timezones during 2010 and 2011.\n           */\n          ambiguity_check = function () {\n              var ambiguity_list = AMBIGUITIES[timezone_name],\n                  length = ambiguity_list.length,\n                  i = 0,\n                  tz = ambiguity_list[0];\n\n              for (; i < length; i += 1) {\n                  tz = ambiguity_list[i];\n\n                  if (jstz.date_is_dst(jstz.dst_start_for(tz))) {\n                      timezone_name = tz;\n                      return;\n                  }\n              }\n          },\n\n          /**\n           * Checks if it is possible that the timezone is ambiguous.\n           */\n          is_ambiguous = function () {\n              return typeof (AMBIGUITIES[timezone_name]) !== 'undefined';\n          };\n\n      if (is_ambiguous()) {\n          ambiguity_check();\n      }\n\n      return {\n          name: function () {\n              return timezone_name;\n          }\n      };\n  };\n\n  jstz.olson = {};\n\n  /*\n   * The keys in this dictionary are comma separated as such:\n   *\n   * First the offset compared to UTC time in minutes.\n   *\n   * Then a flag which is 0 if the timezone does not take daylight savings into account and 1 if it\n   * does.\n   *\n   * Thirdly an optional 's' signifies that the timezone is in the southern hemisphere,\n   * only interesting for timezones with DST.\n   *\n   * The mapped arrays is used for constructing the jstz.TimeZone object from within\n   * jstz.determine_timezone();\n   */\n  jstz.olson.timezones = {\n      '-720,0'   : 'Pacific/Majuro',\n      '-660,0'   : 'Pacific/Pago_Pago',\n      '-600,1'   : 'America/Adak',\n      '-600,0'   : 'Pacific/Honolulu',\n      '-570,0'   : 'Pacific/Marquesas',\n      '-540,0'   : 'Pacific/Gambier',\n      '-540,1'   : 'America/Anchorage',\n      '-480,1'   : 'America/Los_Angeles',\n      '-480,0'   : 'Pacific/Pitcairn',\n      '-420,0'   : 'America/Phoenix',\n      '-420,1'   : 'America/Denver',\n      '-360,0'   : 'America/Guatemala',\n      '-360,1'   : 'America/Chicago',\n      '-360,1,s' : 'Pacific/Easter',\n      '-300,0'   : 'America/Bogota',\n      '-300,1'   : 'America/New_York',\n      '-270,0'   : 'America/Caracas',\n      '-240,1'   : 'America/Halifax',\n      '-240,0'   : 'America/Santo_Domingo',\n      '-240,1,s' : 'America/Santiago',\n      '-210,1'   : 'America/St_Johns',\n      '-180,1'   : 'America/Godthab',\n      '-180,0'   : 'America/Argentina/Buenos_Aires',\n      '-180,1,s' : 'America/Montevideo',\n      '-120,0'   : 'America/Noronha',\n      '-120,1'   : 'America/Noronha',\n      '-60,1'    : 'Atlantic/Azores',\n      '-60,0'    : 'Atlantic/Cape_Verde',\n      '0,0'      : 'UTC',\n      '0,1'      : 'Europe/London',\n      '60,1'     : 'Europe/Berlin',\n      '60,0'     : 'Africa/Lagos',\n      '60,1,s'   : 'Africa/Windhoek',\n      '120,1'    : 'Asia/Beirut',\n      '120,0'    : 'Africa/Johannesburg',\n      '180,0'    : 'Asia/Baghdad',\n      '180,1'    : 'Europe/Moscow',\n      '210,1'    : 'Asia/Tehran',\n      '240,0'    : 'Asia/Dubai',\n      '240,1'    : 'Asia/Baku',\n      '270,0'    : 'Asia/Kabul',\n      '300,1'    : 'Asia/Yekaterinburg',\n      '300,0'    : 'Asia/Karachi',\n      '330,0'    : 'Asia/Kolkata',\n      '345,0'    : 'Asia/Kathmandu',\n      '360,0'    : 'Asia/Dhaka',\n      '360,1'    : 'Asia/Omsk',\n      '390,0'    : 'Asia/Rangoon',\n      '420,1'    : 'Asia/Krasnoyarsk',\n      '420,0'    : 'Asia/Jakarta',\n      '480,0'    : 'Asia/Shanghai',\n      '480,1'    : 'Asia/Irkutsk',\n      '525,0'    : 'Australia/Eucla',\n      '525,1,s'  : 'Australia/Eucla',\n      '540,1'    : 'Asia/Yakutsk',\n      '540,0'    : 'Asia/Tokyo',\n      '570,0'    : 'Australia/Darwin',\n      '570,1,s'  : 'Australia/Adelaide',\n      '600,0'    : 'Australia/Brisbane',\n      '600,1'    : 'Asia/Vladivostok',\n      '600,1,s'  : 'Australia/Sydney',\n      '630,1,s'  : 'Australia/Lord_Howe',\n      '660,1'    : 'Asia/Kamchatka',\n      '660,0'    : 'Pacific/Noumea',\n      '690,0'    : 'Pacific/Norfolk',\n      '720,1,s'  : 'Pacific/Auckland',\n      '720,0'    : 'Pacific/Tarawa',\n      '765,1,s'  : 'Pacific/Chatham',\n      '780,0'    : 'Pacific/Tongatapu',\n      '780,1,s'  : 'Pacific/Apia',\n      '840,0'    : 'Pacific/Kiritimati'\n  };\n\n  if (typeof exports !== 'undefined') {\n    exports.jstz = jstz;\n  } else {\n    root.jstz = jstz;\n  }\n})(this);\n\n",
    "// Mingo.js 0.4.0\n// Copyright (c) 2015 Francis Asante <kofrasa@gmail.com>\n// MIT\n\n(function (root, undefined) {\n\n  \"use strict\";\n\n  // global on the server, window in the browser\n  var Mingo = {}, previousMingo;\n  var _;\n\n  // backup previous Mingo\n  if (root != null) {\n    previousMingo = root.Mingo;\n  }\n\n  Mingo.noConflict = function () {\n    root.Mingo = previousMingo;\n    return Mingo;\n  };\n\n  var nativeScriptEnabled = Boolean(((typeof android !== 'undefined' && android && android.widget && android.widget.Button)\n  || (typeof UIButton !== 'undefined' && UIButton)));\n\n  var nodeEnabled = ('undefined' !== typeof exports && 'undefined' !== typeof require && 'undefined' === typeof window && !nativeScriptEnabled);\n\n  var browserifyEnabled = 'undefined' !== typeof exports && 'undefined' !== typeof require;\n\n  // Export the Mingo object for Node.js\n  if (nodeEnabled || nativeScriptEnabled || browserifyEnabled) {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = Mingo;\n    } else {\n      exports = Mingo;\n    }\n    _ = require(\"underscore\"); // get a reference to underscore\n  } else {\n    root.Mingo = Mingo;\n    _ = root._; // get a reference to underscore\n  }\n\n  // quick reference for\n  var primitives = [\n    _.isString, _.isBoolean, _.isNumber, _.isDate, _.isNull, _.isRegExp\n  ];\n\n  function normalize(expr) {\n    // normalized primitives\n    for (var i = 0; i < primitives.length; i++) {\n      if (primitives[i](expr)) {\n        if (_.isRegExp(expr)) {\n          return {\"$regex\": expr};\n        } else {\n          return {\"$eq\": expr};\n        }\n      }\n    }\n    // normalize object expression\n    if (_.isObject(expr)) {\n      var keys = _.keys(expr);\n      var notQuery = _.intersection(Ops.queryOperators, keys).length === 0;\n\n      // no valid query operator found, so we do simple comparison\n      if (notQuery) {\n        return {\"$eq\": expr};\n      }\n\n      // ensure valid regex\n      if (_.contains(keys, \"$regex\")) {\n        var regex = expr['$regex'];\n        var options = expr['$options'] || \"\";\n        var modifiers = \"\";\n        if (_.isString(regex)) {\n          modifiers += (regex.ignoreCase || options.indexOf(\"i\") >= 0) ? \"i\" : \"\";\n          modifiers += (regex.multiline || options.indexOf(\"m\") >= 0) ? \"m\" : \"\";\n          modifiers += (regex.global || options.indexOf(\"g\") >= 0) ? \"g\" : \"\";\n          regex = new RegExp(regex, modifiers);\n        }\n        expr['$regex'] = regex;\n        delete expr['$options'];\n      }\n    }\n\n    return expr;\n  }\n\n  // Settings used by Mingo internally\n  var settings = {\n    key: \"_id\"\n  };\n\n  /**\n   * Setup default settings for Mingo\n   * @param options\n   */\n  Mingo.setup = function (options) {\n    _.extend(settings, options || {});\n  };\n\n\n  /**\n   * Query object to test collection elements with\n   * @param criteria the pass criteria for the query\n   * @param projection optional projection specifiers\n   * @constructor\n   */\n  Mingo.Query = function (criteria, projection) {\n    if (!(this instanceof Mingo.Query))\n      return new Mingo.Query(criteria, projection);\n\n    this._criteria = criteria;\n    this._projection = projection;\n    this._compiled = [];\n    this._compile();\n  };\n\n  Mingo.Query.prototype = {\n\n    _compile: function () {\n\n      if (_.isEmpty(this._criteria)) return;\n\n      if (_.isArray(this._criteria) || _.isFunction(this._criteria) || !_.isObject(this._criteria)) {\n        throw new Error(\"Invalid type for criteria\");\n      }\n\n      for (var field in this._criteria) {\n        if (this._criteria.hasOwnProperty(field)) {\n          var expr = this._criteria[field];\n          if (_.contains(['$and', '$or', '$nor', '$where'], field)) {\n            this._processOperator(field, field, expr);\n          } else {\n            // normalize expression\n            expr = normalize(expr);\n            for (var op in expr) {\n              if (expr.hasOwnProperty(op)) {\n                this._processOperator(field, op, expr[op]);\n              }\n            }\n          }\n        }\n      }\n    },\n\n    _processOperator: function (field, operator, value) {\n      var compiledSelector;\n      if (_.contains(Ops.simpleOperators, operator)) {\n        compiledSelector = {\n          test: function (obj) {\n            var actualValue = resolve(obj, field);\n            // value of operator must already be fully resolved.\n            return simpleOperators[operator](actualValue, value);\n          }\n        };\n      } else if (_.contains(Ops.compoundOperators, operator)) {\n        compiledSelector = compoundOperators[operator](field, value);\n      } else {\n        throw new Error(\"Invalid query operator '\" + operator + \"' detected\");\n      }\n      this._compiled.push(compiledSelector);\n    },\n\n    /**\n     * Checks if the object passes the query criteria. Returns true if so, false otherwise.\n     * @param obj\n     * @returns {boolean}\n     */\n    test: function (obj) {\n      for (var i = 0; i < this._compiled.length; i++) {\n        if (!this._compiled[i].test(obj)) {\n          return false;\n        }\n      }\n      return true;\n    },\n\n    /**\n     * Performs a query on a collection and returns a cursor object.\n     * @param collection\n     * @param projection\n     * @returns {Mingo.Cursor}\n     */\n    find: function (collection, projection) {\n      return new Mingo.Cursor(collection, this, projection);\n    },\n\n    /**\n     * Remove matched documents from the collection returning the remainder\n     * @param collection\n     * @returns {Array}\n     */\n    remove: function (collection) {\n      var arr = [];\n      for (var i = 0; i < collection.length; i++) {\n        if (!this.test(collection[i])) {\n          arr.push(collection[i]);\n        }\n      }\n      return arr;\n    }\n  };\n\n  if (nodeEnabled) {\n\n    var Transform = require('stream').Transform;\n    var util = require('util');\n\n    Mingo.Query.prototype.stream = function (options) {\n      return new Mingo.Stream(this, options);\n    };\n\n    /**\n     * Create a Transform class\n     * @param query\n     * @param options\n     * @returns {Mingo.Stream}\n     * @constructor\n     */\n    Mingo.Stream = function (query, options) {\n\n      if (!(this instanceof Mingo.Stream))\n        return new Mingo.Stream(query, options);\n\n      options = options || {};\n      _.extend(options, {objectMode: true});\n      Transform.call(this, options);\n      // query for this stream\n      this._query = query;\n    };\n    // extend Transform\n    util.inherits(Mingo.Stream, Transform);\n\n    Mingo.Stream.prototype._transform = function (chunk, encoding, done) {\n      if (_.isObject(chunk) && this._query.test(chunk)) {\n        if (_.isEmpty(this._query._projection)) {\n          this.push(chunk);\n        } else {\n          var cursor = new Mingo.Cursor([chunk], this._query);\n          if (cursor.hasNext()) {\n            this.push(cursor.next());\n          }\n        }\n      }\n      done();\n    };\n  }\n\n  /**\n   * Cursor to iterate and perform filtering on matched objects\n   * @param collection\n   * @param query\n   * @param projection\n   * @constructor\n   */\n  Mingo.Cursor = function (collection, query, projection) {\n\n    if (!(this instanceof Mingo.Cursor))\n      return new Mingo.Cursor(collection, query, projection);\n\n    this._query = query;\n    this._collection = collection;\n    this._projection = projection || query._projection;\n    this._operators = {};\n    this._result = false;\n    this._position = 0;\n  };\n\n  Mingo.Cursor.prototype = {\n\n    _fetch: function () {\n      var self = this;\n\n      if (this._result !== false) {\n        return this._result;\n      }\n\n      // inject projection operator\n      if (_.isObject(this._projection)) {\n        _.extend(this._operators, {\"$project\": this._projection});\n      }\n\n      // if (!_.isArray(this._collection) && !_.isObject(this._collection)) {\n      //   throw new Error(\"Input collection is not of valid type. Must be an Array.\");\n      // }\n\n      // filter collection\n      this._result = _.filter(this._collection, this._query.test, this._query);\n      var pipeline = [];\n\n      _.each(['$sort', '$skip', '$limit', '$project'], function (op) {\n        if (_.has(self._operators, op)) {\n          pipeline.push(_.pick(self._operators, op));\n        }\n      });\n\n      if (pipeline.length > 0) {\n        var aggregator = new Mingo.Aggregator(pipeline);\n        this._result = aggregator.run(this._result, this._query);\n      }\n      return this._result;\n    },\n\n    /**\n     * Fetch and return all matched results\n     * @returns {Array}\n     */\n    all: function () {\n      return this._fetch();\n    },\n\n    /**\n     * Fetch and return the first matching result\n     * @returns {Object}\n     */\n    first: function () {\n      return this.count() > 0 ? this._fetch()[0] : null;\n    },\n\n    /**\n     * Fetch and return the last matching object from the result\n     * @returns {Object}\n     */\n    last: function () {\n      return this.count() > 0 ? this._fetch()[this.count() - 1] : null;\n    },\n\n    /**\n     * Counts the number of matched objects found\n     * @returns {Number}\n     */\n    count: function () {\n      return this._fetch().length;\n    },\n\n    /**\n     * Returns a cursor that begins returning results only after passing or skipping a number of documents.\n     * @param {Number} n the number of results to skip.\n     * @return {Mingo.Cursor} Returns the cursor, so you can chain this call.\n     */\n    skip: function (n) {\n      _.extend(this._operators, {\"$skip\": n});\n      return this;\n    },\n\n    /**\n     * Constrains the size of a cursor's result set.\n     * @param {Number} n the number of results to limit to.\n     * @return {Mingo.Cursor} Returns the cursor, so you can chain this call.\n     */\n    limit: function (n) {\n      _.extend(this._operators, {\"$limit\": n});\n      return this;\n    },\n\n    /**\n     * Returns results ordered according to a sort specification.\n     * @param {Object} modifier an object of key and values specifying the sort order. 1 for ascending and -1 for descending\n     * @return {Mingo.Cursor} Returns the cursor, so you can chain this call.\n     */\n    sort: function (modifier) {\n      _.extend(this._operators, {\"$sort\": modifier});\n      return this;\n    },\n\n    /**\n     * Returns the next document in a cursor.\n     * @returns {Object | Boolean}\n     */\n    next: function () {\n      if (this.hasNext()) {\n        return this._fetch()[this._position++];\n      }\n      return null;\n    },\n\n    /**\n     * Returns true if the cursor has documents and can be iterated.\n     * @returns {boolean}\n     */\n    hasNext: function () {\n      return this.count() > this._position;\n    },\n\n    /**\n     * Specifies the exclusive upper bound for a specific field\n     * @param expr\n     * @returns {Number}\n     */\n    max: function (expr) {\n      return groupOperators.$max(this._fetch(), expr);\n    },\n\n    /**\n     * Specifies the inclusive lower bound for a specific field\n     * @param expr\n     * @returns {Number}\n     */\n    min: function (expr) {\n      return groupOperators.$min(this._fetch(), expr);\n    },\n\n    /**\n     * Applies a function to each document in a cursor and collects the return values in an array.\n     * @param callback\n     * @returns {Array}\n     */\n    map: function (callback) {\n      return _.map(this._fetch(), callback);\n    },\n\n    /**\n     * Applies a JavaScript function for every document in a cursor.\n     * @param callback\n     */\n    forEach: function (callback) {\n      _.each(this._fetch(), callback);\n    }\n\n  };\n\n  /**\n   * Aggregator for defining filter using mongoDB aggregation pipeline syntax\n   * @param operators an Array of pipeline operators\n   * @constructor\n   */\n  Mingo.Aggregator = function (operators) {\n    if (!(this instanceof Mingo.Aggregator))\n      return new Mingo.Aggregator(operators);\n\n    this._operators = operators;\n  };\n\n  Mingo.Aggregator.prototype = {\n\n    /**\n     * Apply the pipeline operations over the collection by order of the sequence added\n     * @param collection an array of objects to process\n     * @param query the `Mingo.Query` object to use as context\n     * @returns {Array}\n     */\n    run: function (collection, query) {\n      if (!_.isEmpty(this._operators)) {\n        // run aggregation pipeline\n        for (var i = 0; i < this._operators.length; i++) {\n          var operator = this._operators[i];\n          for (var key in operator) {\n            if (operator.hasOwnProperty(key)) {\n              if (query instanceof Mingo.Query) {\n                collection = pipelineOperators[key].call(query, collection, operator[key]);\n              } else {\n                collection = pipelineOperators[key](collection, operator[key]);\n              }\n            }\n          }\n        }\n      }\n      return collection;\n    }\n  };\n\n  /**\n   * Retrieve the value of a given key on an object\n   * @param obj\n   * @param field\n   * @returns {*}\n   * @private\n   */\n  function getValue(obj, field) {\n    return _.result(obj, field);\n  }\n\n  /**\n   * Resolve the value of the field (dot separated) on the given object\n   * @param obj\n   * @param field\n   * @returns {*}\n   */\n  function resolve(obj, field) {\n    if (!field) {\n      return undefined;\n    }\n    var names = field.split(\".\");\n    var value = obj;\n    var isText;\n\n    for (var i = 0; i < names.length; i++) {\n      isText = names[i].match(/^\\d+$/) === null;\n\n      if (isText && _.isArray(value)) {\n        var res = [];\n        _.each(value, function (item) {\n          if (_.isObject(item)) {\n            res.push(resolve(item, names[i]));\n          }\n        });\n        value = res;\n      } else {\n        value = getValue(value, names[i]);\n      }\n\n      if (value === undefined) {\n        break;\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Performs a query on a collection and returns a cursor object.\n   * @param collection\n   * @param criteria\n   * @param projection\n   * @returns {Mingo.Cursor}\n   */\n  Mingo.find = function (collection, criteria, projection) {\n    return (new Mingo.Query(criteria)).find(collection, projection);\n  };\n\n  /**\n   * Returns a new array without objects which match the criteria\n   * @param collection\n   * @param criteria\n   * @returns {Array}\n   */\n  Mingo.remove = function (collection, criteria) {\n    return (new Mingo.Query(criteria)).remove(collection);\n  };\n\n  /**\n   * Return the result collection after running the aggregation pipeline for the given collection\n   * @param collection\n   * @param pipeline\n   * @returns {Array}\n   */\n  Mingo.aggregate = function (collection, pipeline) {\n    if (!_.isArray(pipeline)) {\n      throw new Error(\"Aggregation pipeline must be an array\")\n    }\n    return (new Mingo.Aggregator(pipeline)).run(collection);\n  };\n\n  /**\n   * Mixin for Backbone.Collection objects\n   */\n  Mingo.CollectionMixin = {\n    /**\n     * Runs a query and returns a cursor to the result\n     * @param criteria\n     * @param projection\n     * @returns {Mingo.Cursor}\n     */\n    query: function (criteria, projection) {\n      return Mingo.find(this.toJSON(), criteria, projection);\n    },\n\n    /**\n     * Runs the given aggregation operators on this collection\n     * @params pipeline\n     * @returns {Array}\n     */\n    aggregate: function (pipeline) {\n      var args = [this.toJSON(), pipeline];\n      return Mingo.aggregate.apply(null, args);\n    }\n  };\n\n  var pipelineOperators = {\n\n    /**\n     * Groups documents together for the purpose of calculating aggregate values based on a collection of documents.\n     *\n     * @param collection\n     * @param expr\n     * @returns {Array}\n     */\n    $group: function (collection, expr) {\n      // lookup key for grouping\n      var idKey = expr[settings.key];\n      var indexes = [];\n      // group collection by key\n      var groups = _.groupBy(collection, function (obj) {\n        var key = computeValue(obj, idKey, idKey);\n        indexes.push(key);\n        return key;\n      });\n\n      // group indexes\n      indexes = _.uniq(indexes);\n\n      // remove the group key\n      expr = _.omit(expr, settings.key);\n\n      var result = [];\n      _.each(indexes, function (index) {\n        var obj = {};\n        obj[settings.key] = index;\n        // compute remaining keys in expression\n        for (var key in expr) {\n          if (expr.hasOwnProperty(key)) {\n            obj[key] = accumulate(groups[index], key, expr[key]);\n          }\n        }\n        result.push(obj);\n      });\n\n      return result;\n    },\n\n    /**\n     * Filters the document stream, and only allows matching documents to pass into the next pipeline stage.\n     * $match uses standard MongoDB queries.\n     *\n     * @param collection\n     * @param expr\n     * @returns {Array|*}\n     */\n    $match: function (collection, expr) {\n      return (new Mingo.Query(expr)).find(collection).all();\n    },\n\n    /**\n     * Reshapes a document stream.\n     * $project can rename, add, or remove fields as well as create computed values and sub-documents.\n     *\n     * @param collection\n     * @param expr\n     * @returns {Array}\n     */\n    $project: function (collection, expr) {\n\n      if (_.isEmpty(expr)) {\n        return collection;\n      }\n      var usesExclusion = false;\n      _.each(expr, function(val, key) {\n        if(val === 0 && key !== settings.key) {\n           usesExclusion = true;\n        }\n        if(val !== 0 && usesExclusion) {\n            throw new Error(\"You cannot mix including and excluding fields.\"); \n        }\n      });\n\n      // result collection\n      var projected = [];\n      var objKeys = _.keys(expr);\n      var idOnlyExcludedExpression = false;\n\n      if (_.contains(objKeys, settings.key)) {\n        var id = expr[settings.key];\n        if (id === 0 || id === false) {\n          objKeys = _.without(objKeys, settings.key);\n          if (_.isEmpty(objKeys)) {\n            idOnlyExcludedExpression = true;\n          }\n        }\n      } else {\n        // if not specified the add the ID field\n        objKeys.push(settings.key);\n      }\n\n      for (var i = 0; i < collection.length; i++) {\n        var obj = collection[i];\n        var cloneObj = {};\n        var foundSlice = false;\n        var foundExclusion = false;\n        var dropKeys = [];\n        if (idOnlyExcludedExpression) {\n          dropKeys.push(settings.key);\n        }\n        _.each(objKeys, function (key) {\n\n          var subExpr = expr[key];\n          var newValue;\n          if (key !== settings.key && subExpr === 0) {\n            foundExclusion = true;\n          }\n\n          // tiny optimization here to skip over id\n          if (key === settings.key && _.isEmpty(subExpr)) {\n            newValue = obj[key];\n          } else if (_.isString(subExpr)) {\n            newValue = computeValue(obj, subExpr, key);\n          } else if (subExpr === 1 || subExpr === true) {\n            newValue = _.result(obj, key);\n          } else if (_.isObject(subExpr)) {\n            var operator = _.keys(subExpr);\n            operator = operator.length > 1 ? false : operator[0];\n            if (operator !== false && _.contains(Ops.projectionOperators, operator)) {\n              // apply the projection operator on the operator expression for the key\n              var temp = projectionOperators[operator](obj, subExpr[operator], key);\n              if (!_.isUndefined(temp)) {\n                newValue = temp;\n              }\n              if (operator == '$slice') {\n                foundSlice = true;\n              }\n            } else {\n              // compute the value for the sub expression for the key\n              newValue = computeValue(obj, subExpr, key);\n            }\n          } else {\n            dropKeys.push(key);\n          }\n\n          if (newValue !== undefined) {\n            cloneObj[key] = _.isObject(newValue) ? _.clone(newValue) : newValue;\n          }\n        });\n        // if projection included $slice operator\n        // Also if exclusion fields are found or we want to exclude only the id field\n        // include keys that were not explicitly excluded\n        if (foundSlice || foundExclusion || idOnlyExcludedExpression) {\n          cloneObj = _.defaults(cloneObj, _.omit(obj, dropKeys));\n        }\n        projected.push(cloneObj);\n      }\n\n      return projected;\n    },\n\n    /**\n     * Restricts the number of documents in an aggregation pipeline.\n     *\n     * @param collection\n     * @param value\n     * @returns {Object|*}\n     */\n    $limit: function (collection, value) {\n      return _.first(collection, value);\n    },\n\n    /**\n     * Skips over a specified number of documents from the pipeline and returns the rest.\n     *\n     * @param collection\n     * @param value\n     * @returns {*}\n     */\n    $skip: function (collection, value) {\n      return _.rest(collection, value);\n    },\n\n    /**\n     * Takes an array of documents and returns them as a stream of documents.\n     *\n     * @param collection\n     * @param expr\n     * @returns {Array}\n     */\n    $unwind: function (collection, expr) {\n      var result = [];\n      var field = expr.substr(1);\n      for (var i = 0; i < collection.length; i++) {\n        var obj = collection[i];\n        // must throw an error if value is not an array\n        var value = getValue(obj, field);\n        if (_.isArray(value)) {\n          _.each(value, function (item) {\n            var tmp = _.clone(obj);\n            tmp[field] = item;\n            result.push(tmp);\n          });\n        } else {\n          throw new Error(\"Target field '\" + field + \"' is not of type Array.\");\n        }\n      }\n      return result;\n    },\n\n    /**\n     * Takes all input documents and returns them in a stream of sorted documents.\n     *\n     * @param collection\n     * @param sortKeys\n     * @returns {*}\n     */\n    $sort: function (collection, sortKeys) {\n      if (!_.isEmpty(sortKeys) && _.isObject(sortKeys)) {\n        var modifiers = _.keys(sortKeys);\n        modifiers.reverse().forEach(function (key) {\n          var indexes = [];\n          var grouped = _.groupBy(collection, function (obj) {\n            var value = resolve(obj, key);\n            indexes.push(value);\n            return value;\n          });\n          indexes = _.sortBy(_.uniq(indexes), function (item) {\n            return item;\n          });\n          if (sortKeys[key] === -1) {\n            indexes.reverse();\n          }\n          collection = [];\n          _.each(indexes, function (item) {\n            Array.prototype.push.apply(collection, grouped[item]);\n          });\n        });\n      }\n      return collection;\n    }\n  };\n\n  var compoundOperators = {\n\n    /**\n     * Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.\n     *\n     * @param selector\n     * @param value\n     * @returns {{test: Function}}\n     */\n    $and: function (selector, value) {\n      if (!_.isArray(value)) {\n        throw new Error(\"Invalid expression for $and criteria\");\n      }\n      var queries = [];\n      _.each(value, function (expr) {\n        queries.push(new Mingo.Query(expr));\n      });\n\n      return {\n        test: function (obj) {\n          for (var i = 0; i < queries.length; i++) {\n            if (!queries[i].test(obj)) {\n              return false;\n            }\n          }\n          return true;\n        }\n      };\n    },\n\n    /**\n     * Joins query clauses with a logical OR returns all documents that match the conditions of either clause.\n     *\n     * @param selector\n     * @param value\n     * @returns {{test: Function}}\n     */\n    $or: function (selector, value) {\n      if (!_.isArray(value)) {\n        throw new Error(\"Invalid expression for $or criteria\");\n      }\n      var queries = [];\n      _.each(value, function (expr) {\n        queries.push(new Mingo.Query(expr));\n      });\n\n      return {\n        test: function (obj) {\n          for (var i = 0; i < queries.length; i++) {\n            if (queries[i].test(obj)) {\n              return true;\n            }\n          }\n          return false;\n        }\n      };\n    },\n\n    /**\n     * Joins query clauses with a logical NOR returns all documents that fail to match both clauses.\n     *\n     * @param selector\n     * @param value\n     * @returns {{test: Function}}\n     */\n    $nor: function (selector, value) {\n      if (!_.isArray(value)) {\n        throw new Error(\"Invalid expression for $nor criteria\");\n      }\n      var query = this.$or(\"$or\", value);\n      return {\n        test: function (obj) {\n          return !query.test(obj);\n        }\n      };\n    },\n\n    /**\n     * Inverts the effect of a query expression and returns documents that do not match the query expression.\n     *\n     * @param selector\n     * @param value\n     * @returns {{test: Function}}\n     */\n    $not: function (selector, value) {\n      var criteria = {};\n      criteria[selector] = normalize(value);\n      var query = new Mingo.Query(criteria);\n      return {\n        test: function (obj) {\n          return !query.test(obj);\n        }\n      };\n    },\n\n    /**\n     * Matches documents that satisfy a JavaScript expression.\n     *\n     * @param selector\n     * @param value\n     * @returns {{test: test}}\n     */\n    $where: function (selector, value) {\n      if (!_.isFunction(value)) {\n        value = new Function(\"return \" + value + \";\");\n      }\n      return {\n        test: function (obj) {\n          return value.call(obj) === true;\n        }\n      };\n    }\n\n  };\n\n  var simpleOperators = {\n\n    /**\n     * Checks that two values are equal. Pseudo operator introduced for convenience and consistency\n     *\n     * @param a\n     * @param b\n     * @returns {*}\n     */\n    $eq: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return _.isEqual(val, b);\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Matches all values that are not equal to the value specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean}\n     */\n    $ne: function (a, b) {\n      return !this.$eq(a, b);\n    },\n\n    /**\n     * Matches any of the values that exist in an array specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns {*}\n     */\n    $in: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      return _.intersection(a, b).length > 0;\n    },\n\n    /**\n     * Matches values that do not exist in an array specified to the query.\n     *\n     * @param a\n     * @param b\n     * @returns {*|boolean}\n     */\n    $nin: function (a, b) {\n      return _.isUndefined(a) || !this.$in(a, b);\n    },\n\n    /**\n     * Matches values that are less than the value specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean}\n     */\n    $lt: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return val < b\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Matches values that are less than or equal to the value specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean}\n     */\n    $lte: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return val <= b\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Matches values that are greater than the value specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean}\n     */\n    $gt: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return val > b\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Matches values that are greater than or equal to the value specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean}\n     */\n    $gte: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return val >= b\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Performs a modulo operation on the value of a field and selects documents with a specified result.\n     *\n     * @param a\n     * @param b\n     * @returns {*|boolean|boolean}\n     */\n    $mod: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return _.isNumber(val) && _.isArray(b) && b.length === 2 && (val % b[0]) === b[1];\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Selects documents where values match a specified regular expression.\n     *\n     * @param a\n     * @param b\n     * @returns {*|boolean}\n     */\n    $regex: function (a, b) {\n      a = _.isArray(a) ? a : [a];\n      a = _.find(a, function (val) {\n        return _.isString(val) && _.isRegExp(b) && (!!val.match(b));\n      });\n      return a !== undefined;\n    },\n\n    /**\n     * Matches documents that have the specified field.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean|*|boolean}\n     */\n    $exists: function (a, b) {\n      return (b === false && _.isUndefined(a)) || (b === true && !_.isUndefined(a));\n    },\n\n    /**\n     * Matches arrays that contain all elements specified in the query.\n     *\n     * @param a\n     * @param b\n     * @returns boolean\n     */\n    $all: function (a, b) {\n      var self = this;\n      var matched = false;\n      if (_.isArray(a) && _.isArray(b)) {\n        for (var i = 0; i < b.length; i++) {\n          if (_.isObject(b[i]) && _.contains(_.keys(b[i]), \"$elemMatch\")) {\n            matched = matched || self.$elemMatch(a, b[i].$elemMatch);\n          } else {\n            // order of arguments matter. underscore maintains order after intersection\n            return _.intersection(b, a).length === b.length;\n          }\n        }\n      }\n      return matched;\n    },\n\n    /**\n     * Selects documents if the array field is a specified size.\n     *\n     * @param a\n     * @param b\n     * @returns {*|boolean}\n     */\n    $size: function (a, b) {\n      return _.isArray(a) && _.isNumber(b) && (a.length === b);\n    },\n\n    /**\n     * Selects documents if element in the array field matches all the specified $elemMatch condition.\n     *\n     * @param a\n     * @param b\n     */\n    $elemMatch: function (a, b) {\n      if (_.isArray(a) && !_.isEmpty(a)) {\n        var query = new Mingo.Query(b);\n        for (var i = 0; i < a.length; i++) {\n          if (query.test(a[i])) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n\n    /**\n     * Selects documents if a field is of the specified type.\n     *\n     * @param a\n     * @param b\n     * @returns {boolean}\n     */\n    $type: function (a, b) {\n      switch (b) {\n        case 1:\n          return _.isNumeric(a) && (a + \"\").indexOf(\".\") !== -1;\n        case 2:\n        case 5:\n          return _.isString(a);\n        case 3:\n          return _.isObject(a);\n        case 4:\n          return _.isArray(a);\n        case 8:\n          return _.isBoolean(a);\n        case 9:\n          return _.isDate(a);\n        case 10:\n          return _.isNull(a);\n        case 11:\n          return _.isRegExp(a);\n        case 16:\n          return _.isNumeric(a) && a <= 2147483647 && (a + \"\").indexOf(\".\") === -1;\n        case 18:\n          return _.isNumeric(a) && a > 2147483647 && a <= 9223372036854775807 && (a + \"\").indexOf(\".\") === -1;\n        default:\n          return false;\n      }\n    }\n\n  };\n\n  var projectionOperators = {\n\n    /**\n     * Projects the first element in an array that matches the query condition.\n     *\n     * @param obj\n     * @param field\n     * @param expr\n     */\n    $: function (obj, expr, field) {\n      throw new Error(\"$ not implemented\");\n    },\n\n    /**\n     * Projects only the first element from an array that matches the specified $elemMatch condition.\n     *\n     * @param obj\n     * @param field\n     * @param expr\n     * @returns {*}\n     */\n    $elemMatch: function (obj, expr, field) {\n      var array = resolve(obj, field);\n      var query = new Mingo.Query(expr);\n\n      if (_.isUndefined(array) || !_.isArray(array)) {\n        return undefined;\n      }\n\n      for (var i = 0; i < array.length; i++) {\n        if (query.test(array[i])) {\n          return [array[i]];\n        }\n      }\n\n      return undefined;\n    },\n\n    /**\n     * Limits the number of elements projected from an array. Supports skip and limit slices.\n     *\n     * @param obj\n     * @param field\n     * @param expr\n     */\n    $slice: function (obj, expr, field) {\n      var array = resolve(obj, field);\n\n      if (!_.isArray(array)) {\n        return array;\n      }\n      if (!_.isArray(expr)) {\n        if (!_.isNumber(expr)) {\n          throw new Error(\"Invalid type for $slice operator\");\n        }\n        expr = expr < 0 ? [expr] : [0, expr];\n      } else {\n        // MongoDB $slice works a bit differently from Array.slice\n        // Uses single argument for 'limit' and array argument [skip, limit]\n        var skip = (expr[0] < 0) ? array.length + expr[0] : expr;\n        var limit = skip + expr[1];\n        expr = [skip, limit];\n      }\n\n      return Array.prototype.slice.apply(array, expr);\n    }\n  };\n\n  var groupOperators = {\n\n    /**\n     * Returns an array of all the unique values for the selected field among for each document in that group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {*}\n     */\n    $addToSet: function (collection, expr) {\n      var result = _.map(collection, function (obj) {\n        return computeValue(obj, expr);\n      });\n      return _.uniq(result);\n    },\n\n    /**\n     * Returns the sum of all the values in a group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {*}\n     */\n    $sum: function (collection, expr) {\n      if (_.isNumber(expr)) {\n        // take a short cut if expr is number literal\n        return collection.length * expr;\n      }\n      return _.reduce(collection, function (acc, obj) {\n        // pass empty field to avoid naming conflicts with fields on documents\n        return acc + computeValue(obj, expr);\n      }, 0);\n    },\n\n    /**\n     * Returns the highest value in a group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {*}\n     */\n    $max: function (collection, expr) {\n      var obj = _.max(collection, function (obj) {\n        return computeValue(obj, expr);\n      });\n      return computeValue(obj, expr);\n    },\n\n    /**\n     * Returns the lowest value in a group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {*}\n     */\n    $min: function (collection, expr) {\n      var obj = _.min(collection, function (obj) {\n        return computeValue(obj, expr);\n      });\n      return computeValue(obj, expr);\n    },\n\n    /**\n     * Returns an average of all the values in a group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {number}\n     */\n    $avg: function (collection, expr) {\n      return this.$sum(collection, expr) / (collection.length || 1);\n    },\n\n    /**\n     * Returns an array of all values for the selected field among for each document in that group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {Array|*}\n     */\n    $push: function (collection, expr) {\n      return _.map(collection, function (obj) {\n        return computeValue(obj, expr);\n      });\n    },\n\n    /**\n     * Returns the first value in a group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {*}\n     */\n    $first: function (collection, expr) {\n      return (collection.length > 0) ? computeValue(collection[0], expr) : undefined;\n    },\n\n    /**\n     * Returns the last value in a group.\n     *\n     * @param collection\n     * @param expr\n     * @returns {*}\n     */\n    $last: function (collection, expr) {\n      return (collection.length > 0) ? computeValue(collection[collection.length - 1], expr) : undefined;\n    }\n  };\n\n\n  /////////// Common Aggregation Operators ///////////\n\n  var arithmeticOperators = {\n\n    /**\n     * Computes the sum of an array of numbers.\n     *\n     * @param obj\n     * @param expr\n     * @returns {Object}\n     */\n    $add: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      return _.reduce(args, function (memo, num) {\n        return memo + num;\n      }, 0);\n    },\n\n    /**\n     * Takes an array that contains two numbers or two dates and subtracts the second value from the first.\n     *\n     * @param obj\n     * @param expr\n     * @returns {number}\n     */\n    $subtract: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      return args[0] - args[1];\n    },\n\n    /**\n     * Takes two numbers and divides the first number by the second.\n     *\n     * @param obj\n     * @param expr\n     * @returns {number}\n     */\n    $divide: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      return args[0] / args[1];\n    },\n\n    /**\n     * Computes the product of an array of numbers.\n     *\n     * @param obj\n     * @param expr\n     * @returns {Object}\n     */\n    $multiply: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      return _.reduce(args, function (memo, num) {\n        return memo * num;\n      }, 1);\n    },\n\n    /**\n     * Takes two numbers and calculates the modulo of the first number divided by the second.\n     *\n     * @param obj\n     * @param expr\n     * @returns {number}\n     */\n    $mod: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      return args[0] % args[1];\n    }\n  };\n\n  var stringOperators = {\n\n    /**\n     * Concatenates two strings.\n     *\n     * @param obj\n     * @param expr\n     * @returns {string|*}\n     */\n    $concat: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      // does not allow concatenation with nulls\n      if (_.contains(args, null) || _.contains(args, undefined)) {\n        return null;\n      }\n      return args.join(\"\");\n    },\n\n    /**\n     * Compares two strings and returns an integer that reflects the comparison.\n     *\n     * @param obj\n     * @param expr\n     * @returns {number}\n     */\n    $strcasecmp: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      args[0] = _.isEmpty(args[0]) ? \"\" : args[0].toUpperCase();\n      args[1] = _.isEmpty(args[1]) ? \"\" : args[1].toUpperCase();\n      if (args[0] > args[1]) {\n        return 1;\n      }\n      return (args[0] < args[1]) ? -1 : 0;\n    },\n\n    /**\n     * Returns a substring of a string, starting at a specified index position and including the specified number of characters.\n     * The index is zero-based.\n     *\n     * @param obj\n     * @param expr\n     * @returns {string}\n     */\n    $substr: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      if (_.isString(args[0])) {\n        if (args[1] < 0) {\n          return \"\";\n        } else if (args[2] < 0) {\n          return args[0].substr(args[1]);\n        } else {\n          return args[0].substr(args[1], args[2]);\n        }\n      }\n      return \"\";\n    },\n\n    /**\n     * Converts a string to lowercase.\n     *\n     * @param obj\n     * @param expr\n     * @returns {string}\n     */\n    $toLower: function (obj, expr) {\n      var value = computeValue(obj, expr);\n      return _.isEmpty(value) ? \"\" : value.toLowerCase();\n    },\n\n    /**\n     * Converts a string to uppercase.\n     *\n     * @param obj\n     * @param expr\n     * @returns {string}\n     */\n    $toUpper: function (obj, expr) {\n      var value = computeValue(obj, expr);\n      return _.isEmpty(value) ? \"\" : value.toUpperCase();\n    }\n  };\n\n  var dateOperators = {\n    /**\n     * Returns the day of the year for a date as a number between 1 and 366 (leap year).\n     * @param obj\n     * @param expr\n     */\n    $dayOfYear: function (obj, expr) {\n      var d = computeValue(obj, expr);\n      if (_.isDate(value)) {\n        var start = new Date(d.getFullYear(), 0, 0);\n        var diff = d - start;\n        var oneDay = 1000 * 60 * 60 * 24;\n        return Math.round(diff / oneDay);\n      }\n      return undefined;\n    },\n\n    /**\n     * Returns the day of the month for a date as a number between 1 and 31.\n     * @param obj\n     * @param expr\n     */\n    $dayOfMonth: function (obj, expr) {\n      var d = computeValue(obj, expr);\n      return _.isDate(d) ? d.getDate() : undefined;\n    },\n\n    /**\n     * Returns the day of the week for a date as a number between 1 (Sunday) and 7 (Saturday).\n     * @param obj\n     * @param expr\n     */\n    $dayOfWeek: function (obj, expr) {\n      var d = computeValue(obj, expr);\n      return _.isDate(d) ? d.getDay() + 1 : undefined;\n    },\n\n    /**\n     * Returns the year for a date as a number (e.g. 2014).\n     * @param obj\n     * @param expr\n     */\n    $year: function (obj, expr) {\n      var d = computeValue(obj, expr);\n      return _.isDate(d) ? d.getFullYear() + 1 : undefined;\n    },\n\n    /**\n     * Returns the month for a date as a number between 1 (January) and 12 (December).\n     * @param obj\n     * @param expr\n     */\n    $month: function (obj, expr) {\n      var d = computeValue(obj, expr);\n      return _.isDate(d) ? d.getMonth() + 1 : undefined;\n    },\n\n    /**\n     * Returns the week number for a date as a number between 0\n     * (the partial week that precedes the first Sunday of the year) and 53 (leap year).\n     * @param obj\n     * @param expr\n     */\n    $week: function (obj, expr) {\n      var d = computeValue(obj, expr);\n      // TODO\n      throw new Error(\"Not Implemented\");\n    },\n\n    /**\n     * Returns the hour for a date as a number between 0 and 23.\n     * @param obj\n     * @param expr\n     */\n    $hour: function (obj, expr) {\n      var d = computeValue(obj, expr);\n      return _.isDate(d) ? d.getHours() : undefined;\n    },\n\n    /**\n     * Returns the minute for a date as a number between 0 and 59.\n     * @param obj\n     * @param expr\n     */\n    $minute: function (obj, expr) {\n      var d = computeValue(obj, expr);\n      return _.isDate(d) ? d.getMinutes() : undefined;\n    },\n\n    /**\n     * Returns the seconds for a date as a number between 0 and 60 (leap seconds).\n     * @param obj\n     * @param expr\n     */\n    $second: function (obj, expr) {\n      var d = computeValue(obj, expr);\n      return _.isDate(d) ? d.getSeconds() : undefined;\n    },\n\n    /**\n     * Returns the milliseconds of a date as a number between 0 and 999.\n     * @param obj\n     * @param expr\n     */\n    $millisecond: function (obj, expr) {\n      var d = computeValue(obj, expr);\n      return _.isDate(d) ? d.getMilliseconds() : undefined;\n    },\n\n    /**\n     * Returns the date as a formatted string.\n     * @param obj\n     * @param expr\n     */\n    $dateToString: function (obj, expr) {\n      var fmt = expr['format'];\n      var date = computeValue(obj, expr['date']);\n      // TODO: use python-style date formatting\n      /*\n       %Y\tYear (4 digits, zero padded)\t0000-9999\n       %m\tMonth (2 digits, zero padded)\t01-12\n       %d\tDay of Month (2 digits, zero padded)\t01-31\n       %H\tHour (2 digits, zero padded, 24-hour clock)\t00-23\n       %M\tMinute (2 digits, zero padded)\t00-59\n       %S\tSecond (2 digits, zero padded)\t00-60\n       %L\tMillisecond (3 digits, zero padded)\t000-999\n       %j\tDay of year (3 digits, zero padded)\t001-366\n       %w\tDay of week (1-Sunday, 7-Saturday)\t1-7\n       %U\tWeek of year (2 digits, zero padded)\t00-53\n       %%\tPercent Character as a Literal\t%\n       */\n      throw new Error(\"Not Implemented\");\n    }\n  };\n\n  var setOperators = {\n    /**\n     * Returns true if two sets have the same elements.\n     * @param obj\n     * @param expr\n     */\n    $setEquals: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      var first = _.uniq(args[0]);\n      var second = _.uniq(args[1]);\n      if (first.length !== second.length) {\n        return false;\n      }\n      return _.difference(first, second).length == 0;\n    },\n\n    /**\n     * Returns the common elements of the input sets.\n     * @param obj\n     * @param expr\n     */\n    $setIntersection: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      return _.intersection(args[0], args[1]);\n    },\n\n    /**\n     * Returns elements of a set that do not appear in a second set.\n     * @param obj\n     * @param expr\n     */\n    $setDifference: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      return _.difference(args[0], args[1]);\n    },\n\n    /**\n     * Returns a set that holds all elements of the input sets.\n     * @param obj\n     * @param expr\n     */\n    $setUnion: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      return _.union(args[0], args[1]);\n    },\n\n    /**\n     * Returns true if all elements of a set appear in a second set.\n     * @param obj\n     * @param expr\n     */\n    $setIsSubset: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      return _.intersection(args[0], args[1]).length === args[0].length;\n    },\n\n    /**\n     * Returns true if any elements of a set evaluate to true, and false otherwise.\n     * @param obj\n     * @param expr\n     */\n    $anyElementTrue: function (obj, expr) {\n      // mongodb nests the array expression in another\n      var args = computeValue(obj, expr)[0];\n      for (var i = 0; i < args.length; i++) {\n        if (!!args[i])\n          return true;\n      }\n      return false;\n    },\n\n    /**\n     * Returns true if all elements of a set evaluate to true, and false otherwise.\n     * @param obj\n     * @param expr\n     */\n    $allElementsTrue: function (obj, expr) {\n      // mongodb nests the array expression in another\n      var args = computeValue(obj, expr)[0];\n      for (var i = 0; i < args.length; i++) {\n        if (!args[i])\n          return false;\n      }\n      return true;\n    }\n  };\n\n  var conditionalOperators = {\n\n    /**\n     * A ternary operator that evaluates one expression,\n     * and depending on the result returns the value of one following expressions.\n     *\n     * @param obj\n     * @param expr\n     */\n    $cond: function (obj, expr) {\n      var ifExpr, thenExpr, elseExpr;\n      if (_.isArray(expr)) {\n        if (expr.length != 3) {\n          throw new Error(\"Invalid arguments for $cond operator\");\n        }\n        ifExpr = expr[0];\n        thenExpr = expr[1];\n        elseExpr = expr[2];\n      } else if (_.isObject(expr)) {\n        ifExpr = expr['if'];\n        thenExpr = expr['then'];\n        elseExpr = expr['else'];\n      }\n      var condition = computeValue(obj, ifExpr);\n      return condition ? computeValue(obj, thenExpr) : computeValue(obj, elseExpr);\n    },\n\n    /**\n     * Evaluates an expression and returns the first expression if it evaluates to a non-null value.\n     * Otherwise, $ifNull returns the second expression's value.\n     *\n     * @param obj\n     * @param expr\n     * @returns {*}\n     */\n    $ifNull: function (obj, expr) {\n      if (!_.isArray(expr) || expr.length != 2) {\n        throw new Error(\"Invalid arguments for $ifNull operator\");\n      }\n      var args = computeValue(obj, expr);\n      return (args[0] === null || args[0] === undefined) ? args[1] : args[0];\n    }\n  };\n\n  var comparisonOperators = {\n    /**\n     * Compares two values and returns the result of the comparison as an integer.\n     *\n     * @param obj\n     * @param expr\n     * @returns {number}\n     */\n    $cmp: function (obj, expr) {\n      var args = computeValue(obj, expr);\n      if (args[0] > args[1]) {\n        return 1;\n      }\n      return (args[0] < args[1]) ? -1 : 0;\n    }\n  };\n\n  // combine aggregate operators\n  var aggregateOperators = _.extend(\n      {},\n      arithmeticOperators,\n      comparisonOperators,\n      conditionalOperators,\n      dateOperators,\n      setOperators,\n      stringOperators\n  );\n\n  // mixin comparison operators\n  _.each([\"$eq\", \"$ne\", \"$gt\", \"$gte\", \"$lt\", \"$lte\"], function (op) {\n    aggregateOperators[op] = function (obj, expr) {\n      var args = computeValue(obj, expr);\n      return simpleOperators[op](args[0], args[1]);\n    };\n  });\n\n  var Ops = {\n    simpleOperators: _.keys(simpleOperators),\n    compoundOperators: _.keys(compoundOperators),\n    aggregateOperators: _.keys(aggregateOperators),\n    groupOperators: _.keys(groupOperators),\n    pipelineOperators: _.keys(pipelineOperators),\n    projectionOperators: _.keys(projectionOperators)\n  };\n  Ops.queryOperators = _.union(Ops.simpleOperators, Ops.compoundOperators);\n\n  /**\n   * Returns the result of evaluating a $group operation over a collection\n   *\n   * @param collection\n   * @param field the name of the aggregate operator or field\n   * @param expr the expression of the aggregate operator for the field\n   * @returns {*}\n   */\n  function accumulate(collection, field, expr) {\n    if (_.contains(Ops.groupOperators, field)) {\n      return groupOperators[field](collection, expr);\n    }\n\n    if (_.isObject(expr)) {\n      var result = {};\n      for (var key in expr) {\n        if (expr.hasOwnProperty(key)) {\n          result[key] = accumulate(collection, key, expr[key]);\n          // must run ONLY one group operator per expression\n          // if so, return result of the computed value\n          if (_.contains(Ops.groupOperators, key)) {\n            result = result[key];\n            // if there are more keys in expression this is bad\n            if (_.keys(expr).length > 1) {\n              throw new Error(\"Invalid $group expression '\" + JSON.stringify(expr) + \"'\");\n            }\n            break;\n          }\n        }\n      }\n      return result;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Computes the actual value of the expression using the given object as context\n   *\n   * @param obj the current object from the collection\n   * @param expr the expression for the given field\n   * @param field the field name (may also be an aggregate operator)\n   * @returns {*}\n   */\n  function computeValue(obj, expr, field) {\n\n    // if the field of the object is a valid operator\n    if (_.contains(Ops.aggregateOperators, field)) {\n      return aggregateOperators[field](obj, expr);\n    }\n\n    // if expr is a variable for an object field\n    // field not used in this case\n    if (_.isString(expr) && expr.length > 0 && expr[0] === \"$\") {\n      return resolve(obj, expr.slice(1));\n    }\n\n    var result;\n\n    if (_.isArray(expr)) {\n      result = [];\n      for (var i = 0; i < expr.length; i++) {\n        result.push(computeValue(obj, expr[i], null));\n      }\n    } else if (_.isObject(expr)) {\n      result = {};\n      for (var key in expr) {\n        if (expr.hasOwnProperty(key)) {\n          result[key] = computeValue(obj, expr[key], key);\n\n          // must run ONLY one aggregate operator per expression\n          // if so, return result of the computed value\n          if (_.contains(Ops.aggregateOperators, key)) {\n            result = result[key];\n            // if there are more keys in expression this is bad\n            if (_.keys(expr).length > 1) {\n              throw new Error(\"Invalid aggregation expression '\" + JSON.stringify(expr) + \"'\");\n            }\n            break;\n          }\n        }\n      }\n    } else {\n      // check and return value if already in a resolved state\n      for (var i = 0; i < primitives.length; i++) {\n        if (primitives[i](expr)) {\n          return expr;\n        }\n      }\n    }\n\n    return result;\n  }\n\n}(this));\n",
    "\n/**\n * Module dependencies.\n */\n\nvar ops = require('./ops');\nvar eql = require('mongo-eql');\nvar dot = require('dot-component');\nvar type = require('component-type');\nvar object = require('object-component');\nvar debug = require('debug')('mongo-query');\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = filter;\nexports.ops = ops;\n\n/**\n * Filters an `obj` by the given `query` for subdocuments.\n *\n * @return {Object|Boolean} false if no match, or matched subdocs\n * @api public\n */\n\nfunction filter(obj, query){\n  obj = obj || {};\n  var ret = {};\n\n  for (var key in query) {\n    if (!query.hasOwnProperty(key)) continue;\n\n    // search value\n    var val = query[key];\n\n    // split the key into prefix and suffix\n    var keys = key.split('.');\n    var target = obj;\n    var prefix, search;\n    var matches = [];\n\n    walk_keys:\n    for (var i = 0; i < keys.length; i++) {\n      target = target[keys[i]];\n\n      switch (type(target)) {\n        case 'array':\n          // if it's an array subdocument search we stop here\n          prefix = keys.slice(0, i + 1).join('.');\n          search = keys.slice(i + 1).join('.');\n\n          debug('searching array \"%s\"', prefix);\n\n          // we special case operators that don't walk the array\n          if (val.$size && !search.length) {\n            return compare(val, target);\n          }\n\n          // walk subdocs\n          var subset = ret[prefix] || target;\n\n          for (var ii = 0; ii < subset.length; ii++) {\n            if (search.length) {\n              var q = {};\n              q[search] = val;\n              if ('object' == type(subset[ii])) {\n                debug('attempting subdoc search with query %j', q);\n                if (filter(subset[ii], q)) {\n                  // we ignore the ret value of filter\n                  if (!ret[prefix] || !~ret[prefix].indexOf(subset[ii])) {\n                    matches.push(subset[ii]);\n                  }\n                }\n              }\n            } else {\n              debug('performing simple array item search');\n              if (compare(val, subset[ii])) {\n                if (!ret[prefix] || !~ret[prefix].indexOf(subset[ii])) {\n                  matches.push(subset[ii]);\n                }\n              }\n            }\n          }\n\n          if (matches.length) {\n            ret[prefix] = ret[prefix] || [];\n            ret[prefix].push.apply(ret[prefix], matches);\n          }\n\n          // we don't continue the key search\n          break walk_keys;\n\n        case 'undefined':\n          // if we can't find the key\n          return false;\n\n        case 'object':\n          if (null != keys[i + 1]) {\n            continue;\n          } else if (!compare(val, target)) {\n            return false;\n          }\n          break;\n\n        default:\n          if (!compare(val, target)) return false;\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Compares the given matcher with the document value.\n *\n * @param {Mixed} matcher\n * @param {Mixed} value\n * @api private\n */\n\nfunction compare(matcher, val){\n  if ('object' != type(matcher)) {\n    return eql(matcher, val);\n  }\n\n  var keys = object.keys(matcher);\n  if ('$' == keys[0][0]) {\n    for (var i = 0; i < keys.length; i++) {\n      // special case for sub-object matching\n      if ('$elemMatch' == keys[i]) {\n        return false !== filter(val, matcher.$elemMatch);\n      } else {\n        if (!ops[keys[i]](matcher[keys[i]], val)) return false;\n      }\n    }\n    return true;\n  } else {\n    return eql(matcher, val);\n  }\n}\n",
    "\n/**\n * Module dependencies.\n */\n\nvar mods = require('./mods');\nvar filter = require('./filter');\nvar dot = require('dot-component');\nvar type = require('component-type');\nvar object = require('object-component');\nvar debug = require('debug')('mongo-query');\n\n/**\n * Module exports.\n */\n\nmodule.exports = exports = query;\n\n/**\n * Export filter helper.\n */\n\nexports.filter = filter;\n\n/**\n * Export modifiers.\n */\n\nexports.mods = mods;\n\n/**\n * Execute a query.\n *\n * Options:\n *  - `strict` only modify if query matches\n *\n * @param {Object} object to alter\n * @param {Object} query to filter modifications by\n * @param {Object} update object\n * @param {Object} options\n */\n\nfunction query(obj, query, update, opts){\n  obj = obj || {};\n  opts = opts || {};\n  query = query || {};\n  update = update || {};\n\n  // strict mode\n  var strict = !!opts.strict;\n\n  var match;\n  var log = [];\n\n  if (object.length(query)) {\n    match = filter(obj, query);\n  }\n\n  if (!strict || false !== match) {\n    var keys = object.keys(update);\n    var transactions = [];\n\n    for (var i = 0, l = keys.length; i < l; i++) {\n      if (mods[keys[i]]) {\n        debug('found modifier \"%s\"', keys[i]);\n        for (var key in update[keys[i]]) {\n          var pos = key.indexOf('.$.');\n\n          if (~pos) {\n            var prefix = key.substr(0, pos);\n            var suffix = key.substr(pos + 3);\n\n            if (match[prefix]) {\n              debug('executing \"%s\" %s on first match within \"%s\"', key, keys[i], prefix);\n              var fn = mods[keys[i]](match[prefix][0], suffix, update[keys[i]][key]);\n              if (fn) {\n                // produce a key name replacing $ with the actual index\n                // TODO: this is unnecessarily expensive\n                var index = dot.get(obj, prefix).indexOf(match[prefix][0]);\n                fn.key = prefix + '.' + index + '.' + suffix;\n                fn.op = keys[i];\n                transactions.push(fn);\n              }\n            } else {\n              debug('ignoring \"%s\" %s - no matches within \"%s\"', key, keys[i], prefix);\n            }\n          } else {\n            var fn = mods[keys[i]](obj, key, update[keys[i]][key]);\n            if (fn) {\n              fn.key = key;\n              fn.op = keys[i];\n              transactions.push(fn);\n            }\n          }\n        }\n      } else {\n        debug('skipping unknown modifier \"%s\"', keys[i]);\n      }\n    }\n\n    if (transactions.length) {\n      // if we got here error free we process all transactions\n      for (var i = 0; i < transactions.length; i++) {\n        var fn = transactions[i];\n        var val = fn();\n        log.push({ op: fn.op, key: fn.key, value: val });\n      }\n    }\n  } else {\n    debug('no matches for query %j', query);\n  }\n\n  return log;\n}\n",
    "\n/**\n * Module dependencies.\n */\n\nvar eql = require('mongo-eql');\nvar dot = require('dot-component');\nvar type = require('component-type');\nvar keys = require('object-component').keys;\nvar debug = require('debug')('mongo-query');\n\n/**\n * Performs a `$set`.\n *\n * @param {Object} object to modify\n * @param {String} path to alter\n * @param {String} value to set\n * @return {Function} transaction (unless noop)\n */\n\nexports.$set = function $set(obj, path, val){\n  var key = path.split('.').pop();\n  obj = dot.parent(obj, path, true);\n\n  switch (type(obj)) {\n    case 'object':\n      if (!eql(obj[key], val)) {\n        return function(){\n          obj[key] = val;\n          return val;\n        };\n      }\n      break;\n\n    case 'array':\n      if (numeric(key)) {\n        if (!eql(obj[key], val)) {\n          return function(){\n            obj[key] = val;\n            return val;\n          };\n        }\n      } else {\n        throw new Error('can\\'t append to array using string field name [' + key + ']');\n      }\n      break;\n\n    default:\n      throw new Error('$set only supports object not ' + type(obj));\n  }\n};\n\n/**\n * Performs an `$unset`.\n *\n * @param {Object} object to modify\n * @param {String} path to alter\n * @param {String} value to set\n * @return {Function} transaction (unless noop)\n */\n\nexports.$unset = function $unset(obj, path){\n  var key = path.split('.').pop();\n  obj = dot.parent(obj, path);\n\n  switch (type(obj)) {\n    case 'array':\n    case 'object':\n      if (obj.hasOwnProperty(key)) {\n        return function(){\n          // reminder: `delete arr[1]` === `delete arr['1']` [!]\n          delete obj[key];\n        };\n      } else {\n        // we fail silently\n        debug('ignoring unset of inexisting key');\n      }\n  }\n};\n\n/**\n * Performs a `$rename`.\n *\n * @param {Object} object to modify\n * @param {String} path to alter\n * @param {String} value to set\n * @return {Function} transaction (unless noop)\n */\n\nexports.$rename = function $rename(obj, path, newKey){\n  // target = source\n  if (path == newKey) {\n    throw new Error('$rename source must differ from target');\n  }\n\n  // target is parent of source\n  if (0 === path.indexOf(newKey + '.')) {\n    throw new Error('$rename target may not be a parent of source');\n  }\n\n  var p = dot.parent(obj, path);\n  var t = type(p);\n\n  if ('object' == t) {\n    var key = path.split('.').pop();\n\n    if (p.hasOwnProperty(key)) {\n      return function(){\n        var val = p[key];\n        delete p[key];\n\n        // target does initialize the path\n        var newp = dot.parent(obj, newKey, true);\n\n        // and also fails silently upon type mismatch\n        if ('object' == type(newp)) {\n          newp[newKey.split('.').pop()] = val;\n        } else {\n          debug('invalid $rename target path type');\n        }\n\n        // returns the name of the new key\n        return newKey;\n      };\n    } else {\n      debug('ignoring rename from inexisting source');\n    }\n  } else if ('undefined' != t) {\n    throw new Error('$rename source field invalid');\n  }\n};\n\n/**\n * Performs an `$inc`.\n *\n * @param {Object} object to modify\n * @param {String} path to alter\n * @param {String} value to set\n * @return {Function} transaction (unless noop)\n */\n\nexports.$inc = function $inc(obj, path, inc){\n  if ('number' != type(inc)) {\n    throw new Error('Modifier $inc allowed for numbers only');\n  }\n\n  obj = dot.parent(obj, path, true);\n  var key = path.split('.').pop();\n\n  switch (type(obj)) {\n    case 'array':\n    case 'object':\n      if (obj.hasOwnProperty(key)) {\n        if ('number' != type(obj[key])) {\n          throw new Error('Cannot apply $inc modifier to non-number');\n        }\n\n        return function(){\n          obj[key] += inc;\n          return inc;\n        };\n      } else if('object' == type(obj) || numeric(key)){\n        return function(){\n          obj[key] = inc;\n          return inc;\n        };\n      } else {\n        throw new Error('can\\'t append to array using string field name [' + key + ']');\n      }\n      break;\n\n    default:\n      throw new Error('Cannot apply $inc modifier to non-number');\n  }\n};\n\n/**\n * Performs an `$pop`.\n *\n * @param {Object} object to modify\n * @param {String} path to alter\n * @param {String} value to set\n * @return {Function} transaction (unless noop)\n */\n\nexports.$pop = function $pop(obj, path, val){\n  obj = dot.parent(obj, path);\n  var key = path.split('.').pop();\n\n  // we make sure the array is not just the parent of the main key\n  switch (type(obj)) {\n    case 'array':\n    case 'object':\n      if (obj.hasOwnProperty(key)) {\n        switch (type(obj[key])) {\n          case 'array':\n            if (obj[key].length) {\n              return function(){\n                if (-1 == val) {\n                  return obj[key].shift();\n                } else {\n                  // mongodb allows any value to pop\n                  return obj[key].pop();\n                }\n              };\n            }\n            break;\n\n          case 'undefined':\n            debug('ignoring pop to inexisting key');\n            break;\n\n          default:\n            throw new Error('Cannot apply $pop modifier to non-array');\n        }\n      } else {\n        debug('ignoring pop to inexisting key');\n      }\n      break;\n\n    case 'undefined':\n      debug('ignoring pop to inexisting key');\n      break;\n  }\n};\n\n/**\n * Performs a `$push`.\n *\n * @param {Object} object to modify\n * @param {String} path to alter\n * @param {Object} value to push\n * @return {Function} transaction (unless noop)\n */\n\nexports.$push = function $push(obj, path, val){\n  obj = dot.parent(obj, path, true);\n  var key = path.split('.').pop();\n\n  switch (type(obj)) {\n    case 'object':\n      if (obj.hasOwnProperty(key)) {\n        if ('array' == type(obj[key])) {\n          return function(){\n            obj[key].push(val);\n            return val;\n          };\n        } else {\n          throw new Error('Cannot apply $push/$pushAll modifier to non-array');\n        }\n      } else {\n        return function(){\n          obj[key] = [val];\n          return val;\n        };\n      }\n      break;\n\n    case 'array':\n      if (obj.hasOwnProperty(key)) {\n        if ('array' == type(obj[key])) {\n          return function(){\n            obj[key].push(val);\n            return val;\n          };\n        } else {\n          throw new Error('Cannot apply $push/$pushAll modifier to non-array');\n        }\n      } else if (numeric(key)) {\n        return function(){\n          obj[key] = [val];\n          return val;\n        };\n      } else {\n        throw new Error('can\\'t append to array using string field name [' + key + ']');\n      }\n      break;\n  }\n};\n\n/**\n * Performs a `$pushAll`.\n *\n * @param {Object} object to modify\n * @param {String} path to alter\n * @param {Array} values to push\n * @return {Function} transaction (unless noop)\n */\n\nexports.$pushAll = function $pushAll(obj, path, val){\n  if ('array' != type(val)) {\n    throw new Error('Modifier $pushAll/pullAll allowed for arrays only');\n  }\n\n  obj = dot.parent(obj, path, true);\n  var key = path.split('.').pop();\n\n  switch (type(obj)) {\n    case 'object':\n      if (obj.hasOwnProperty(key)) {\n        if ('array' == type(obj[key])) {\n          return function(){\n            obj[key].push.apply(obj[key], val);\n            return val;\n          };\n        } else {\n          throw new Error('Cannot apply $push/$pushAll modifier to non-array');\n        }\n      } else {\n        return function(){\n          obj[key] = val;\n          return val;\n        };\n      }\n      break;\n\n    case 'array':\n      if (obj.hasOwnProperty(key)) {\n        if ('array' == type(obj[key])) {\n          return function(){\n            obj[key].push.apply(obj[key], val);\n            return val;\n          };\n        } else {\n          throw new Error('Cannot apply $push/$pushAll modifier to non-array');\n        }\n      } else if (numeric(key)) {\n        return function(){\n          obj[key] = val;\n          return val;\n        };\n      } else {\n        throw new Error('can\\'t append to array using string field name [' + key + ']');\n      }\n      break;\n  }\n};\n\n/**\n * Performs a `$pull`.\n */\n\nexports.$pull = function $pull(obj, path, val){\n  obj = dot.parent(obj, path, true);\n  var key = path.split('.').pop();\n  var t = type(obj);\n\n  switch (t) {\n    case 'object':\n      if (obj.hasOwnProperty(key)) {\n        if ('array' == type(obj[key])) {\n          var pulled = [];\n          var splice = pull(obj[key], [val], pulled);\n          if (pulled.length) {\n            return function(){\n              splice();\n              return pulled;\n            };\n          }\n        } else {\n          throw new Error('Cannot apply $pull/$pullAll modifier to non-array');\n        }\n      }\n      break;\n\n    case 'array':\n      if (obj.hasOwnProperty(key)) {\n        if ('array' == type(obj[key])) {\n          var pulled = [];\n          var splice = pull(obj[key], [val], pulled);\n          if (pulled.length) {\n            return function(){\n              splice();\n              return pulled;\n            };\n          }\n        } else {\n          throw new Error('Cannot apply $pull/$pullAll modifier to non-array');\n        }\n      } else {\n        debug('ignoring pull to non array');\n      }\n      break;\n\n    default:\n      if ('undefined' != t) {\n        throw new Error('LEFT_SUBFIELD only supports Object: hello not: ' + t);\n      }\n  }\n};\n\n/**\n * Performs a `$pullAll`.\n */\n\nexports.$pullAll = function $pullAll(obj, path, val){\n  if ('array' != type(val)) {\n    throw new Error('Modifier $pushAll/pullAll allowed for arrays only');\n  }\n\n  obj = dot.parent(obj, path, true);\n  var key = path.split('.').pop();\n  var t = type(obj);\n\n  switch (t) {\n    case 'object':\n      if (obj.hasOwnProperty(key)) {\n        if ('array' == type(obj[key])) {\n          var pulled = [];\n          var splice = pull(obj[key], val, pulled);\n          if (pulled.length) {\n            return function(){\n              splice();\n              return pulled;\n            };\n          }\n        } else {\n          throw new Error('Cannot apply $pull/$pullAll modifier to non-array');\n        }\n      }\n      break;\n\n    case 'array':\n      if (obj.hasOwnProperty(key)) {\n        if ('array' == type(obj[key])) {\n          var pulled = [];\n          var splice = pull(obj[key], val, pulled);\n          if (pulled.length) {\n            return function(){\n              splice();\n              return pulled;\n            };\n          }\n        } else {\n          throw new Error('Cannot apply $pull/$pullAll modifier to non-array');\n        }\n      } else {\n        debug('ignoring pull to non array');\n      }\n      break;\n\n    default:\n      if ('undefined' != t) {\n        throw new Error('LEFT_SUBFIELD only supports Object: hello not: ' + t);\n      }\n  }\n};\n\n/**\n * Performs a `$addToSet`.\n *\n * @param {Object} object to modify\n * @param {String} path to alter\n * @param {Object} value to push\n * @param {Boolean} internal, true if recursing\n * @return {Function} transaction (unless noop)\n */\n\nexports.$addToSet = function $addToSet(obj, path, val, recursing){\n  if (!recursing && 'array' == type(val.$each)) {\n    var fns = [];\n    for (var i = 0, l = val.$each.length; i < l; i++) {\n      var fn = $addToSet(obj, path, val.$each[i], true);\n      if (fn) fns.push(fn);\n    }\n    if (fns.length) {\n      return function(){\n        var values = [];\n        for (var i = 0; i < fns.length; i++) values.push(fns[i]());\n        return values;\n      };\n    } else {\n      return;\n    }\n  }\n\n  obj = dot.parent(obj, path, true);\n  var key = path.split('.').pop();\n\n  switch (type(obj)) {\n    case 'object':\n      if (obj.hasOwnProperty(key)) {\n        if ('array' == type(obj[key])) {\n          if (!has(obj[key], val)) {\n            return function(){\n              obj[key].push(val);\n              return val;\n            };\n          }\n        } else {\n          throw new Error('Cannot apply $addToSet modifier to non-array');\n        }\n      } else {\n        return function(){\n          obj[key] = [val];\n          return val;\n        };\n      }\n      break;\n\n    case 'array':\n      if (obj.hasOwnProperty(key)) {\n        if ('array' == type(obj[key])) {\n          if (!has(obj[key], val)) {\n            return function(){\n              obj[key].push(val);\n              return val;\n            };\n          }\n        } else {\n          throw new Error('Cannot apply $addToSet modifier to non-array');\n        }\n      } else if (numeric(key)) {\n        return function(){\n          obj[key] = [val];\n          return val;\n        };\n      } else {\n        throw new Error('can\\'t append to array using string field name [' + key + ']');\n      }\n      break;\n  }\n};\n\n/**\n * Helper for determining if an array has the given value.\n *\n * @param {Array} array\n * @param {Object} value to check\n * @return {Boolean}\n */\n\nfunction has(array, val){\n  for (var i = 0, l = array.length; i < l; i++) {\n    if (eql(val, array[i])) return true;\n  }\n  return false;\n}\n\n/**\n * Array#filter function generator for `$pull`/`$pullAll` operations.\n *\n * @param {Array} array of values to match\n * @param {Array} array to populate with results\n * @return {Function} that splices the array\n */\n\nfunction pull(arr, vals, pulled){\n  var indexes = [];\n\n  for (var a = 0; a < arr.length; a++) {\n    var val = arr[a];\n\n    for (var i = 0; i < vals.length; i++) {\n      var matcher = vals[i];\n      if ('object' == type(matcher)) {\n        // we only are only interested in obj <-> obj comparisons\n        if ('object' == type(val)) {\n          var match = false;\n\n          if (keys(matcher).length) {\n            for (var i in matcher) {\n              if (matcher.hasOwnProperty(i)) {\n                // we need at least one matching key to pull\n                if (eql(matcher[i], val[i])) {\n                  match = true;\n                } else {\n                  // if a single key doesn't match we move on\n                  match = false;\n                  break;\n                }\n              }\n            }\n          } else if (!keys(val).length) {\n            // pull `{}` matches [{}]\n            match = true;\n          }\n\n          if (match) {\n            indexes.push(a);\n            pulled.push(val);\n            continue;\n          }\n        } else {\n          debug('ignoring pull match against object');\n        }\n      } else {\n        if (eql(matcher, val)) {\n          indexes.push(a);\n          pulled.push(val);\n          continue;\n        }\n      }\n    }\n  }\n\n  return function(){\n    for (var i = 0; i < indexes.length; i++) {\n      var index = indexes[i];\n      arr.splice(index - i, 1);\n    }\n  };\n}\n\n/**\n * Helper to determine if a value is numeric.\n *\n * @param {String|Number} value\n * @return {Boolean} true if numeric\n * @api private\n */\n\nfunction numeric(val){\n  return 'number' == type(val) || Number(val) == val;\n}\n",
    "/**\n * toString ref.\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Return the type of `val`.\n *\n * @param {Mixed} val\n * @return {String}\n * @api public\n */\n\nmodule.exports = function(val){\n  switch (toString.call(val)) {\n    case '[object Date]': return 'date';\n    case '[object RegExp]': return 'regexp';\n    case '[object Arguments]': return 'arguments';\n    case '[object Array]': return 'array';\n    case '[object Error]': return 'error';\n  }\n\n  if (val === null) return 'null';\n  if (val === undefined) return 'undefined';\n  if (val !== val) return 'nan';\n  if (val && val.nodeType === 1) return 'element';\n\n  val = val.valueOf\n    ? val.valueOf()\n    : Object.prototype.valueOf.apply(val)\n\n  return typeof val;\n};\n",
    "\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  return ('WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  return JSON.stringify(v);\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return args;\n\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage(){\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n",
    "\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters = {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction debug(namespace) {\n\n  // define the `disabled` version\n  function disabled() {\n  }\n  disabled.enabled = false;\n\n  // define the `enabled` version\n  function enabled() {\n\n    var self = enabled;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // add the `color` if not set\n    if (null == self.useColors) self.useColors = exports.useColors();\n    if (null == self.color && self.useColors) self.color = selectColor();\n\n    var args = Array.prototype.slice.call(arguments);\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %o\n      args = ['%o'].concat(args);\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    if ('function' === typeof exports.formatArgs) {\n      args = exports.formatArgs.apply(self, args);\n    }\n    var logFn = enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  enabled.enabled = true;\n\n  var fn = exports.enabled(namespace) ? enabled : disabled;\n\n  fn.namespace = namespace;\n\n  return fn;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n",
    "/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if ('string' == typeof val) return parse(val);\n  return options.long\n    ? long(val)\n    : short(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = '' + str;\n  if (str.length > 10000) return;\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction short(ms) {\n  if (ms >= d) return Math.round(ms / d) + 'd';\n  if (ms >= h) return Math.round(ms / h) + 'h';\n  if (ms >= m) return Math.round(ms / m) + 'm';\n  if (ms >= s) return Math.round(ms / s) + 's';\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction long(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n",
    "\n/**\n * Module dependencies.\n */\n\nvar type = require('type-component');\n\n/**\n * Gets a certain `path` from the `obj`.\n *\n * @param {Object} target\n * @param {String} key\n * @return {Object} found object, or `undefined\n * @api public\n */\n\nexports.get = function(obj, path){\n  if (~path.indexOf('.')) {\n    var par = parent(obj, path);\n    var mainKey = path.split('.').pop();\n    var t = type(par);\n    if ('object' == t || 'array' == t) return par[mainKey];\n  } else {\n    return obj[path];\n  }\n};\n\n/**\n * Sets the given `path` to `val` in `obj`.\n *\n * @param {Object} target\n * @Param {String} key\n * @param {Object} value\n * @api public\n */\n\nexports.set = function(obj, path, val){\n  if (~path.indexOf('.')) {\n    var par = parent(obj, path, true);\n    var mainKey = path.split('.').pop();\n    if (par && 'object' == type(par)) par[mainKey] = val;\n  } else {\n    obj[path] = val;\n  }\n};\n\n/**\n * Gets the parent object for a given key (dot notation aware).\n *\n * - If a parent object doesn't exist, it's initialized.\n * - Array index lookup is supported\n *\n * @param {Object} target object\n * @param {String} key\n * @param {Boolean} true if it should initialize the path\n * @api public\n */\n\nexports.parent = parent;\n\nfunction parent(obj, key, init){\n  if (~key.indexOf('.')) {\n    var pieces = key.split('.');\n    var ret = obj;\n\n    for (var i = 0; i < pieces.length - 1; i++) {\n      // if the key is a number string and parent is an array\n      if (Number(pieces[i]) == pieces[i] && 'array' == type(ret)) {\n        ret = ret[pieces[i]];\n      } else if ('object' == type(ret)) {\n        if (init && !ret.hasOwnProperty(pieces[i])) {\n          ret[pieces[i]] = {};\n        }\n        if (ret) ret = ret[pieces[i]];\n      }\n    }\n\n    return ret;\n  } else {\n    return obj;\n  }\n}\n",
    "\n/**\n * toString ref.\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Return the type of `val`.\n *\n * @param {Mixed} val\n * @return {String}\n * @api public\n */\n\nmodule.exports = function(val){\n  switch (toString.call(val)) {\n    case '[object Function]': return 'function';\n    case '[object Date]': return 'date';\n    case '[object RegExp]': return 'regexp';\n    case '[object Arguments]': return 'arguments';\n    case '[object Array]': return 'array';\n  }\n\n  if (val === null) return 'null';\n  if (val === undefined) return 'undefined';\n  if (val === Object(val)) return 'object';\n\n  return typeof val;\n};\n",
    "\n/**\n * Module dependencies.\n */\n\nvar type = require('component-type');\n\n/**\n * Module exports.\n */\n\nmodule.exports = eql;\n\n/**\n * MongoDB style value comparisons.\n *\n * @param {Object} matcher\n * @param {Object} value\n * @return {Boolean} true if they match\n */\n\nfunction eql(matcher, val){\n  switch (type(matcher)) {\n    case 'null':\n    case 'undefined':\n      // we treat null as undefined\n      return null == val;\n\n    case 'regexp':\n      return matcher.test(val);\n\n    case 'array':\n      if ('array' == type(val) && matcher.length == val.length) {\n        for (var i = 0; i < matcher.length; i++) {\n          if (!eql(val[i], matcher[i])) return false;\n        }\n        return true;\n      } else {\n        return false;\n      }\n      break;\n\n    case 'object':\n      // object can match keys in any order\n      var keys = {};\n\n      // we match all values of `matcher` in `val`\n      for (var i in matcher) {\n        if (matcher.hasOwnProperty(i)) {\n          if (!val.hasOwnProperty(i) || !eql(matcher[i], val[i])) {\n            return false;\n          }\n        }\n        keys[i] = true;\n      }\n\n      // we make sure `val` doesn't have extra keys\n      for (var i in val) {\n        if (val.hasOwnProperty(i) && !keys.hasOwnProperty(i)) {\n          return false;\n        }\n      }\n\n      return true;\n\n    default:\n      return matcher === val;\n  }\n}\n",
    "\n/**\n * HOP ref.\n */\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Return own keys in `obj`.\n *\n * @param {Object} obj\n * @return {Array}\n * @api public\n */\n\nexports.keys = Object.keys || function(obj){\n  var keys = [];\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\n\n/**\n * Return own values in `obj`.\n *\n * @param {Object} obj\n * @return {Array}\n * @api public\n */\n\nexports.values = function(obj){\n  var vals = [];\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      vals.push(obj[key]);\n    }\n  }\n  return vals;\n};\n\n/**\n * Merge `b` into `a`.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object} a\n * @api public\n */\n\nexports.merge = function(a, b){\n  for (var key in b) {\n    if (has.call(b, key)) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n};\n\n/**\n * Return length of `obj`.\n *\n * @param {Object} obj\n * @return {Number}\n * @api public\n */\n\nexports.length = function(obj){\n  return exports.keys(obj).length;\n};\n\n/**\n * Check if `obj` is empty.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api public\n */\n\nexports.isEmpty = function(obj){\n  return 0 == exports.length(obj);\n};",
    "\n/**\n * Module dependencies.\n */\n\nvar eql = require('mongo-eql');\nvar type = require('component-type');\n\n/**\n * $ne: not equal.\n */\n\nexports.$ne = function $ne(matcher, val){\n  return !eql(matcher, val);\n};\n\n/**\n * $gt: greater than.\n */\n\nexports.$gt = function $gt(matcher, val){\n  return type(matcher) === 'number' && val > matcher;\n};\n\n/**\n * $gte: greater than equal.\n */\n\nexports.$gte = function $gte(matcher, val){\n  return type(matcher) === 'number' && val >= matcher;\n};\n\n/**\n * $lt: less than.\n */\n\nexports.$lt = function $lt(matcher, val){\n  return type(matcher) === 'number' && val < matcher;\n};\n\n/**\n * $lte: less than equal.\n */\n\nexports.$lte = function $lte(matcher, val){\n  return type(matcher) === 'number' && val <= matcher;\n};\n\n/**\n * $regex: supply a regular expression as a string.\n */\n\nexports.$regex = function $regex(matcher, val){\n  // TODO: add $options support\n  if ('regexp' != type('matcher')) matcher = new RegExp(matcher);\n  return matcher.test(val);\n};\n\n/**\n * $exists: key exists.\n */\n\nexports.$exists = function $exists(matcher, val){\n  if (matcher) {\n    return undefined !== val;\n  } else {\n    return undefined === val;\n  }\n};\n\n/**\n * $in: value in array.\n */\n\nexports.$in = function $in(matcher, val){\n  if ('array' != type(matcher)) return false;\n  for (var i = 0; i < matcher.length; i++) {\n    if (eql(matcher[i], val)) return true;\n  }\n  return false;\n};\n\n/**\n * $nin: value not in array.\n */\n\nexports.$nin = function $nin(matcher, val){\n  return !exports.$in(matcher, val);\n};\n\n/**\n * @size: array length\n */\n\nexports.$size = function(matcher, val){\n  return Array.isArray(val) && matcher == val.length;\n};\n",
    "var CryptoJS = require('./lib/core').CryptoJS;\nrequire('./lib/enc-base64');\nrequire('./lib/md5');\nrequire('./lib/evpkdf');\nrequire('./lib/cipher-core');\nrequire('./lib/aes');\nvar JsonFormatter = require('./lib/jsonformatter').JsonFormatter;\n\nexports.CryptoJS = CryptoJS;\nexports.JsonFormatter = JsonFormatter;",
    "var CryptoJS = require('./core').CryptoJS;\r\n\r\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\r\n    // Shortcuts\r\n    var C = CryptoJS;\r\n    var C_lib = C.lib;\r\n    var BlockCipher = C_lib.BlockCipher;\r\n    var C_algo = C.algo;\r\n\r\n    // Lookup tables\r\n    var SBOX = [];\r\n    var INV_SBOX = [];\r\n    var SUB_MIX_0 = [];\r\n    var SUB_MIX_1 = [];\r\n    var SUB_MIX_2 = [];\r\n    var SUB_MIX_3 = [];\r\n    var INV_SUB_MIX_0 = [];\r\n    var INV_SUB_MIX_1 = [];\r\n    var INV_SUB_MIX_2 = [];\r\n    var INV_SUB_MIX_3 = [];\r\n\r\n    // Compute lookup tables\r\n    (function () {\r\n        // Compute double table\r\n        var d = [];\r\n        for (var i = 0; i < 256; i++) {\r\n            if (i < 128) {\r\n                d[i] = i << 1;\r\n            } else {\r\n                d[i] = (i << 1) ^ 0x11b;\r\n            }\r\n        }\r\n\r\n        // Walk GF(2^8)\r\n        var x = 0;\r\n        var xi = 0;\r\n        for (var i = 0; i < 256; i++) {\r\n            // Compute sbox\r\n            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\r\n            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\r\n            SBOX[x] = sx;\r\n            INV_SBOX[sx] = x;\r\n\r\n            // Compute multiplication\r\n            var x2 = d[x];\r\n            var x4 = d[x2];\r\n            var x8 = d[x4];\r\n\r\n            // Compute sub bytes, mix columns tables\r\n            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\r\n            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\r\n            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\r\n            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\r\n            SUB_MIX_3[x] = t;\r\n\r\n            // Compute inv sub bytes, inv mix columns tables\r\n            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\r\n            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\r\n            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\r\n            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\r\n            INV_SUB_MIX_3[sx] = t;\r\n\r\n            // Compute next counter\r\n            if (!x) {\r\n                x = xi = 1;\r\n            } else {\r\n                x = x2 ^ d[d[d[x8 ^ x2]]];\r\n                xi ^= d[d[xi]];\r\n            }\r\n        }\r\n    }());\r\n\r\n    // Precomputed Rcon lookup\r\n    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\r\n\r\n    /**\r\n     * AES block cipher algorithm.\r\n     */\r\n    var AES = C_algo.AES = BlockCipher.extend({\r\n        _doReset: function () {\r\n            // Shortcuts\r\n            var key = this._key;\r\n            var keyWords = key.words;\r\n            var keySize = key.sigBytes / 4;\r\n\r\n            // Compute number of rounds\r\n            var nRounds = this._nRounds = keySize + 6\r\n\r\n            // Compute number of key schedule rows\r\n            var ksRows = (nRounds + 1) * 4;\r\n\r\n            // Compute key schedule\r\n            var keySchedule = this._keySchedule = [];\r\n            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\r\n                if (ksRow < keySize) {\r\n                    keySchedule[ksRow] = keyWords[ksRow];\r\n                } else {\r\n                    var t = keySchedule[ksRow - 1];\r\n\r\n                    if (!(ksRow % keySize)) {\r\n                        // Rot word\r\n                        t = (t << 8) | (t >>> 24);\r\n\r\n                        // Sub word\r\n                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\r\n\r\n                        // Mix Rcon\r\n                        t ^= RCON[(ksRow / keySize) | 0] << 24;\r\n                    } else if (keySize > 6 && ksRow % keySize == 4) {\r\n                        // Sub word\r\n                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\r\n                    }\r\n\r\n                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\r\n                }\r\n            }\r\n\r\n            // Compute inv key schedule\r\n            var invKeySchedule = this._invKeySchedule = [];\r\n            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\r\n                var ksRow = ksRows - invKsRow;\r\n\r\n                if (invKsRow % 4) {\r\n                    var t = keySchedule[ksRow];\r\n                } else {\r\n                    var t = keySchedule[ksRow - 4];\r\n                }\r\n\r\n                if (invKsRow < 4 || ksRow <= 4) {\r\n                    invKeySchedule[invKsRow] = t;\r\n                } else {\r\n                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\r\n                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\r\n                }\r\n            }\r\n        },\r\n\r\n        encryptBlock: function (M, offset) {\r\n            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\r\n        },\r\n\r\n        decryptBlock: function (M, offset) {\r\n            // Swap 2nd and 4th rows\r\n            var t = M[offset + 1];\r\n            M[offset + 1] = M[offset + 3];\r\n            M[offset + 3] = t;\r\n\r\n            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\r\n\r\n            // Inv swap 2nd and 4th rows\r\n            var t = M[offset + 1];\r\n            M[offset + 1] = M[offset + 3];\r\n            M[offset + 3] = t;\r\n        },\r\n\r\n        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\r\n            // Shortcut\r\n            var nRounds = this._nRounds;\r\n\r\n            // Get input, add round key\r\n            var s0 = M[offset]     ^ keySchedule[0];\r\n            var s1 = M[offset + 1] ^ keySchedule[1];\r\n            var s2 = M[offset + 2] ^ keySchedule[2];\r\n            var s3 = M[offset + 3] ^ keySchedule[3];\r\n\r\n            // Key schedule row counter\r\n            var ksRow = 4;\r\n\r\n            // Rounds\r\n            for (var round = 1; round < nRounds; round++) {\r\n                // Shift rows, sub bytes, mix columns, add round key\r\n                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\r\n                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\r\n                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\r\n                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\r\n\r\n                // Update state\r\n                s0 = t0;\r\n                s1 = t1;\r\n                s2 = t2;\r\n                s3 = t3;\r\n            }\r\n\r\n            // Shift rows, sub bytes, add round key\r\n            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\r\n            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\r\n            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\r\n            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\r\n\r\n            // Set output\r\n            M[offset]     = t0;\r\n            M[offset + 1] = t1;\r\n            M[offset + 2] = t2;\r\n            M[offset + 3] = t3;\r\n        },\r\n\r\n        keySize: 256/32\r\n    });\r\n\r\n    /**\r\n     * Shortcut functions to the cipher's object interface.\r\n     *\r\n     * @example\r\n     *\r\n     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\r\n     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\r\n     */\r\n    C.AES = BlockCipher._createHelper(AES);\r\n}());\r\n",
    "var CryptoJS = require('./core').CryptoJS;\r\n\r\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\r\n * Cipher core components.\r\n */\r\nCryptoJS.lib.Cipher || (function (undefined) {\r\n    // Shortcuts\r\n    var C = CryptoJS;\r\n    var C_lib = C.lib;\r\n    var Base = C_lib.Base;\r\n    var WordArray = C_lib.WordArray;\r\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\r\n    var C_enc = C.enc;\r\n    var Utf8 = C_enc.Utf8;\r\n    var Base64 = C_enc.Base64;\r\n    var C_algo = C.algo;\r\n    var EvpKDF = C_algo.EvpKDF;\r\n\r\n    /**\r\n     * Abstract base cipher template.\r\n     *\r\n     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\r\n     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\r\n     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\r\n     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\r\n     */\r\n    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\r\n        /**\r\n         * Configuration options.\r\n         *\r\n         * @property {WordArray} iv The IV to use for this operation.\r\n         */\r\n        cfg: Base.extend(),\r\n\r\n        /**\r\n         * Creates this cipher in encryption mode.\r\n         *\r\n         * @param {WordArray} key The key.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @return {Cipher} A cipher instance.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\r\n         */\r\n        createEncryptor: function (key, cfg) {\r\n            return this.create(this._ENC_XFORM_MODE, key, cfg);\r\n        },\r\n\r\n        /**\r\n         * Creates this cipher in decryption mode.\r\n         *\r\n         * @param {WordArray} key The key.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @return {Cipher} A cipher instance.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\r\n         */\r\n        createDecryptor: function (key, cfg) {\r\n            return this.create(this._DEC_XFORM_MODE, key, cfg);\r\n        },\r\n\r\n        /**\r\n         * Initializes a newly created cipher.\r\n         *\r\n         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\r\n         * @param {WordArray} key The key.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @example\r\n         *\r\n         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\r\n         */\r\n        init: function (xformMode, key, cfg) {\r\n            // Apply config defaults\r\n            this.cfg = this.cfg.extend(cfg);\r\n\r\n            // Store transform mode and key\r\n            this._xformMode = xformMode;\r\n            this._key = key;\r\n\r\n            // Set initial values\r\n            this.reset();\r\n        },\r\n\r\n        /**\r\n         * Resets this cipher to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     cipher.reset();\r\n         */\r\n        reset: function () {\r\n            // Reset data buffer\r\n            BufferedBlockAlgorithm.reset.call(this);\r\n\r\n            // Perform concrete-cipher logic\r\n            this._doReset();\r\n        },\r\n\r\n        /**\r\n         * Adds data to be encrypted or decrypted.\r\n         *\r\n         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\r\n         *\r\n         * @return {WordArray} The data after processing.\r\n         *\r\n         * @example\r\n         *\r\n         *     var encrypted = cipher.process('data');\r\n         *     var encrypted = cipher.process(wordArray);\r\n         */\r\n        process: function (dataUpdate) {\r\n            // Append\r\n            this._append(dataUpdate);\r\n\r\n            // Process available blocks\r\n            return this._process();\r\n        },\r\n\r\n        /**\r\n         * Finalizes the encryption or decryption process.\r\n         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n         *\r\n         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\r\n         *\r\n         * @return {WordArray} The data after final processing.\r\n         *\r\n         * @example\r\n         *\r\n         *     var encrypted = cipher.finalize();\r\n         *     var encrypted = cipher.finalize('data');\r\n         *     var encrypted = cipher.finalize(wordArray);\r\n         */\r\n        finalize: function (dataUpdate) {\r\n            // Final data update\r\n            if (dataUpdate) {\r\n                this._append(dataUpdate);\r\n            }\r\n\r\n            // Perform concrete-cipher logic\r\n            var finalProcessedData = this._doFinalize();\r\n\r\n            return finalProcessedData;\r\n        },\r\n\r\n        keySize: 128/32,\r\n\r\n        ivSize: 128/32,\r\n\r\n        _ENC_XFORM_MODE: 1,\r\n\r\n        _DEC_XFORM_MODE: 2,\r\n\r\n        /**\r\n         * Creates shortcut functions to a cipher's object interface.\r\n         *\r\n         * @param {Cipher} cipher The cipher to create a helper for.\r\n         *\r\n         * @return {Object} An object with encrypt and decrypt shortcut functions.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\r\n         */\r\n        _createHelper: (function () {\r\n            function selectCipherStrategy(key) {\r\n                if (typeof key == 'string') {\r\n                    return PasswordBasedCipher;\r\n                } else {\r\n                    return SerializableCipher;\r\n                }\r\n            }\r\n\r\n            return function (cipher) {\r\n                return {\r\n                    encrypt: function (message, key, cfg) {\r\n                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\r\n                    },\r\n\r\n                    decrypt: function (ciphertext, key, cfg) {\r\n                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\r\n                    }\r\n                };\r\n            };\r\n        }())\r\n    });\r\n\r\n    /**\r\n     * Abstract base stream cipher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\r\n     */\r\n    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\r\n        _doFinalize: function () {\r\n            // Process partial blocks\r\n            var finalProcessedBlocks = this._process(!!'flush');\r\n\r\n            return finalProcessedBlocks;\r\n        },\r\n\r\n        blockSize: 1\r\n    });\r\n\r\n    /**\r\n     * Mode namespace.\r\n     */\r\n    var C_mode = C.mode = {};\r\n\r\n    /**\r\n     * Abstract base block cipher mode template.\r\n     */\r\n    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\r\n        /**\r\n         * Creates this mode for encryption.\r\n         *\r\n         * @param {Cipher} cipher A block cipher instance.\r\n         * @param {Array} iv The IV words.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\r\n         */\r\n        createEncryptor: function (cipher, iv) {\r\n            return this.Encryptor.create(cipher, iv);\r\n        },\r\n\r\n        /**\r\n         * Creates this mode for decryption.\r\n         *\r\n         * @param {Cipher} cipher A block cipher instance.\r\n         * @param {Array} iv The IV words.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\r\n         */\r\n        createDecryptor: function (cipher, iv) {\r\n            return this.Decryptor.create(cipher, iv);\r\n        },\r\n\r\n        /**\r\n         * Initializes a newly created mode.\r\n         *\r\n         * @param {Cipher} cipher A block cipher instance.\r\n         * @param {Array} iv The IV words.\r\n         *\r\n         * @example\r\n         *\r\n         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\r\n         */\r\n        init: function (cipher, iv) {\r\n            this._cipher = cipher;\r\n            this._iv = iv;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Cipher Block Chaining mode.\r\n     */\r\n    var CBC = C_mode.CBC = (function () {\r\n        /**\r\n         * Abstract base CBC mode.\r\n         */\r\n        var CBC = BlockCipherMode.extend();\r\n\r\n        /**\r\n         * CBC encryptor.\r\n         */\r\n        CBC.Encryptor = CBC.extend({\r\n            /**\r\n             * Processes the data block at offset.\r\n             *\r\n             * @param {Array} words The data words to operate on.\r\n             * @param {number} offset The offset where the block starts.\r\n             *\r\n             * @example\r\n             *\r\n             *     mode.processBlock(data.words, offset);\r\n             */\r\n            processBlock: function (words, offset) {\r\n                // Shortcuts\r\n                var cipher = this._cipher;\r\n                var blockSize = cipher.blockSize;\r\n\r\n                // XOR and encrypt\r\n                xorBlock.call(this, words, offset, blockSize);\r\n                cipher.encryptBlock(words, offset);\r\n\r\n                // Remember this block to use with next block\r\n                this._prevBlock = words.slice(offset, offset + blockSize);\r\n            }\r\n        });\r\n\r\n        /**\r\n         * CBC decryptor.\r\n         */\r\n        CBC.Decryptor = CBC.extend({\r\n            /**\r\n             * Processes the data block at offset.\r\n             *\r\n             * @param {Array} words The data words to operate on.\r\n             * @param {number} offset The offset where the block starts.\r\n             *\r\n             * @example\r\n             *\r\n             *     mode.processBlock(data.words, offset);\r\n             */\r\n            processBlock: function (words, offset) {\r\n                // Shortcuts\r\n                var cipher = this._cipher;\r\n                var blockSize = cipher.blockSize;\r\n\r\n                // Remember this block to use with next block\r\n                var thisBlock = words.slice(offset, offset + blockSize);\r\n\r\n                // Decrypt and XOR\r\n                cipher.decryptBlock(words, offset);\r\n                xorBlock.call(this, words, offset, blockSize);\r\n\r\n                // This block becomes the previous block\r\n                this._prevBlock = thisBlock;\r\n            }\r\n        });\r\n\r\n        function xorBlock(words, offset, blockSize) {\r\n            // Shortcut\r\n            var iv = this._iv;\r\n\r\n            // Choose mixing block\r\n            if (iv) {\r\n                var block = iv;\r\n\r\n                // Remove IV for subsequent blocks\r\n                this._iv = undefined;\r\n            } else {\r\n                var block = this._prevBlock;\r\n            }\r\n\r\n            // XOR blocks\r\n            for (var i = 0; i < blockSize; i++) {\r\n                words[offset + i] ^= block[i];\r\n            }\r\n        }\r\n\r\n        return CBC;\r\n    }());\r\n\r\n    /**\r\n     * Padding namespace.\r\n     */\r\n    var C_pad = C.pad = {};\r\n\r\n    /**\r\n     * PKCS #5/7 padding strategy.\r\n     */\r\n    var Pkcs7 = C_pad.Pkcs7 = {\r\n        /**\r\n         * Pads data using the algorithm defined in PKCS #5/7.\r\n         *\r\n         * @param {WordArray} data The data to pad.\r\n         * @param {number} blockSize The multiple that the data should be padded to.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\r\n         */\r\n        pad: function (data, blockSize) {\r\n            // Shortcut\r\n            var blockSizeBytes = blockSize * 4;\r\n\r\n            // Count padding bytes\r\n            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\r\n\r\n            // Create padding word\r\n            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\r\n\r\n            // Create padding\r\n            var paddingWords = [];\r\n            for (var i = 0; i < nPaddingBytes; i += 4) {\r\n                paddingWords.push(paddingWord);\r\n            }\r\n            var padding = WordArray.create(paddingWords, nPaddingBytes);\r\n\r\n            // Add padding\r\n            data.concat(padding);\r\n        },\r\n\r\n        /**\r\n         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\r\n         *\r\n         * @param {WordArray} data The data to unpad.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\r\n         */\r\n        unpad: function (data) {\r\n            // Get number of padding bytes from last byte\r\n            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\r\n\r\n            // Remove padding\r\n            data.sigBytes -= nPaddingBytes;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Abstract base block cipher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\r\n     */\r\n    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\r\n        /**\r\n         * Configuration options.\r\n         *\r\n         * @property {Mode} mode The block mode to use. Default: CBC\r\n         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\r\n         */\r\n        cfg: Cipher.cfg.extend({\r\n            mode: CBC,\r\n            padding: Pkcs7\r\n        }),\r\n\r\n        reset: function () {\r\n            // Reset cipher\r\n            Cipher.reset.call(this);\r\n\r\n            // Shortcuts\r\n            var cfg = this.cfg;\r\n            var iv = cfg.iv;\r\n            var mode = cfg.mode;\r\n\r\n            // Reset block mode\r\n            if (this._xformMode == this._ENC_XFORM_MODE) {\r\n                var modeCreator = mode.createEncryptor;\r\n            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\r\n                var modeCreator = mode.createDecryptor;\r\n\r\n                // Keep at least one block in the buffer for unpadding\r\n                this._minBufferSize = 1;\r\n            }\r\n            this._mode = modeCreator.call(mode, this, iv && iv.words);\r\n        },\r\n\r\n        _doProcessBlock: function (words, offset) {\r\n            this._mode.processBlock(words, offset);\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcut\r\n            var padding = this.cfg.padding;\r\n\r\n            // Finalize\r\n            if (this._xformMode == this._ENC_XFORM_MODE) {\r\n                // Pad data\r\n                padding.pad(this._data, this.blockSize);\r\n\r\n                // Process final blocks\r\n                var finalProcessedBlocks = this._process(!!'flush');\r\n            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\r\n                // Process final blocks\r\n                var finalProcessedBlocks = this._process(!!'flush');\r\n\r\n                // Unpad data\r\n                padding.unpad(finalProcessedBlocks);\r\n            }\r\n\r\n            return finalProcessedBlocks;\r\n        },\r\n\r\n        blockSize: 128/32\r\n    });\r\n\r\n    /**\r\n     * A collection of cipher parameters.\r\n     *\r\n     * @property {WordArray} ciphertext The raw ciphertext.\r\n     * @property {WordArray} key The key to this ciphertext.\r\n     * @property {WordArray} iv The IV used in the ciphering operation.\r\n     * @property {WordArray} salt The salt used with a key derivation function.\r\n     * @property {Cipher} algorithm The cipher algorithm.\r\n     * @property {Mode} mode The block mode used in the ciphering operation.\r\n     * @property {Padding} padding The padding scheme used in the ciphering operation.\r\n     * @property {number} blockSize The block size of the cipher.\r\n     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\r\n     */\r\n    var CipherParams = C_lib.CipherParams = Base.extend({\r\n        /**\r\n         * Initializes a newly created cipher params object.\r\n         *\r\n         * @param {Object} cipherParams An object with any of the possible cipher parameters.\r\n         *\r\n         * @example\r\n         *\r\n         *     var cipherParams = CryptoJS.lib.CipherParams.create({\r\n         *         ciphertext: ciphertextWordArray,\r\n         *         key: keyWordArray,\r\n         *         iv: ivWordArray,\r\n         *         salt: saltWordArray,\r\n         *         algorithm: CryptoJS.algo.AES,\r\n         *         mode: CryptoJS.mode.CBC,\r\n         *         padding: CryptoJS.pad.PKCS7,\r\n         *         blockSize: 4,\r\n         *         formatter: CryptoJS.format.OpenSSL\r\n         *     });\r\n         */\r\n        init: function (cipherParams) {\r\n            this.mixIn(cipherParams);\r\n        },\r\n\r\n        /**\r\n         * Converts this cipher params object to a string.\r\n         *\r\n         * @param {Format} formatter (Optional) The formatting strategy to use.\r\n         *\r\n         * @return {string} The stringified cipher params.\r\n         *\r\n         * @throws Error If neither the formatter nor the default formatter is set.\r\n         *\r\n         * @example\r\n         *\r\n         *     var string = cipherParams + '';\r\n         *     var string = cipherParams.toString();\r\n         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\r\n         */\r\n        toString: function (formatter) {\r\n            return (formatter || this.formatter).stringify(this);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Format namespace.\r\n     */\r\n    var C_format = C.format = {};\r\n\r\n    /**\r\n     * OpenSSL formatting strategy.\r\n     */\r\n    var OpenSSLFormatter = C_format.OpenSSL = {\r\n        /**\r\n         * Converts a cipher params object to an OpenSSL-compatible string.\r\n         *\r\n         * @param {CipherParams} cipherParams The cipher params object.\r\n         *\r\n         * @return {string} The OpenSSL-compatible string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\r\n         */\r\n        stringify: function (cipherParams) {\r\n            // Shortcuts\r\n            var ciphertext = cipherParams.ciphertext;\r\n            var salt = cipherParams.salt;\r\n\r\n            // Format\r\n            if (salt) {\r\n                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\r\n            } else {\r\n                var wordArray = ciphertext;\r\n            }\r\n\r\n            return wordArray.toString(Base64);\r\n        },\r\n\r\n        /**\r\n         * Converts an OpenSSL-compatible string to a cipher params object.\r\n         *\r\n         * @param {string} openSSLStr The OpenSSL-compatible string.\r\n         *\r\n         * @return {CipherParams} The cipher params object.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\r\n         */\r\n        parse: function (openSSLStr) {\r\n            // Parse base64\r\n            var ciphertext = Base64.parse(openSSLStr);\r\n\r\n            // Shortcut\r\n            var ciphertextWords = ciphertext.words;\r\n\r\n            // Test for salt\r\n            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\r\n                // Extract salt\r\n                var salt = WordArray.create(ciphertextWords.slice(2, 4));\r\n\r\n                // Remove salt from ciphertext\r\n                ciphertextWords.splice(0, 4);\r\n                ciphertext.sigBytes -= 16;\r\n            }\r\n\r\n            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\r\n     */\r\n    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\r\n        /**\r\n         * Configuration options.\r\n         *\r\n         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\r\n         */\r\n        cfg: Base.extend({\r\n            format: OpenSSLFormatter\r\n        }),\r\n\r\n        /**\r\n         * Encrypts a message.\r\n         *\r\n         * @param {Cipher} cipher The cipher algorithm to use.\r\n         * @param {WordArray|string} message The message to encrypt.\r\n         * @param {WordArray} key The key.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @return {CipherParams} A cipher params object.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\r\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\r\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n         */\r\n        encrypt: function (cipher, message, key, cfg) {\r\n            // Apply config defaults\r\n            cfg = this.cfg.extend(cfg);\r\n\r\n            // Encrypt\r\n            var encryptor = cipher.createEncryptor(key, cfg);\r\n            var ciphertext = encryptor.finalize(message);\r\n\r\n            // Shortcut\r\n            var cipherCfg = encryptor.cfg;\r\n\r\n            // Create and return serializable cipher params\r\n            return CipherParams.create({\r\n                ciphertext: ciphertext,\r\n                key: key,\r\n                iv: cipherCfg.iv,\r\n                algorithm: cipher,\r\n                mode: cipherCfg.mode,\r\n                padding: cipherCfg.padding,\r\n                blockSize: cipher.blockSize,\r\n                formatter: cfg.format\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Decrypts serialized ciphertext.\r\n         *\r\n         * @param {Cipher} cipher The cipher algorithm to use.\r\n         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n         * @param {WordArray} key The key.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @return {WordArray} The plaintext.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n         */\r\n        decrypt: function (cipher, ciphertext, key, cfg) {\r\n            // Apply config defaults\r\n            cfg = this.cfg.extend(cfg);\r\n\r\n            // Convert string to CipherParams\r\n            ciphertext = this._parse(ciphertext, cfg.format);\r\n\r\n            // Decrypt\r\n            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\r\n\r\n            return plaintext;\r\n        },\r\n\r\n        /**\r\n         * Converts serialized ciphertext to CipherParams,\r\n         * else assumed CipherParams already and returns ciphertext unchanged.\r\n         *\r\n         * @param {CipherParams|string} ciphertext The ciphertext.\r\n         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\r\n         *\r\n         * @return {CipherParams} The unserialized ciphertext.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\r\n         */\r\n        _parse: function (ciphertext, format) {\r\n            if (typeof ciphertext == 'string') {\r\n                return format.parse(ciphertext, this);\r\n            } else {\r\n                return ciphertext;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Key derivation function namespace.\r\n     */\r\n    var C_kdf = C.kdf = {};\r\n\r\n    /**\r\n     * OpenSSL key derivation function.\r\n     */\r\n    var OpenSSLKdf = C_kdf.OpenSSL = {\r\n        /**\r\n         * Derives a key and IV from a password.\r\n         *\r\n         * @param {string} password The password to derive from.\r\n         * @param {number} keySize The size in words of the key to generate.\r\n         * @param {number} ivSize The size in words of the IV to generate.\r\n         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\r\n         *\r\n         * @return {CipherParams} A cipher params object with the key, IV, and salt.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\r\n         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\r\n         */\r\n        execute: function (password, keySize, ivSize, salt) {\r\n            // Generate random salt\r\n            if (!salt) {\r\n                salt = WordArray.random(64/8);\r\n            }\r\n\r\n            // Derive key and IV\r\n            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\r\n\r\n            // Separate key and IV\r\n            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\r\n            key.sigBytes = keySize * 4;\r\n\r\n            // Return params\r\n            return CipherParams.create({ key: key, iv: iv, salt: salt });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * A serializable cipher wrapper that derives the key from a password,\r\n     * and returns ciphertext as a serializable cipher params object.\r\n     */\r\n    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\r\n        /**\r\n         * Configuration options.\r\n         *\r\n         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\r\n         */\r\n        cfg: SerializableCipher.cfg.extend({\r\n            kdf: OpenSSLKdf\r\n        }),\r\n\r\n        /**\r\n         * Encrypts a message using a password.\r\n         *\r\n         * @param {Cipher} cipher The cipher algorithm to use.\r\n         * @param {WordArray|string} message The message to encrypt.\r\n         * @param {string} password The password.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @return {CipherParams} A cipher params object.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\r\n         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\r\n         */\r\n        encrypt: function (cipher, message, password, cfg) {\r\n            // Apply config defaults\r\n            cfg = this.cfg.extend(cfg);\r\n\r\n            // Derive key and other params\r\n            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\r\n\r\n            // Add IV to config\r\n            cfg.iv = derivedParams.iv;\r\n\r\n            // Encrypt\r\n            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\r\n\r\n            // Mix in derived params\r\n            ciphertext.mixIn(derivedParams);\r\n\r\n            return ciphertext;\r\n        },\r\n\r\n        /**\r\n         * Decrypts serialized ciphertext using a password.\r\n         *\r\n         * @param {Cipher} cipher The cipher algorithm to use.\r\n         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n         * @param {string} password The password.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @return {WordArray} The plaintext.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\r\n         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\r\n         */\r\n        decrypt: function (cipher, ciphertext, password, cfg) {\r\n            // Apply config defaults\r\n            cfg = this.cfg.extend(cfg);\r\n\r\n            // Convert string to CipherParams\r\n            ciphertext = this._parse(ciphertext, cfg.format);\r\n\r\n            // Derive key and other params\r\n            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\r\n\r\n            // Add IV to config\r\n            cfg.iv = derivedParams.iv;\r\n\r\n            // Decrypt\r\n            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\r\n\r\n            return plaintext;\r\n        }\r\n    });\r\n}());\r\n",
    "/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\r\n * CryptoJS core components.\r\n */\r\nvar CryptoJS = CryptoJS || (function (Math, undefined) {\r\n    /**\r\n     * CryptoJS namespace.\r\n     */\r\n    var C = {};\r\n\r\n    /**\r\n     * Library namespace.\r\n     */\r\n    var C_lib = C.lib = {};\r\n\r\n    /**\r\n     * Base object for prototypal inheritance.\r\n     */\r\n    var Base = C_lib.Base = (function () {\r\n        function F() {}\r\n\r\n        return {\r\n            /**\r\n             * Creates a new object that inherits from this object.\r\n             *\r\n             * @param {Object} overrides Properties to copy into the new object.\r\n             *\r\n             * @return {Object} The new object.\r\n             *\r\n             * @static\r\n             *\r\n             * @example\r\n             *\r\n             *     var MyType = CryptoJS.lib.Base.extend({\r\n             *         field: 'value',\r\n             *\r\n             *         method: function () {\r\n             *         }\r\n             *     });\r\n             */\r\n            extend: function (overrides) {\r\n                // Spawn\r\n                F.prototype = this;\r\n                var subtype = new F();\r\n\r\n                // Augment\r\n                if (overrides) {\r\n                    subtype.mixIn(overrides);\r\n                }\r\n\r\n                // Create default initializer\r\n                if (!subtype.hasOwnProperty('init')) {\r\n                    subtype.init = function () {\r\n                        subtype.$super.init.apply(this, arguments);\r\n                    };\r\n                }\r\n\r\n                // Initializer's prototype is the subtype object\r\n                subtype.init.prototype = subtype;\r\n\r\n                // Reference supertype\r\n                subtype.$super = this;\r\n\r\n                return subtype;\r\n            },\r\n\r\n            /**\r\n             * Extends this object and runs the init method.\r\n             * Arguments to create() will be passed to init().\r\n             *\r\n             * @return {Object} The new object.\r\n             *\r\n             * @static\r\n             *\r\n             * @example\r\n             *\r\n             *     var instance = MyType.create();\r\n             */\r\n            create: function () {\r\n                var instance = this.extend();\r\n                instance.init.apply(instance, arguments);\r\n\r\n                return instance;\r\n            },\r\n\r\n            /**\r\n             * Initializes a newly created object.\r\n             * Override this method to add some logic when your objects are created.\r\n             *\r\n             * @example\r\n             *\r\n             *     var MyType = CryptoJS.lib.Base.extend({\r\n             *         init: function () {\r\n             *             // ...\r\n             *         }\r\n             *     });\r\n             */\r\n            init: function () {\r\n            },\r\n\r\n            /**\r\n             * Copies properties into this object.\r\n             *\r\n             * @param {Object} properties The properties to mix in.\r\n             *\r\n             * @example\r\n             *\r\n             *     MyType.mixIn({\r\n             *         field: 'value'\r\n             *     });\r\n             */\r\n            mixIn: function (properties) {\r\n                for (var propertyName in properties) {\r\n                    if (properties.hasOwnProperty(propertyName)) {\r\n                        this[propertyName] = properties[propertyName];\r\n                    }\r\n                }\r\n\r\n                // IE won't copy toString using the loop above\r\n                if (properties.hasOwnProperty('toString')) {\r\n                    this.toString = properties.toString;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Creates a copy of this object.\r\n             *\r\n             * @return {Object} The clone.\r\n             *\r\n             * @example\r\n             *\r\n             *     var clone = instance.clone();\r\n             */\r\n            clone: function () {\r\n                return this.init.prototype.extend(this);\r\n            }\r\n        };\r\n    }());\r\n\r\n    /**\r\n     * An array of 32-bit words.\r\n     *\r\n     * @property {Array} words The array of 32-bit words.\r\n     * @property {number} sigBytes The number of significant bytes in this word array.\r\n     */\r\n    var WordArray = C_lib.WordArray = Base.extend({\r\n        /**\r\n         * Initializes a newly created word array.\r\n         *\r\n         * @param {Array} words (Optional) An array of 32-bit words.\r\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.lib.WordArray.create();\r\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\r\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\r\n         */\r\n        init: function (words, sigBytes) {\r\n            words = this.words = words || [];\r\n\r\n            if (sigBytes != undefined) {\r\n                this.sigBytes = sigBytes;\r\n            } else {\r\n                this.sigBytes = words.length * 4;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Converts this word array to a string.\r\n         *\r\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\r\n         *\r\n         * @return {string} The stringified word array.\r\n         *\r\n         * @example\r\n         *\r\n         *     var string = wordArray + '';\r\n         *     var string = wordArray.toString();\r\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\r\n         */\r\n        toString: function (encoder) {\r\n            return (encoder || Hex).stringify(this);\r\n        },\r\n\r\n        /**\r\n         * Concatenates a word array to this word array.\r\n         *\r\n         * @param {WordArray} wordArray The word array to append.\r\n         *\r\n         * @return {WordArray} This word array.\r\n         *\r\n         * @example\r\n         *\r\n         *     wordArray1.concat(wordArray2);\r\n         */\r\n        concat: function (wordArray) {\r\n            // Shortcuts\r\n            var thisWords = this.words;\r\n            var thatWords = wordArray.words;\r\n            var thisSigBytes = this.sigBytes;\r\n            var thatSigBytes = wordArray.sigBytes;\r\n\r\n            // Clamp excess bits\r\n            this.clamp();\r\n\r\n            // Concat\r\n            if (thisSigBytes % 4) {\r\n                // Copy one byte at a time\r\n                for (var i = 0; i < thatSigBytes; i++) {\r\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\r\n                }\r\n            } else if (thatWords.length > 0xffff) {\r\n                // Copy one word at a time\r\n                for (var i = 0; i < thatSigBytes; i += 4) {\r\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\r\n                }\r\n            } else {\r\n                // Copy all words at once\r\n                thisWords.push.apply(thisWords, thatWords);\r\n            }\r\n            this.sigBytes += thatSigBytes;\r\n\r\n            // Chainable\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes insignificant bits.\r\n         *\r\n         * @example\r\n         *\r\n         *     wordArray.clamp();\r\n         */\r\n        clamp: function () {\r\n            // Shortcuts\r\n            var words = this.words;\r\n            var sigBytes = this.sigBytes;\r\n\r\n            // Clamp\r\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\r\n            words.length = Math.ceil(sigBytes / 4);\r\n        },\r\n\r\n        /**\r\n         * Creates a copy of this word array.\r\n         *\r\n         * @return {WordArray} The clone.\r\n         *\r\n         * @example\r\n         *\r\n         *     var clone = wordArray.clone();\r\n         */\r\n        clone: function () {\r\n            var clone = Base.clone.call(this);\r\n            clone.words = this.words.slice(0);\r\n\r\n            return clone;\r\n        },\r\n\r\n        /**\r\n         * Creates a word array filled with random bytes.\r\n         *\r\n         * @param {number} nBytes The number of random bytes to generate.\r\n         *\r\n         * @return {WordArray} The random word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\r\n         */\r\n        random: function (nBytes) {\r\n            var words = [];\r\n            for (var i = 0; i < nBytes; i += 4) {\r\n                words.push((Math.random() * 0x100000000) | 0);\r\n            }\r\n\r\n            return new WordArray.init(words, nBytes);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Encoder namespace.\r\n     */\r\n    var C_enc = C.enc = {};\r\n\r\n    /**\r\n     * Hex encoding strategy.\r\n     */\r\n    var Hex = C_enc.Hex = {\r\n        /**\r\n         * Converts a word array to a hex string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The hex string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\r\n         */\r\n        stringify: function (wordArray) {\r\n            // Shortcuts\r\n            var words = wordArray.words;\r\n            var sigBytes = wordArray.sigBytes;\r\n\r\n            // Convert\r\n            var hexChars = [];\r\n            for (var i = 0; i < sigBytes; i++) {\r\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n                hexChars.push((bite >>> 4).toString(16));\r\n                hexChars.push((bite & 0x0f).toString(16));\r\n            }\r\n\r\n            return hexChars.join('');\r\n        },\r\n\r\n        /**\r\n         * Converts a hex string to a word array.\r\n         *\r\n         * @param {string} hexStr The hex string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\r\n         */\r\n        parse: function (hexStr) {\r\n            // Shortcut\r\n            var hexStrLength = hexStr.length;\r\n\r\n            // Convert\r\n            var words = [];\r\n            for (var i = 0; i < hexStrLength; i += 2) {\r\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\r\n            }\r\n\r\n            return new WordArray.init(words, hexStrLength / 2);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Latin1 encoding strategy.\r\n     */\r\n    var Latin1 = C_enc.Latin1 = {\r\n        /**\r\n         * Converts a word array to a Latin1 string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The Latin1 string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\r\n         */\r\n        stringify: function (wordArray) {\r\n            // Shortcuts\r\n            var words = wordArray.words;\r\n            var sigBytes = wordArray.sigBytes;\r\n\r\n            // Convert\r\n            var latin1Chars = [];\r\n            for (var i = 0; i < sigBytes; i++) {\r\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\r\n                latin1Chars.push(String.fromCharCode(bite));\r\n            }\r\n\r\n            return latin1Chars.join('');\r\n        },\r\n\r\n        /**\r\n         * Converts a Latin1 string to a word array.\r\n         *\r\n         * @param {string} latin1Str The Latin1 string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\r\n         */\r\n        parse: function (latin1Str) {\r\n            // Shortcut\r\n            var latin1StrLength = latin1Str.length;\r\n\r\n            // Convert\r\n            var words = [];\r\n            for (var i = 0; i < latin1StrLength; i++) {\r\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\r\n            }\r\n\r\n            return new WordArray.init(words, latin1StrLength);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * UTF-8 encoding strategy.\r\n     */\r\n    var Utf8 = C_enc.Utf8 = {\r\n        /**\r\n         * Converts a word array to a UTF-8 string.\r\n         *\r\n         * @param {WordArray} wordArray The word array.\r\n         *\r\n         * @return {string} The UTF-8 string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\r\n         */\r\n        stringify: function (wordArray) {\r\n            try {\r\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\r\n            } catch (e) {\r\n                throw new Error('Malformed UTF-8 data');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Converts a UTF-8 string to a word array.\r\n         *\r\n         * @param {string} utf8Str The UTF-8 string.\r\n         *\r\n         * @return {WordArray} The word array.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\r\n         */\r\n        parse: function (utf8Str) {\r\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Abstract buffered block algorithm template.\r\n     *\r\n     * The property blockSize must be implemented in a concrete subtype.\r\n     *\r\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\r\n     */\r\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\r\n        /**\r\n         * Resets this block algorithm's data buffer to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     bufferedBlockAlgorithm.reset();\r\n         */\r\n        reset: function () {\r\n            // Initial values\r\n            this._data = new WordArray.init();\r\n            this._nDataBytes = 0;\r\n        },\r\n\r\n        /**\r\n         * Adds new data to this block algorithm's buffer.\r\n         *\r\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\r\n         *\r\n         * @example\r\n         *\r\n         *     bufferedBlockAlgorithm._append('data');\r\n         *     bufferedBlockAlgorithm._append(wordArray);\r\n         */\r\n        _append: function (data) {\r\n            // Convert string to WordArray, else assume WordArray already\r\n            if (typeof data == 'string') {\r\n                data = Utf8.parse(data);\r\n            }\r\n\r\n            // Append\r\n            this._data.concat(data);\r\n            this._nDataBytes += data.sigBytes;\r\n        },\r\n\r\n        /**\r\n         * Processes available data blocks.\r\n         *\r\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\r\n         *\r\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\r\n         *\r\n         * @return {WordArray} The processed data.\r\n         *\r\n         * @example\r\n         *\r\n         *     var processedData = bufferedBlockAlgorithm._process();\r\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\r\n         */\r\n        _process: function (doFlush) {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n            var dataSigBytes = data.sigBytes;\r\n            var blockSize = this.blockSize;\r\n            var blockSizeBytes = blockSize * 4;\r\n\r\n            // Count blocks ready\r\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\r\n            if (doFlush) {\r\n                // Round up to include partial blocks\r\n                nBlocksReady = Math.ceil(nBlocksReady);\r\n            } else {\r\n                // Round down to include only full blocks,\r\n                // less the number of blocks that must remain in the buffer\r\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\r\n            }\r\n\r\n            // Count words ready\r\n            var nWordsReady = nBlocksReady * blockSize;\r\n\r\n            // Count bytes ready\r\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\r\n\r\n            // Process blocks\r\n            if (nWordsReady) {\r\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\r\n                    // Perform concrete-algorithm logic\r\n                    this._doProcessBlock(dataWords, offset);\r\n                }\r\n\r\n                // Remove processed words\r\n                var processedWords = dataWords.splice(0, nWordsReady);\r\n                data.sigBytes -= nBytesReady;\r\n            }\r\n\r\n            // Return processed words\r\n            return new WordArray.init(processedWords, nBytesReady);\r\n        },\r\n\r\n        /**\r\n         * Creates a copy of this object.\r\n         *\r\n         * @return {Object} The clone.\r\n         *\r\n         * @example\r\n         *\r\n         *     var clone = bufferedBlockAlgorithm.clone();\r\n         */\r\n        clone: function () {\r\n            var clone = Base.clone.call(this);\r\n            clone._data = this._data.clone();\r\n\r\n            return clone;\r\n        },\r\n\r\n        _minBufferSize: 0\r\n    });\r\n\r\n    /**\r\n     * Abstract hasher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\r\n     */\r\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\r\n        /**\r\n         * Configuration options.\r\n         */\r\n        cfg: Base.extend(),\r\n\r\n        /**\r\n         * Initializes a newly created hasher.\r\n         *\r\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hasher = CryptoJS.algo.SHA256.create();\r\n         */\r\n        init: function (cfg) {\r\n            // Apply config defaults\r\n            this.cfg = this.cfg.extend(cfg);\r\n\r\n            // Set initial values\r\n            this.reset();\r\n        },\r\n\r\n        /**\r\n         * Resets this hasher to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     hasher.reset();\r\n         */\r\n        reset: function () {\r\n            // Reset data buffer\r\n            BufferedBlockAlgorithm.reset.call(this);\r\n\r\n            // Perform concrete-hasher logic\r\n            this._doReset();\r\n        },\r\n\r\n        /**\r\n         * Updates this hasher with a message.\r\n         *\r\n         * @param {WordArray|string} messageUpdate The message to append.\r\n         *\r\n         * @return {Hasher} This hasher.\r\n         *\r\n         * @example\r\n         *\r\n         *     hasher.update('message');\r\n         *     hasher.update(wordArray);\r\n         */\r\n        update: function (messageUpdate) {\r\n            // Append\r\n            this._append(messageUpdate);\r\n\r\n            // Update the hash\r\n            this._process();\r\n\r\n            // Chainable\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Finalizes the hash computation.\r\n         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n         *\r\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\r\n         *\r\n         * @return {WordArray} The hash.\r\n         *\r\n         * @example\r\n         *\r\n         *     var hash = hasher.finalize();\r\n         *     var hash = hasher.finalize('message');\r\n         *     var hash = hasher.finalize(wordArray);\r\n         */\r\n        finalize: function (messageUpdate) {\r\n            // Final message update\r\n            if (messageUpdate) {\r\n                this._append(messageUpdate);\r\n            }\r\n\r\n            // Perform concrete-hasher logic\r\n            var hash = this._doFinalize();\r\n\r\n            return hash;\r\n        },\r\n\r\n        blockSize: 512/32,\r\n\r\n        /**\r\n         * Creates a shortcut function to a hasher's object interface.\r\n         *\r\n         * @param {Hasher} hasher The hasher to create a helper for.\r\n         *\r\n         * @return {Function} The shortcut function.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\r\n         */\r\n        _createHelper: function (hasher) {\r\n            return function (message, cfg) {\r\n                return new hasher.init(cfg).finalize(message);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Creates a shortcut function to the HMAC's object interface.\r\n         *\r\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\r\n         *\r\n         * @return {Function} The shortcut function.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\r\n         */\r\n        _createHmacHelper: function (hasher) {\r\n            return function (message, key) {\r\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\r\n            };\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Algorithm namespace.\r\n     */\r\n    var C_algo = C.algo = {};\r\n\r\n    return C;\r\n}(Math));\r\n\r\nexports.CryptoJS = CryptoJS;\r\n",
    "var CryptoJS = require('./core').CryptoJS;\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n     * Base64 encoding strategy.\n     */\n    var Base64 = C_enc.Base64 = {\n        /**\n         * Converts a word array to a Base64 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Base64 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n            var map = this._map;\n\n            // Clamp excess bits\n            wordArray.clamp();\n\n            // Convert\n            var base64Chars = [];\n            for (var i = 0; i < sigBytes; i += 3) {\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n                }\n            }\n\n            // Add padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                while (base64Chars.length % 4) {\n                    base64Chars.push(paddingChar);\n                }\n            }\n\n            return base64Chars.join('');\n        },\n\n        /**\n         * Converts a Base64 string to a word array.\n         *\n         * @param {string} base64Str The Base64 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n         */\n        parse: function (base64Str) {\n            // Shortcuts\n            var base64StrLength = base64Str.length;\n            var map = this._map;\n\n            // Ignore padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                var paddingIndex = base64Str.indexOf(paddingChar);\n                if (paddingIndex != -1) {\n                    base64StrLength = paddingIndex;\n                }\n            }\n\n            // Convert\n            var words = [];\n            var nBytes = 0;\n            for (var i = 0; i < base64StrLength; i++) {\n                if (i % 4) {\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n                    nBytes++;\n                }\n            }\n\n            return WordArray.create(words, nBytes);\n        },\n\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n}());\n",
    "var CryptoJS = require('./core').CryptoJS;\r\n\r\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\r\n    // Shortcuts\r\n    var C = CryptoJS;\r\n    var C_lib = C.lib;\r\n    var Base = C_lib.Base;\r\n    var WordArray = C_lib.WordArray;\r\n    var C_algo = C.algo;\r\n    var MD5 = C_algo.MD5;\r\n\r\n    /**\r\n     * This key derivation function is meant to conform with EVP_BytesToKey.\r\n     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\r\n     */\r\n    var EvpKDF = C_algo.EvpKDF = Base.extend({\r\n        /**\r\n         * Configuration options.\r\n         *\r\n         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\r\n         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\r\n         * @property {number} iterations The number of iterations to perform. Default: 1\r\n         */\r\n        cfg: Base.extend({\r\n            keySize: 128/32,\r\n            hasher: MD5,\r\n            iterations: 1\r\n        }),\r\n\r\n        /**\r\n         * Initializes a newly created key derivation function.\r\n         *\r\n         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\r\n         *\r\n         * @example\r\n         *\r\n         *     var kdf = CryptoJS.algo.EvpKDF.create();\r\n         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\r\n         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\r\n         */\r\n        init: function (cfg) {\r\n            this.cfg = this.cfg.extend(cfg);\r\n        },\r\n\r\n        /**\r\n         * Derives a key from a password.\r\n         *\r\n         * @param {WordArray|string} password The password.\r\n         * @param {WordArray|string} salt A salt.\r\n         *\r\n         * @return {WordArray} The derived key.\r\n         *\r\n         * @example\r\n         *\r\n         *     var key = kdf.compute(password, salt);\r\n         */\r\n        compute: function (password, salt) {\r\n            // Shortcut\r\n            var cfg = this.cfg;\r\n\r\n            // Init hasher\r\n            var hasher = cfg.hasher.create();\r\n\r\n            // Initial values\r\n            var derivedKey = WordArray.create();\r\n\r\n            // Shortcuts\r\n            var derivedKeyWords = derivedKey.words;\r\n            var keySize = cfg.keySize;\r\n            var iterations = cfg.iterations;\r\n\r\n            // Generate key\r\n            while (derivedKeyWords.length < keySize) {\r\n                if (block) {\r\n                    hasher.update(block);\r\n                }\r\n                var block = hasher.update(password).finalize(salt);\r\n                hasher.reset();\r\n\r\n                // Iterations\r\n                for (var i = 1; i < iterations; i++) {\r\n                    block = hasher.finalize(block);\r\n                    hasher.reset();\r\n                }\r\n\r\n                derivedKey.concat(block);\r\n            }\r\n            derivedKey.sigBytes = keySize * 4;\r\n\r\n            return derivedKey;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Derives a key from a password.\r\n     *\r\n     * @param {WordArray|string} password The password.\r\n     * @param {WordArray|string} salt A salt.\r\n     * @param {Object} cfg (Optional) The configuration options to use for this computation.\r\n     *\r\n     * @return {WordArray} The derived key.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var key = CryptoJS.EvpKDF(password, salt);\r\n     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\r\n     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\r\n     */\r\n    C.EvpKDF = function (password, salt, cfg) {\r\n        return EvpKDF.create(cfg).compute(password, salt);\r\n    };\r\n}());\r\n",
    "var CryptoJS = require('./core').CryptoJS;\n\n// create custom json serialization format\nvar JsonFormatter = {\n\tstringify: function (cipherParams) {\n\t\t// create json object with ciphertext\n\t\tvar jsonObj = {\n\t\t\tct: cipherParams.ciphertext.toString(CryptoJS.enc.Base64)\n\t\t};\n\t\t\n\t\t// optionally add iv and salt\n\t\tif (cipherParams.iv) {\n\t\t\tjsonObj.iv = cipherParams.iv.toString();\n\t\t}\n\t\t\n\t\tif (cipherParams.salt) {\n\t\t\tjsonObj.s = cipherParams.salt.toString();\n\t\t}\n\n\t\t// stringify json object\n\t\treturn JSON.stringify(jsonObj)\n\t},\n\n\tparse: function (jsonStr) {\n\t\t// parse json string\n\t\tvar jsonObj = JSON.parse(jsonStr);\n\t\t\n\t\t// extract ciphertext from json object, and create cipher params object\n\t\tvar cipherParams = CryptoJS.lib.CipherParams.create({\n\t\t\tciphertext: CryptoJS.enc.Base64.parse(jsonObj.ct)\n\t\t});\n\t\t\n\t\t// optionally extract iv and salt\n\t\tif (jsonObj.iv) {\n\t\t\tcipherParams.iv = CryptoJS.enc.Hex.parse(jsonObj.iv);\n\t\t}\n            \n\t\tif (jsonObj.s) {\n\t\t\tcipherParams.salt = CryptoJS.enc.Hex.parse(jsonObj.s);\n\t\t}\n\t\t\n\t\treturn cipherParams;\n\t}\n};\n\nexports.JsonFormatter = JsonFormatter;",
    "var CryptoJS = require('./core').CryptoJS;\r\n\r\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function (Math) {\r\n    // Shortcuts\r\n    var C = CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var Hasher = C_lib.Hasher;\r\n    var C_algo = C.algo;\r\n\r\n    // Constants table\r\n    var T = [];\r\n\r\n    // Compute constants\r\n    (function () {\r\n        for (var i = 0; i < 64; i++) {\r\n            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\r\n        }\r\n    }());\r\n\r\n    /**\r\n     * MD5 hash algorithm.\r\n     */\r\n    var MD5 = C_algo.MD5 = Hasher.extend({\r\n        _doReset: function () {\r\n            this._hash = new WordArray.init([\r\n                0x67452301, 0xefcdab89,\r\n                0x98badcfe, 0x10325476\r\n            ]);\r\n        },\r\n\r\n        _doProcessBlock: function (M, offset) {\r\n            // Swap endian\r\n            for (var i = 0; i < 16; i++) {\r\n                // Shortcuts\r\n                var offset_i = offset + i;\r\n                var M_offset_i = M[offset_i];\r\n\r\n                M[offset_i] = (\r\n                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\r\n                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\r\n                );\r\n            }\r\n\r\n            // Shortcuts\r\n            var H = this._hash.words;\r\n\r\n            var M_offset_0  = M[offset + 0];\r\n            var M_offset_1  = M[offset + 1];\r\n            var M_offset_2  = M[offset + 2];\r\n            var M_offset_3  = M[offset + 3];\r\n            var M_offset_4  = M[offset + 4];\r\n            var M_offset_5  = M[offset + 5];\r\n            var M_offset_6  = M[offset + 6];\r\n            var M_offset_7  = M[offset + 7];\r\n            var M_offset_8  = M[offset + 8];\r\n            var M_offset_9  = M[offset + 9];\r\n            var M_offset_10 = M[offset + 10];\r\n            var M_offset_11 = M[offset + 11];\r\n            var M_offset_12 = M[offset + 12];\r\n            var M_offset_13 = M[offset + 13];\r\n            var M_offset_14 = M[offset + 14];\r\n            var M_offset_15 = M[offset + 15];\r\n\r\n            // Working varialbes\r\n            var a = H[0];\r\n            var b = H[1];\r\n            var c = H[2];\r\n            var d = H[3];\r\n\r\n            // Computation\r\n            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\r\n            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\r\n            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\r\n            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\r\n            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\r\n            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\r\n            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\r\n            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\r\n            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\r\n            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\r\n            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\r\n            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\r\n            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\r\n            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\r\n            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\r\n            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\r\n\r\n            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\r\n            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\r\n            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\r\n            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\r\n            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\r\n            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\r\n            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\r\n            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\r\n            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\r\n            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\r\n            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\r\n            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\r\n            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\r\n            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\r\n            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\r\n            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\r\n\r\n            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\r\n            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\r\n            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\r\n            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\r\n            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\r\n            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\r\n            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\r\n            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\r\n            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\r\n            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\r\n            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\r\n            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\r\n            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\r\n            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\r\n            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\r\n            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\r\n\r\n            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\r\n            d = II(d, a, b, c, M_offset_7,  10, T[49]);\r\n            c = II(c, d, a, b, M_offset_14, 15, T[50]);\r\n            b = II(b, c, d, a, M_offset_5,  21, T[51]);\r\n            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\r\n            d = II(d, a, b, c, M_offset_3,  10, T[53]);\r\n            c = II(c, d, a, b, M_offset_10, 15, T[54]);\r\n            b = II(b, c, d, a, M_offset_1,  21, T[55]);\r\n            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\r\n            d = II(d, a, b, c, M_offset_15, 10, T[57]);\r\n            c = II(c, d, a, b, M_offset_6,  15, T[58]);\r\n            b = II(b, c, d, a, M_offset_13, 21, T[59]);\r\n            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\r\n            d = II(d, a, b, c, M_offset_11, 10, T[61]);\r\n            c = II(c, d, a, b, M_offset_2,  15, T[62]);\r\n            b = II(b, c, d, a, M_offset_9,  21, T[63]);\r\n\r\n            // Intermediate hash value\r\n            H[0] = (H[0] + a) | 0;\r\n            H[1] = (H[1] + b) | 0;\r\n            H[2] = (H[2] + c) | 0;\r\n            H[3] = (H[3] + d) | 0;\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n\r\n            var nBitsTotal = this._nDataBytes * 8;\r\n            var nBitsLeft = data.sigBytes * 8;\r\n\r\n            // Add padding\r\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n\r\n            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\r\n            var nBitsTotalL = nBitsTotal;\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\r\n                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\r\n                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\r\n            );\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\r\n                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\r\n                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\r\n            );\r\n\r\n            data.sigBytes = (dataWords.length + 1) * 4;\r\n\r\n            // Hash final blocks\r\n            this._process();\r\n\r\n            // Shortcuts\r\n            var hash = this._hash;\r\n            var H = hash.words;\r\n\r\n            // Swap endian\r\n            for (var i = 0; i < 4; i++) {\r\n                // Shortcut\r\n                var H_i = H[i];\r\n\r\n                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\r\n                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\r\n            }\r\n\r\n            // Return final computed hash\r\n            return hash;\r\n        },\r\n\r\n        clone: function () {\r\n            var clone = Hasher.clone.call(this);\r\n            clone._hash = this._hash.clone();\r\n\r\n            return clone;\r\n        }\r\n    });\r\n\r\n    function FF(a, b, c, d, x, s, t) {\r\n        var n = a + ((b & c) | (~b & d)) + x + t;\r\n        return ((n << s) | (n >>> (32 - s))) + b;\r\n    }\r\n\r\n    function GG(a, b, c, d, x, s, t) {\r\n        var n = a + ((b & d) | (c & ~d)) + x + t;\r\n        return ((n << s) | (n >>> (32 - s))) + b;\r\n    }\r\n\r\n    function HH(a, b, c, d, x, s, t) {\r\n        var n = a + (b ^ c ^ d) + x + t;\r\n        return ((n << s) | (n >>> (32 - s))) + b;\r\n    }\r\n\r\n    function II(a, b, c, d, x, s, t) {\r\n        var n = a + (c ^ (b | ~d)) + x + t;\r\n        return ((n << s) | (n >>> (32 - s))) + b;\r\n    }\r\n\r\n    /**\r\n     * Shortcut function to the hasher's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = CryptoJS.MD5('message');\r\n     *     var hash = CryptoJS.MD5(wordArray);\r\n     */\r\n    C.MD5 = Hasher._createHelper(MD5);\r\n\r\n    /**\r\n     * Shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = CryptoJS.HmacMD5(message, key);\r\n     */\r\n    C.HmacMD5 = Hasher._createHmacHelper(MD5);\r\n}(Math));\r\n",
    "/*!\n  * Reqwest! A general purpose XHR connection manager\n  * license MIT (c) Dustin Diaz 2014\n  * https://github.com/ded/reqwest\n  */\n\n!function (name, context, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(definition)\n  else context[name] = definition()\n}('reqwest', this, function () {\n\n  var win = window\n    , doc = document\n    , httpsRe = /^http/\n    , protocolRe = /(^\\w+):\\/\\//\n    , twoHundo = /^(20\\d|1223)$/ //http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n    , byTag = 'getElementsByTagName'\n    , readyState = 'readyState'\n    , contentType = 'Content-Type'\n    , requestedWith = 'X-Requested-With'\n    , head = doc[byTag]('head')[0]\n    , uniqid = 0\n    , callbackPrefix = 'reqwest_' + (+new Date())\n    , lastValue // data stored by the most recent JSONP callback\n    , xmlHttpRequest = 'XMLHttpRequest'\n    , xDomainRequest = 'XDomainRequest'\n    , noop = function () {}\n\n    , isArray = typeof Array.isArray == 'function'\n        ? Array.isArray\n        : function (a) {\n            return a instanceof Array\n          }\n\n    , defaultHeaders = {\n          'contentType': 'application/x-www-form-urlencoded'\n        , 'requestedWith': xmlHttpRequest\n        , 'accept': {\n              '*':  'text/javascript, text/html, application/xml, text/xml, */*'\n            , 'xml':  'application/xml, text/xml'\n            , 'html': 'text/html'\n            , 'text': 'text/plain'\n            , 'json': 'application/json, text/javascript'\n            , 'js':   'application/javascript, text/javascript'\n          }\n      }\n\n    , xhr = function(o) {\n        // is it x-domain\n        if (o['crossOrigin'] === true) {\n          var xhr = win[xmlHttpRequest] ? new XMLHttpRequest() : null\n          if (xhr && 'withCredentials' in xhr) {\n            return xhr\n          } else if (win[xDomainRequest]) {\n            return new XDomainRequest()\n          } else {\n            throw new Error('Browser does not support cross-origin requests')\n          }\n        } else if (win[xmlHttpRequest]) {\n          return new XMLHttpRequest()\n        } else {\n          return new ActiveXObject('Microsoft.XMLHTTP')\n        }\n      }\n    , globalSetupOptions = {\n        dataFilter: function (data) {\n          return data\n        }\n      }\n\n  function succeed(r) {\n    var protocol = protocolRe.exec(r.url);\n    protocol = (protocol && protocol[1]) || window.location.protocol;\n    return httpsRe.test(protocol) ? twoHundo.test(r.request.status) : !!r.request.response;\n  }\n\n  function handleReadyState(r, success, error) {\n    return function () {\n      // use _aborted to mitigate against IE err c00c023f\n      // (can't read props on aborted request objects)\n      if (r._aborted) return error(r.request)\n      if (r._timedOut) return error(r.request, 'Request is aborted: timeout')\n      if (r.request && r.request[readyState] == 4) {\n        r.request.onreadystatechange = noop\n        if (succeed(r)) success(r.request)\n        else\n          error(r.request)\n      }\n    }\n  }\n\n  function setHeaders(http, o) {\n    var headers = o['headers'] || {}\n      , h\n\n    headers['Accept'] = headers['Accept']\n      || defaultHeaders['accept'][o['type']]\n      || defaultHeaders['accept']['*']\n\n    var isAFormData = typeof FormData === 'function' && (o['data'] instanceof FormData);\n    // breaks cross-origin requests with legacy browsers\n    if (!o['crossOrigin'] && !headers[requestedWith]) headers[requestedWith] = defaultHeaders['requestedWith']\n    if (!headers[contentType] && !isAFormData) headers[contentType] = o['contentType'] || defaultHeaders['contentType']\n    for (h in headers)\n      headers.hasOwnProperty(h) && 'setRequestHeader' in http && http.setRequestHeader(h, headers[h])\n  }\n\n  function setCredentials(http, o) {\n    if (typeof o['withCredentials'] !== 'undefined' && typeof http.withCredentials !== 'undefined') {\n      http.withCredentials = !!o['withCredentials']\n    }\n  }\n\n  function generalCallback(data) {\n    lastValue = data\n  }\n\n  function urlappend (url, s) {\n    return url + (/\\?/.test(url) ? '&' : '?') + s\n  }\n\n  function handleJsonp(o, fn, err, url) {\n    var reqId = uniqid++\n      , cbkey = o['jsonpCallback'] || 'callback' // the 'callback' key\n      , cbval = o['jsonpCallbackName'] || reqwest.getcallbackPrefix(reqId)\n      , cbreg = new RegExp('((^|\\\\?|&)' + cbkey + ')=([^&]+)')\n      , match = url.match(cbreg)\n      , script = doc.createElement('script')\n      , loaded = 0\n      , isIE10 = navigator.userAgent.indexOf('MSIE 10.0') !== -1\n\n    if (match) {\n      if (match[3] === '?') {\n        url = url.replace(cbreg, '$1=' + cbval) // wildcard callback func name\n      } else {\n        cbval = match[3] // provided callback func name\n      }\n    } else {\n      url = urlappend(url, cbkey + '=' + cbval) // no callback details, add 'em\n    }\n\n    win[cbval] = generalCallback\n\n    script.type = 'text/javascript'\n    script.src = url\n    script.async = true\n    if (typeof script.onreadystatechange !== 'undefined' && !isIE10) {\n      // need this for IE due to out-of-order onreadystatechange(), binding script\n      // execution to an event listener gives us control over when the script\n      // is executed. See http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html\n      script.htmlFor = script.id = '_reqwest_' + reqId\n    }\n\n    script.onload = script.onreadystatechange = function () {\n      if ((script[readyState] && script[readyState] !== 'complete' && script[readyState] !== 'loaded') || loaded) {\n        return false\n      }\n      script.onload = script.onreadystatechange = null\n      script.onclick && script.onclick()\n      // Call the user callback with the last value stored and clean up values and scripts.\n      fn(lastValue)\n      lastValue = undefined\n      head.removeChild(script)\n      loaded = 1\n    }\n\n    // Add the script to the DOM head\n    head.appendChild(script)\n\n    // Enable JSONP timeout\n    return {\n      abort: function () {\n        script.onload = script.onreadystatechange = null\n        err({}, 'Request is aborted: timeout', {})\n        lastValue = undefined\n        head.removeChild(script)\n        loaded = 1\n      }\n    }\n  }\n\n  function getRequest(fn, err) {\n    var o = this.o\n      , method = (o['method'] || 'GET').toUpperCase()\n      , url = typeof o === 'string' ? o : o['url']\n      // convert non-string objects to query-string form unless o['processData'] is false\n      , data = (o['processData'] !== false && o['data'] && typeof o['data'] !== 'string')\n        ? reqwest.toQueryString(o['data'])\n        : (o['data'] || null)\n      , http\n      , sendWait = false\n\n    // if we're working on a GET request and we have data then we should append\n    // query string to end of URL and not post data\n    if ((o['type'] == 'jsonp' || method == 'GET') && data) {\n      url = urlappend(url, data)\n      data = null\n    }\n\n    if (o['type'] == 'jsonp') return handleJsonp(o, fn, err, url)\n\n    // get the xhr from the factory if passed\n    // if the factory returns null, fall-back to ours\n    http = (o.xhr && o.xhr(o)) || xhr(o)\n\n    http.open(method, url, o['async'] === false ? false : true)\n    setHeaders(http, o)\n    setCredentials(http, o)\n    if (win[xDomainRequest] && http instanceof win[xDomainRequest]) {\n        http.onload = fn\n        http.onerror = err\n        // NOTE: see\n        // http://social.msdn.microsoft.com/Forums/en-US/iewebdevelopment/thread/30ef3add-767c-4436-b8a9-f1ca19b4812e\n        http.onprogress = function() {}\n        sendWait = true\n    } else {\n      http.onreadystatechange = handleReadyState(this, fn, err)\n    }\n    o['before'] && o['before'](http)\n    if (sendWait) {\n      setTimeout(function () {\n        http.send(data)\n      }, 200)\n    } else {\n      http.send(data)\n    }\n    return http\n  }\n\n  function Reqwest(o, fn) {\n    this.o = o\n    this.fn = fn\n\n    init.apply(this, arguments)\n  }\n\n  function setType(header) {\n    // json, javascript, text/plain, text/html, xml\n    if (header.match('json')) return 'json'\n    if (header.match('javascript')) return 'js'\n    if (header.match('text')) return 'html'\n    if (header.match('xml')) return 'xml'\n  }\n\n  function init(o, fn) {\n\n    this.url = typeof o == 'string' ? o : o['url']\n    this.timeout = null\n\n    // whether request has been fulfilled for purpose\n    // of tracking the Promises\n    this._fulfilled = false\n    // success handlers\n    this._successHandler = function(){}\n    this._fulfillmentHandlers = []\n    // error handlers\n    this._errorHandlers = []\n    // complete (both success and fail) handlers\n    this._completeHandlers = []\n    this._erred = false\n    this._responseArgs = {}\n\n    var self = this\n\n    fn = fn || function () {}\n\n    if (o['timeout']) {\n      this.timeout = setTimeout(function () {\n        timedOut()\n      }, o['timeout'])\n    }\n\n    if (o['success']) {\n      this._successHandler = function () {\n        o['success'].apply(o, arguments)\n      }\n    }\n\n    if (o['error']) {\n      this._errorHandlers.push(function () {\n        o['error'].apply(o, arguments)\n      })\n    }\n\n    if (o['complete']) {\n      this._completeHandlers.push(function () {\n        o['complete'].apply(o, arguments)\n      })\n    }\n\n    function complete (resp) {\n      o['timeout'] && clearTimeout(self.timeout)\n      self.timeout = null\n      while (self._completeHandlers.length > 0) {\n        self._completeHandlers.shift()(resp)\n      }\n    }\n\n    function success (resp) {\n      var type = o['type'] || resp && setType(resp.getResponseHeader('Content-Type')) // resp can be undefined in IE\n      resp = (type !== 'jsonp') ? self.request : resp\n      // use global data filter on response text\n      var filteredResponse = globalSetupOptions.dataFilter(resp.responseText, type)\n        , r = filteredResponse\n      try {\n        resp.responseText = r\n      } catch (e) {\n        // can't assign this in IE<=8, just ignore\n      }\n      if (r) {\n        switch (type) {\n        case 'json':\n          try {\n            resp = win.JSON ? win.JSON.parse(r) : eval('(' + r + ')')\n          } catch (err) {\n            return error(resp, 'Could not parse JSON in response', err)\n          }\n          break\n        case 'js':\n          resp = eval(r)\n          break\n        case 'html':\n          resp = r\n          break\n        case 'xml':\n          resp = resp.responseXML\n              && resp.responseXML.parseError // IE trololo\n              && resp.responseXML.parseError.errorCode\n              && resp.responseXML.parseError.reason\n            ? null\n            : resp.responseXML\n          break\n        }\n      }\n\n      self._responseArgs.resp = resp\n      self._fulfilled = true\n      fn(resp)\n      self._successHandler(resp)\n      while (self._fulfillmentHandlers.length > 0) {\n        resp = self._fulfillmentHandlers.shift()(resp)\n      }\n\n      complete(resp)\n    }\n\n    function timedOut() {\n      self._timedOut = true\n      self.request.abort()      \n    }\n\n    function error(resp, msg, t) {\n      resp = self.request\n      self._responseArgs.resp = resp\n      self._responseArgs.msg = msg\n      self._responseArgs.t = t\n      self._erred = true\n      while (self._errorHandlers.length > 0) {\n        self._errorHandlers.shift()(resp, msg, t)\n      }\n      complete(resp)\n    }\n\n    this.request = getRequest.call(this, success, error)\n  }\n\n  Reqwest.prototype = {\n    abort: function () {\n      this._aborted = true\n      this.request.abort()\n    }\n\n  , retry: function () {\n      init.call(this, this.o, this.fn)\n    }\n\n    /**\n     * Small deviation from the Promises A CommonJs specification\n     * http://wiki.commonjs.org/wiki/Promises/A\n     */\n\n    /**\n     * `then` will execute upon successful requests\n     */\n  , then: function (success, fail) {\n      success = success || function () {}\n      fail = fail || function () {}\n      if (this._fulfilled) {\n        this._responseArgs.resp = success(this._responseArgs.resp)\n      } else if (this._erred) {\n        fail(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)\n      } else {\n        this._fulfillmentHandlers.push(success)\n        this._errorHandlers.push(fail)\n      }\n      return this\n    }\n\n    /**\n     * `always` will execute whether the request succeeds or fails\n     */\n  , always: function (fn) {\n      if (this._fulfilled || this._erred) {\n        fn(this._responseArgs.resp)\n      } else {\n        this._completeHandlers.push(fn)\n      }\n      return this\n    }\n\n    /**\n     * `fail` will execute when the request fails\n     */\n  , fail: function (fn) {\n      if (this._erred) {\n        fn(this._responseArgs.resp, this._responseArgs.msg, this._responseArgs.t)\n      } else {\n        this._errorHandlers.push(fn)\n      }\n      return this\n    }\n  , 'catch': function (fn) {\n      return this.fail(fn)\n    }\n  }\n\n  function reqwest(o, fn) {\n    return new Reqwest(o, fn)\n  }\n\n  // normalize newline variants according to spec -> CRLF\n  function normalize(s) {\n    return s ? s.replace(/\\r?\\n/g, '\\r\\n') : ''\n  }\n\n  function serial(el, cb) {\n    var n = el.name\n      , t = el.tagName.toLowerCase()\n      , optCb = function (o) {\n          // IE gives value=\"\" even where there is no value attribute\n          // 'specified' ref: http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-862529273\n          if (o && !o['disabled'])\n            cb(n, normalize(o['attributes']['value'] && o['attributes']['value']['specified'] ? o['value'] : o['text']))\n        }\n      , ch, ra, val, i\n\n    // don't serialize elements that are disabled or without a name\n    if (el.disabled || !n) return\n\n    switch (t) {\n    case 'input':\n      if (!/reset|button|image|file/i.test(el.type)) {\n        ch = /checkbox/i.test(el.type)\n        ra = /radio/i.test(el.type)\n        val = el.value\n        // WebKit gives us \"\" instead of \"on\" if a checkbox has no value, so correct it here\n        ;(!(ch || ra) || el.checked) && cb(n, normalize(ch && val === '' ? 'on' : val))\n      }\n      break\n    case 'textarea':\n      cb(n, normalize(el.value))\n      break\n    case 'select':\n      if (el.type.toLowerCase() === 'select-one') {\n        optCb(el.selectedIndex >= 0 ? el.options[el.selectedIndex] : null)\n      } else {\n        for (i = 0; el.length && i < el.length; i++) {\n          el.options[i].selected && optCb(el.options[i])\n        }\n      }\n      break\n    }\n  }\n\n  // collect up all form elements found from the passed argument elements all\n  // the way down to child elements; pass a '<form>' or form fields.\n  // called with 'this'=callback to use for serial() on each element\n  function eachFormElement() {\n    var cb = this\n      , e, i\n      , serializeSubtags = function (e, tags) {\n          var i, j, fa\n          for (i = 0; i < tags.length; i++) {\n            fa = e[byTag](tags[i])\n            for (j = 0; j < fa.length; j++) serial(fa[j], cb)\n          }\n        }\n\n    for (i = 0; i < arguments.length; i++) {\n      e = arguments[i]\n      if (/input|select|textarea/i.test(e.tagName)) serial(e, cb)\n      serializeSubtags(e, [ 'input', 'select', 'textarea' ])\n    }\n  }\n\n  // standard query string style serialization\n  function serializeQueryString() {\n    return reqwest.toQueryString(reqwest.serializeArray.apply(null, arguments))\n  }\n\n  // { 'name': 'value', ... } style serialization\n  function serializeHash() {\n    var hash = {}\n    eachFormElement.apply(function (name, value) {\n      if (name in hash) {\n        hash[name] && !isArray(hash[name]) && (hash[name] = [hash[name]])\n        hash[name].push(value)\n      } else hash[name] = value\n    }, arguments)\n    return hash\n  }\n\n  // [ { name: 'name', value: 'value' }, ... ] style serialization\n  reqwest.serializeArray = function () {\n    var arr = []\n    eachFormElement.apply(function (name, value) {\n      arr.push({name: name, value: value})\n    }, arguments)\n    return arr\n  }\n\n  reqwest.serialize = function () {\n    if (arguments.length === 0) return ''\n    var opt, fn\n      , args = Array.prototype.slice.call(arguments, 0)\n\n    opt = args.pop()\n    opt && opt.nodeType && args.push(opt) && (opt = null)\n    opt && (opt = opt.type)\n\n    if (opt == 'map') fn = serializeHash\n    else if (opt == 'array') fn = reqwest.serializeArray\n    else fn = serializeQueryString\n\n    return fn.apply(null, args)\n  }\n\n  reqwest.toQueryString = function (o, trad) {\n    var prefix, i\n      , traditional = trad || false\n      , s = []\n      , enc = encodeURIComponent\n      , add = function (key, value) {\n          // If value is a function, invoke it and return its value\n          value = ('function' === typeof value) ? value() : (value == null ? '' : value)\n          s[s.length] = enc(key) + '=' + enc(value)\n        }\n    // If an array was passed in, assume that it is an array of form elements.\n    if (isArray(o)) {\n      for (i = 0; o && i < o.length; i++) add(o[i]['name'], o[i]['value'])\n    } else {\n      // If traditional, encode the \"old\" way (the way 1.3.2 or older\n      // did it), otherwise encode params recursively.\n      for (prefix in o) {\n        if (o.hasOwnProperty(prefix)) buildParams(prefix, o[prefix], traditional, add)\n      }\n    }\n\n    // spaces should be + according to spec\n    return s.join('&').replace(/%20/g, '+')\n  }\n\n  function buildParams(prefix, obj, traditional, add) {\n    var name, i, v\n      , rbracket = /\\[\\]$/\n\n    if (isArray(obj)) {\n      // Serialize array item.\n      for (i = 0; obj && i < obj.length; i++) {\n        v = obj[i]\n        if (traditional || rbracket.test(prefix)) {\n          // Treat each array item as a scalar.\n          add(prefix, v)\n        } else {\n          buildParams(prefix + '[' + (typeof v === 'object' ? i : '') + ']', v, traditional, add)\n        }\n      }\n    } else if (obj && obj.toString() === '[object Object]') {\n      // Serialize object item.\n      for (name in obj) {\n        buildParams(prefix + '[' + name + ']', obj[name], traditional, add)\n      }\n\n    } else {\n      // Serialize scalar item.\n      add(prefix, obj)\n    }\n  }\n\n  reqwest.getcallbackPrefix = function () {\n    return callbackPrefix\n  }\n\n  // jQuery and Zepto compatibility, differences can be remapped here so you can call\n  // .ajax.compat(options, callback)\n  reqwest.compat = function (o, fn) {\n    if (o) {\n      o['type'] && (o['method'] = o['type']) && delete o['type']\n      o['dataType'] && (o['type'] = o['dataType'])\n      o['jsonpCallback'] && (o['jsonpCallbackName'] = o['jsonpCallback']) && delete o['jsonpCallback']\n      o['jsonp'] && (o['jsonpCallback'] = o['jsonp'])\n    }\n    return new Reqwest(o, fn)\n  }\n\n  reqwest.ajaxSetup = function (options) {\n    options = options || {}\n    for (var k in options) {\n      globalSetupOptions[k] = options[k]\n    }\n  }\n\n  return reqwest\n});\n",
    "/*!\n * @overview RSVP - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/tildeio/rsvp.js/master/LICENSE\n * @version   3.1.0\n */\n\n(function() {\n    \"use strict\";\n    function lib$rsvp$utils$$objectOrFunction(x) {\n      return typeof x === 'function' || (typeof x === 'object' && x !== null);\n    }\n\n    function lib$rsvp$utils$$isFunction(x) {\n      return typeof x === 'function';\n    }\n\n    function lib$rsvp$utils$$isMaybeThenable(x) {\n      return typeof x === 'object' && x !== null;\n    }\n\n    var lib$rsvp$utils$$_isArray;\n    if (!Array.isArray) {\n      lib$rsvp$utils$$_isArray = function (x) {\n        return Object.prototype.toString.call(x) === '[object Array]';\n      };\n    } else {\n      lib$rsvp$utils$$_isArray = Array.isArray;\n    }\n\n    var lib$rsvp$utils$$isArray = lib$rsvp$utils$$_isArray;\n\n    var lib$rsvp$utils$$now = Date.now || function() { return new Date().getTime(); };\n\n    function lib$rsvp$utils$$F() { }\n\n    var lib$rsvp$utils$$o_create = (Object.create || function (o) {\n      if (arguments.length > 1) {\n        throw new Error('Second argument not supported');\n      }\n      if (typeof o !== 'object') {\n        throw new TypeError('Argument must be an object');\n      }\n      lib$rsvp$utils$$F.prototype = o;\n      return new lib$rsvp$utils$$F();\n    });\n    function lib$rsvp$events$$indexOf(callbacks, callback) {\n      for (var i=0, l=callbacks.length; i<l; i++) {\n        if (callbacks[i] === callback) { return i; }\n      }\n\n      return -1;\n    }\n\n    function lib$rsvp$events$$callbacksFor(object) {\n      var callbacks = object._promiseCallbacks;\n\n      if (!callbacks) {\n        callbacks = object._promiseCallbacks = {};\n      }\n\n      return callbacks;\n    }\n\n    var lib$rsvp$events$$default = {\n\n      /**\n        `RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\n        Example:\n\n        ```javascript\n        var object = {};\n\n        RSVP.EventTarget.mixin(object);\n\n        object.on('finished', function(event) {\n          // handle event\n        });\n\n        object.trigger('finished', { detail: value });\n        ```\n\n        `EventTarget.mixin` also works with prototypes:\n\n        ```javascript\n        var Person = function() {};\n        RSVP.EventTarget.mixin(Person.prototype);\n\n        var yehuda = new Person();\n        var tom = new Person();\n\n        yehuda.on('poke', function(event) {\n          console.log('Yehuda says OW');\n        });\n\n        tom.on('poke', function(event) {\n          console.log('Tom says OW');\n        });\n\n        yehuda.trigger('poke');\n        tom.trigger('poke');\n        ```\n\n        @method mixin\n        @for RSVP.EventTarget\n        @private\n        @param {Object} object object to extend with EventTarget methods\n      */\n      'mixin': function(object) {\n        object['on']      = this['on'];\n        object['off']     = this['off'];\n        object['trigger'] = this['trigger'];\n        object._promiseCallbacks = undefined;\n        return object;\n      },\n\n      /**\n        Registers a callback to be executed when `eventName` is triggered\n\n        ```javascript\n        object.on('event', function(eventInfo){\n          // handle the event\n        });\n\n        object.trigger('event');\n        ```\n\n        @method on\n        @for RSVP.EventTarget\n        @private\n        @param {String} eventName name of the event to listen for\n        @param {Function} callback function to be called when the event is triggered.\n      */\n      'on': function(eventName, callback) {\n        if (typeof callback !== 'function') {\n          throw new TypeError('Callback must be a function');\n        }\n\n        var allCallbacks = lib$rsvp$events$$callbacksFor(this), callbacks;\n\n        callbacks = allCallbacks[eventName];\n\n        if (!callbacks) {\n          callbacks = allCallbacks[eventName] = [];\n        }\n\n        if (lib$rsvp$events$$indexOf(callbacks, callback) === -1) {\n          callbacks.push(callback);\n        }\n      },\n\n      /**\n        You can use `off` to stop firing a particular callback for an event:\n\n        ```javascript\n        function doStuff() { // do stuff! }\n        object.on('stuff', doStuff);\n\n        object.trigger('stuff'); // doStuff will be called\n\n        // Unregister ONLY the doStuff callback\n        object.off('stuff', doStuff);\n        object.trigger('stuff'); // doStuff will NOT be called\n        ```\n\n        If you don't pass a `callback` argument to `off`, ALL callbacks for the\n        event will not be executed when the event fires. For example:\n\n        ```javascript\n        var callback1 = function(){};\n        var callback2 = function(){};\n\n        object.on('stuff', callback1);\n        object.on('stuff', callback2);\n\n        object.trigger('stuff'); // callback1 and callback2 will be executed.\n\n        object.off('stuff');\n        object.trigger('stuff'); // callback1 and callback2 will not be executed!\n        ```\n\n        @method off\n        @for RSVP.EventTarget\n        @private\n        @param {String} eventName event to stop listening to\n        @param {Function} callback optional argument. If given, only the function\n        given will be removed from the event's callback queue. If no `callback`\n        argument is given, all callbacks will be removed from the event's callback\n        queue.\n      */\n      'off': function(eventName, callback) {\n        var allCallbacks = lib$rsvp$events$$callbacksFor(this), callbacks, index;\n\n        if (!callback) {\n          allCallbacks[eventName] = [];\n          return;\n        }\n\n        callbacks = allCallbacks[eventName];\n\n        index = lib$rsvp$events$$indexOf(callbacks, callback);\n\n        if (index !== -1) { callbacks.splice(index, 1); }\n      },\n\n      /**\n        Use `trigger` to fire custom events. For example:\n\n        ```javascript\n        object.on('foo', function(){\n          console.log('foo event happened!');\n        });\n        object.trigger('foo');\n        // 'foo event happened!' logged to the console\n        ```\n\n        You can also pass a value as a second argument to `trigger` that will be\n        passed as an argument to all event listeners for the event:\n\n        ```javascript\n        object.on('foo', function(value){\n          console.log(value.name);\n        });\n\n        object.trigger('foo', { name: 'bar' });\n        // 'bar' logged to the console\n        ```\n\n        @method trigger\n        @for RSVP.EventTarget\n        @private\n        @param {String} eventName name of the event to be triggered\n        @param {*} options optional value to be passed to any event handlers for\n        the given `eventName`\n      */\n      'trigger': function(eventName, options, label) {\n        var allCallbacks = lib$rsvp$events$$callbacksFor(this), callbacks, callback;\n\n        if (callbacks = allCallbacks[eventName]) {\n          // Don't cache the callbacks.length since it may grow\n          for (var i=0; i<callbacks.length; i++) {\n            callback = callbacks[i];\n\n            callback(options, label);\n          }\n        }\n      }\n    };\n\n    var lib$rsvp$config$$config = {\n      instrument: false\n    };\n\n    lib$rsvp$events$$default['mixin'](lib$rsvp$config$$config);\n\n    function lib$rsvp$config$$configure(name, value) {\n      if (name === 'onerror') {\n        // handle for legacy users that expect the actual\n        // error to be passed to their function added via\n        // `RSVP.configure('onerror', someFunctionHere);`\n        lib$rsvp$config$$config['on']('error', value);\n        return;\n      }\n\n      if (arguments.length === 2) {\n        lib$rsvp$config$$config[name] = value;\n      } else {\n        return lib$rsvp$config$$config[name];\n      }\n    }\n\n    var lib$rsvp$instrument$$queue = [];\n\n    function lib$rsvp$instrument$$scheduleFlush() {\n      setTimeout(function() {\n        var entry;\n        for (var i = 0; i < lib$rsvp$instrument$$queue.length; i++) {\n          entry = lib$rsvp$instrument$$queue[i];\n\n          var payload = entry.payload;\n\n          payload.guid = payload.key + payload.id;\n          payload.childGuid = payload.key + payload.childId;\n          if (payload.error) {\n            payload.stack = payload.error.stack;\n          }\n\n          lib$rsvp$config$$config['trigger'](entry.name, entry.payload);\n        }\n        lib$rsvp$instrument$$queue.length = 0;\n      }, 50);\n    }\n\n    function lib$rsvp$instrument$$instrument(eventName, promise, child) {\n      if (1 === lib$rsvp$instrument$$queue.push({\n        name: eventName,\n        payload: {\n          key: promise._guidKey,\n          id:  promise._id,\n          eventName: eventName,\n          detail: promise._result,\n          childId: child && child._id,\n          label: promise._label,\n          timeStamp: lib$rsvp$utils$$now(),\n          error: lib$rsvp$config$$config[\"instrument-with-stack\"] ? new Error(promise._label) : null\n        }})) {\n          lib$rsvp$instrument$$scheduleFlush();\n        }\n      }\n    var lib$rsvp$instrument$$default = lib$rsvp$instrument$$instrument;\n\n    function  lib$rsvp$$internal$$withOwnPromise() {\n      return new TypeError('A promises callback cannot return that same promise.');\n    }\n\n    function lib$rsvp$$internal$$noop() {}\n\n    var lib$rsvp$$internal$$PENDING   = void 0;\n    var lib$rsvp$$internal$$FULFILLED = 1;\n    var lib$rsvp$$internal$$REJECTED  = 2;\n\n    var lib$rsvp$$internal$$GET_THEN_ERROR = new lib$rsvp$$internal$$ErrorObject();\n\n    function lib$rsvp$$internal$$getThen(promise) {\n      try {\n        return promise.then;\n      } catch(error) {\n        lib$rsvp$$internal$$GET_THEN_ERROR.error = error;\n        return lib$rsvp$$internal$$GET_THEN_ERROR;\n      }\n    }\n\n    function lib$rsvp$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n      try {\n        then.call(value, fulfillmentHandler, rejectionHandler);\n      } catch(e) {\n        return e;\n      }\n    }\n\n    function lib$rsvp$$internal$$handleForeignThenable(promise, thenable, then) {\n      lib$rsvp$config$$config.async(function(promise) {\n        var sealed = false;\n        var error = lib$rsvp$$internal$$tryThen(then, thenable, function(value) {\n          if (sealed) { return; }\n          sealed = true;\n          if (thenable !== value) {\n            lib$rsvp$$internal$$resolve(promise, value);\n          } else {\n            lib$rsvp$$internal$$fulfill(promise, value);\n          }\n        }, function(reason) {\n          if (sealed) { return; }\n          sealed = true;\n\n          lib$rsvp$$internal$$reject(promise, reason);\n        }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n        if (!sealed && error) {\n          sealed = true;\n          lib$rsvp$$internal$$reject(promise, error);\n        }\n      }, promise);\n    }\n\n    function lib$rsvp$$internal$$handleOwnThenable(promise, thenable) {\n      if (thenable._state === lib$rsvp$$internal$$FULFILLED) {\n        lib$rsvp$$internal$$fulfill(promise, thenable._result);\n      } else if (thenable._state === lib$rsvp$$internal$$REJECTED) {\n        thenable._onError = null;\n        lib$rsvp$$internal$$reject(promise, thenable._result);\n      } else {\n        lib$rsvp$$internal$$subscribe(thenable, undefined, function(value) {\n          if (thenable !== value) {\n            lib$rsvp$$internal$$resolve(promise, value);\n          } else {\n            lib$rsvp$$internal$$fulfill(promise, value);\n          }\n        }, function(reason) {\n          lib$rsvp$$internal$$reject(promise, reason);\n        });\n      }\n    }\n\n    function lib$rsvp$$internal$$handleMaybeThenable(promise, maybeThenable) {\n      if (maybeThenable.constructor === promise.constructor) {\n        lib$rsvp$$internal$$handleOwnThenable(promise, maybeThenable);\n      } else {\n        var then = lib$rsvp$$internal$$getThen(maybeThenable);\n\n        if (then === lib$rsvp$$internal$$GET_THEN_ERROR) {\n          lib$rsvp$$internal$$reject(promise, lib$rsvp$$internal$$GET_THEN_ERROR.error);\n        } else if (then === undefined) {\n          lib$rsvp$$internal$$fulfill(promise, maybeThenable);\n        } else if (lib$rsvp$utils$$isFunction(then)) {\n          lib$rsvp$$internal$$handleForeignThenable(promise, maybeThenable, then);\n        } else {\n          lib$rsvp$$internal$$fulfill(promise, maybeThenable);\n        }\n      }\n    }\n\n    function lib$rsvp$$internal$$resolve(promise, value) {\n      if (promise === value) {\n        lib$rsvp$$internal$$fulfill(promise, value);\n      } else if (lib$rsvp$utils$$objectOrFunction(value)) {\n        lib$rsvp$$internal$$handleMaybeThenable(promise, value);\n      } else {\n        lib$rsvp$$internal$$fulfill(promise, value);\n      }\n    }\n\n    function lib$rsvp$$internal$$publishRejection(promise) {\n      if (promise._onError) {\n        promise._onError(promise._result);\n      }\n\n      lib$rsvp$$internal$$publish(promise);\n    }\n\n    function lib$rsvp$$internal$$fulfill(promise, value) {\n      if (promise._state !== lib$rsvp$$internal$$PENDING) { return; }\n\n      promise._result = value;\n      promise._state = lib$rsvp$$internal$$FULFILLED;\n\n      if (promise._subscribers.length === 0) {\n        if (lib$rsvp$config$$config.instrument) {\n          lib$rsvp$instrument$$default('fulfilled', promise);\n        }\n      } else {\n        lib$rsvp$config$$config.async(lib$rsvp$$internal$$publish, promise);\n      }\n    }\n\n    function lib$rsvp$$internal$$reject(promise, reason) {\n      if (promise._state !== lib$rsvp$$internal$$PENDING) { return; }\n      promise._state = lib$rsvp$$internal$$REJECTED;\n      promise._result = reason;\n      lib$rsvp$config$$config.async(lib$rsvp$$internal$$publishRejection, promise);\n    }\n\n    function lib$rsvp$$internal$$subscribe(parent, child, onFulfillment, onRejection) {\n      var subscribers = parent._subscribers;\n      var length = subscribers.length;\n\n      parent._onError = null;\n\n      subscribers[length] = child;\n      subscribers[length + lib$rsvp$$internal$$FULFILLED] = onFulfillment;\n      subscribers[length + lib$rsvp$$internal$$REJECTED]  = onRejection;\n\n      if (length === 0 && parent._state) {\n        lib$rsvp$config$$config.async(lib$rsvp$$internal$$publish, parent);\n      }\n    }\n\n    function lib$rsvp$$internal$$publish(promise) {\n      var subscribers = promise._subscribers;\n      var settled = promise._state;\n\n      if (lib$rsvp$config$$config.instrument) {\n        lib$rsvp$instrument$$default(settled === lib$rsvp$$internal$$FULFILLED ? 'fulfilled' : 'rejected', promise);\n      }\n\n      if (subscribers.length === 0) { return; }\n\n      var child, callback, detail = promise._result;\n\n      for (var i = 0; i < subscribers.length; i += 3) {\n        child = subscribers[i];\n        callback = subscribers[i + settled];\n\n        if (child) {\n          lib$rsvp$$internal$$invokeCallback(settled, child, callback, detail);\n        } else {\n          callback(detail);\n        }\n      }\n\n      promise._subscribers.length = 0;\n    }\n\n    function lib$rsvp$$internal$$ErrorObject() {\n      this.error = null;\n    }\n\n    var lib$rsvp$$internal$$TRY_CATCH_ERROR = new lib$rsvp$$internal$$ErrorObject();\n\n    function lib$rsvp$$internal$$tryCatch(callback, detail) {\n      try {\n        return callback(detail);\n      } catch(e) {\n        lib$rsvp$$internal$$TRY_CATCH_ERROR.error = e;\n        return lib$rsvp$$internal$$TRY_CATCH_ERROR;\n      }\n    }\n\n    function lib$rsvp$$internal$$invokeCallback(settled, promise, callback, detail) {\n      var hasCallback = lib$rsvp$utils$$isFunction(callback),\n          value, error, succeeded, failed;\n\n      if (hasCallback) {\n        value = lib$rsvp$$internal$$tryCatch(callback, detail);\n\n        if (value === lib$rsvp$$internal$$TRY_CATCH_ERROR) {\n          failed = true;\n          error = value.error;\n          value = null;\n        } else {\n          succeeded = true;\n        }\n\n        if (promise === value) {\n          lib$rsvp$$internal$$reject(promise, lib$rsvp$$internal$$withOwnPromise());\n          return;\n        }\n\n      } else {\n        value = detail;\n        succeeded = true;\n      }\n\n      if (promise._state !== lib$rsvp$$internal$$PENDING) {\n        // noop\n      } else if (hasCallback && succeeded) {\n        lib$rsvp$$internal$$resolve(promise, value);\n      } else if (failed) {\n        lib$rsvp$$internal$$reject(promise, error);\n      } else if (settled === lib$rsvp$$internal$$FULFILLED) {\n        lib$rsvp$$internal$$fulfill(promise, value);\n      } else if (settled === lib$rsvp$$internal$$REJECTED) {\n        lib$rsvp$$internal$$reject(promise, value);\n      }\n    }\n\n    function lib$rsvp$$internal$$initializePromise(promise, resolver) {\n      var resolved = false;\n      try {\n        resolver(function resolvePromise(value){\n          if (resolved) { return; }\n          resolved = true;\n          lib$rsvp$$internal$$resolve(promise, value);\n        }, function rejectPromise(reason) {\n          if (resolved) { return; }\n          resolved = true;\n          lib$rsvp$$internal$$reject(promise, reason);\n        });\n      } catch(e) {\n        lib$rsvp$$internal$$reject(promise, e);\n      }\n    }\n\n    function lib$rsvp$enumerator$$makeSettledResult(state, position, value) {\n      if (state === lib$rsvp$$internal$$FULFILLED) {\n        return {\n          state: 'fulfilled',\n          value: value\n        };\n      } else {\n         return {\n          state: 'rejected',\n          reason: value\n        };\n      }\n    }\n\n    function lib$rsvp$enumerator$$Enumerator(Constructor, input, abortOnReject, label) {\n      var enumerator = this;\n\n      enumerator._instanceConstructor = Constructor;\n      enumerator.promise = new Constructor(lib$rsvp$$internal$$noop, label);\n      enumerator._abortOnReject = abortOnReject;\n\n      if (enumerator._validateInput(input)) {\n        enumerator._input     = input;\n        enumerator.length     = input.length;\n        enumerator._remaining = input.length;\n\n        enumerator._init();\n\n        if (enumerator.length === 0) {\n          lib$rsvp$$internal$$fulfill(enumerator.promise, enumerator._result);\n        } else {\n          enumerator.length = enumerator.length || 0;\n          enumerator._enumerate();\n          if (enumerator._remaining === 0) {\n            lib$rsvp$$internal$$fulfill(enumerator.promise, enumerator._result);\n          }\n        }\n      } else {\n        lib$rsvp$$internal$$reject(enumerator.promise, enumerator._validationError());\n      }\n    }\n\n    var lib$rsvp$enumerator$$default = lib$rsvp$enumerator$$Enumerator;\n\n    lib$rsvp$enumerator$$Enumerator.prototype._validateInput = function(input) {\n      return lib$rsvp$utils$$isArray(input);\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._validationError = function() {\n      return new Error('Array Methods must be provided an Array');\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._init = function() {\n      this._result = new Array(this.length);\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._enumerate = function() {\n      var enumerator = this;\n      var length     = enumerator.length;\n      var promise    = enumerator.promise;\n      var input      = enumerator._input;\n\n      for (var i = 0; promise._state === lib$rsvp$$internal$$PENDING && i < length; i++) {\n        enumerator._eachEntry(input[i], i);\n      }\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {\n      var enumerator = this;\n      var c = enumerator._instanceConstructor;\n      if (lib$rsvp$utils$$isMaybeThenable(entry)) {\n        if (entry.constructor === c && entry._state !== lib$rsvp$$internal$$PENDING) {\n          entry._onError = null;\n          enumerator._settledAt(entry._state, i, entry._result);\n        } else {\n          enumerator._willSettleAt(c.resolve(entry), i);\n        }\n      } else {\n        enumerator._remaining--;\n        enumerator._result[i] = enumerator._makeResult(lib$rsvp$$internal$$FULFILLED, i, entry);\n      }\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {\n      var enumerator = this;\n      var promise = enumerator.promise;\n\n      if (promise._state === lib$rsvp$$internal$$PENDING) {\n        enumerator._remaining--;\n\n        if (enumerator._abortOnReject && state === lib$rsvp$$internal$$REJECTED) {\n          lib$rsvp$$internal$$reject(promise, value);\n        } else {\n          enumerator._result[i] = enumerator._makeResult(state, i, value);\n        }\n      }\n\n      if (enumerator._remaining === 0) {\n        lib$rsvp$$internal$$fulfill(promise, enumerator._result);\n      }\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._makeResult = function(state, i, value) {\n      return value;\n    };\n\n    lib$rsvp$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {\n      var enumerator = this;\n\n      lib$rsvp$$internal$$subscribe(promise, undefined, function(value) {\n        enumerator._settledAt(lib$rsvp$$internal$$FULFILLED, i, value);\n      }, function(reason) {\n        enumerator._settledAt(lib$rsvp$$internal$$REJECTED, i, reason);\n      });\n    };\n    function lib$rsvp$promise$all$$all(entries, label) {\n      return new lib$rsvp$enumerator$$default(this, entries, true /* abort on reject */, label).promise;\n    }\n    var lib$rsvp$promise$all$$default = lib$rsvp$promise$all$$all;\n    function lib$rsvp$promise$race$$race(entries, label) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      var promise = new Constructor(lib$rsvp$$internal$$noop, label);\n\n      if (!lib$rsvp$utils$$isArray(entries)) {\n        lib$rsvp$$internal$$reject(promise, new TypeError('You must pass an array to race.'));\n        return promise;\n      }\n\n      var length = entries.length;\n\n      function onFulfillment(value) {\n        lib$rsvp$$internal$$resolve(promise, value);\n      }\n\n      function onRejection(reason) {\n        lib$rsvp$$internal$$reject(promise, reason);\n      }\n\n      for (var i = 0; promise._state === lib$rsvp$$internal$$PENDING && i < length; i++) {\n        lib$rsvp$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);\n      }\n\n      return promise;\n    }\n    var lib$rsvp$promise$race$$default = lib$rsvp$promise$race$$race;\n    function lib$rsvp$promise$resolve$$resolve(object, label) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      if (object && typeof object === 'object' && object.constructor === Constructor) {\n        return object;\n      }\n\n      var promise = new Constructor(lib$rsvp$$internal$$noop, label);\n      lib$rsvp$$internal$$resolve(promise, object);\n      return promise;\n    }\n    var lib$rsvp$promise$resolve$$default = lib$rsvp$promise$resolve$$resolve;\n    function lib$rsvp$promise$reject$$reject(reason, label) {\n      /*jshint validthis:true */\n      var Constructor = this;\n      var promise = new Constructor(lib$rsvp$$internal$$noop, label);\n      lib$rsvp$$internal$$reject(promise, reason);\n      return promise;\n    }\n    var lib$rsvp$promise$reject$$default = lib$rsvp$promise$reject$$reject;\n\n    var lib$rsvp$promise$$guidKey = 'rsvp_' + lib$rsvp$utils$$now() + '-';\n    var lib$rsvp$promise$$counter = 0;\n\n    function lib$rsvp$promise$$needsResolver() {\n      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n    }\n\n    function lib$rsvp$promise$$needsNew() {\n      throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n    }\n\n    function lib$rsvp$promise$$Promise(resolver, label) {\n      var promise = this;\n\n      promise._id = lib$rsvp$promise$$counter++;\n      promise._label = label;\n      promise._state = undefined;\n      promise._result = undefined;\n      promise._subscribers = [];\n\n      if (lib$rsvp$config$$config.instrument) {\n        lib$rsvp$instrument$$default('created', promise);\n      }\n\n      if (lib$rsvp$$internal$$noop !== resolver) {\n        if (!lib$rsvp$utils$$isFunction(resolver)) {\n          lib$rsvp$promise$$needsResolver();\n        }\n\n        if (!(promise instanceof lib$rsvp$promise$$Promise)) {\n          lib$rsvp$promise$$needsNew();\n        }\n\n        lib$rsvp$$internal$$initializePromise(promise, resolver);\n      }\n    }\n\n    var lib$rsvp$promise$$default = lib$rsvp$promise$$Promise;\n\n    // deprecated\n    lib$rsvp$promise$$Promise.cast = lib$rsvp$promise$resolve$$default;\n    lib$rsvp$promise$$Promise.all = lib$rsvp$promise$all$$default;\n    lib$rsvp$promise$$Promise.race = lib$rsvp$promise$race$$default;\n    lib$rsvp$promise$$Promise.resolve = lib$rsvp$promise$resolve$$default;\n    lib$rsvp$promise$$Promise.reject = lib$rsvp$promise$reject$$default;\n\n    lib$rsvp$promise$$Promise.prototype = {\n      constructor: lib$rsvp$promise$$Promise,\n\n      _guidKey: lib$rsvp$promise$$guidKey,\n\n      _onError: function (reason) {\n        var promise = this;\n        lib$rsvp$config$$config.after(function() {\n          if (promise._onError) {\n            lib$rsvp$config$$config['trigger']('error', reason, promise._label);\n          }\n        });\n      },\n\n    /**\n      The primary way of interacting with a promise is through its `then` method,\n      which registers callbacks to receive either a promise's eventual value or the\n      reason why the promise cannot be fulfilled.\n\n      ```js\n      findUser().then(function(user){\n        // user is available\n      }, function(reason){\n        // user is unavailable, and you are given the reason why\n      });\n      ```\n\n      Chaining\n      --------\n\n      The return value of `then` is itself a promise.  This second, 'downstream'\n      promise is resolved with the return value of the first promise's fulfillment\n      or rejection handler, or rejected if the handler throws an exception.\n\n      ```js\n      findUser().then(function (user) {\n        return user.name;\n      }, function (reason) {\n        return 'default name';\n      }).then(function (userName) {\n        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n        // will be `'default name'`\n      });\n\n      findUser().then(function (user) {\n        throw new Error('Found user, but still unhappy');\n      }, function (reason) {\n        throw new Error('`findUser` rejected and we're unhappy');\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n      });\n      ```\n      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n      ```js\n      findUser().then(function (user) {\n        throw new PedagogicalException('Upstream error');\n      }).then(function (value) {\n        // never reached\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // The `PedgagocialException` is propagated all the way down to here\n      });\n      ```\n\n      Assimilation\n      ------------\n\n      Sometimes the value you want to propagate to a downstream promise can only be\n      retrieved asynchronously. This can be achieved by returning a promise in the\n      fulfillment or rejection handler. The downstream promise will then be pending\n      until the returned promise is settled. This is called *assimilation*.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // The user's comments are now available\n      });\n      ```\n\n      If the assimliated promise rejects, then the downstream promise will also reject.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // If `findCommentsByAuthor` fulfills, we'll have the value here\n      }, function (reason) {\n        // If `findCommentsByAuthor` rejects, we'll have the reason here\n      });\n      ```\n\n      Simple Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var result;\n\n      try {\n        result = findResult();\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n      findResult(function(result, err){\n        if (err) {\n          // failure\n        } else {\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findResult().then(function(result){\n        // success\n      }, function(reason){\n        // failure\n      });\n      ```\n\n      Advanced Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var author, books;\n\n      try {\n        author = findAuthor();\n        books  = findBooksByAuthor(author);\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n\n      function foundBooks(books) {\n\n      }\n\n      function failure(reason) {\n\n      }\n\n      findAuthor(function(author, err){\n        if (err) {\n          failure(err);\n          // failure\n        } else {\n          try {\n            findBoooksByAuthor(author, function(books, err) {\n              if (err) {\n                failure(err);\n              } else {\n                try {\n                  foundBooks(books);\n                } catch(reason) {\n                  failure(reason);\n                }\n              }\n            });\n          } catch(error) {\n            failure(err);\n          }\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findAuthor().\n        then(findBooksByAuthor).\n        then(function(books){\n          // found books\n      }).catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method then\n      @param {Function} onFulfillment\n      @param {Function} onRejection\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise}\n    */\n      then: function(onFulfillment, onRejection, label) {\n        var parent = this;\n        var state = parent._state;\n\n        if (state === lib$rsvp$$internal$$FULFILLED && !onFulfillment || state === lib$rsvp$$internal$$REJECTED && !onRejection) {\n          if (lib$rsvp$config$$config.instrument) {\n            lib$rsvp$instrument$$default('chained', parent, parent);\n          }\n          return parent;\n        }\n\n        parent._onError = null;\n\n        var child = new parent.constructor(lib$rsvp$$internal$$noop, label);\n        var result = parent._result;\n\n        if (lib$rsvp$config$$config.instrument) {\n          lib$rsvp$instrument$$default('chained', parent, child);\n        }\n\n        if (state) {\n          var callback = arguments[state - 1];\n          lib$rsvp$config$$config.async(function(){\n            lib$rsvp$$internal$$invokeCallback(state, child, callback, result);\n          });\n        } else {\n          lib$rsvp$$internal$$subscribe(parent, child, onFulfillment, onRejection);\n        }\n\n        return child;\n      },\n\n    /**\n      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n      as the catch block of a try/catch statement.\n\n      ```js\n      function findAuthor(){\n        throw new Error('couldn't find that author');\n      }\n\n      // synchronous\n      try {\n        findAuthor();\n      } catch(reason) {\n        // something went wrong\n      }\n\n      // async with promises\n      findAuthor().catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method catch\n      @param {Function} onRejection\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise}\n    */\n      'catch': function(onRejection, label) {\n        return this.then(undefined, onRejection, label);\n      },\n\n    /**\n      `finally` will be invoked regardless of the promise's fate just as native\n      try/catch/finally behaves\n\n      Synchronous example:\n\n      ```js\n      findAuthor() {\n        if (Math.random() > 0.5) {\n          throw new Error();\n        }\n        return new Author();\n      }\n\n      try {\n        return findAuthor(); // succeed or fail\n      } catch(error) {\n        return findOtherAuther();\n      } finally {\n        // always runs\n        // doesn't affect the return value\n      }\n      ```\n\n      Asynchronous example:\n\n      ```js\n      findAuthor().catch(function(reason){\n        return findOtherAuther();\n      }).finally(function(){\n        // author was either found, or not\n      });\n      ```\n\n      @method finally\n      @param {Function} callback\n      @param {String} label optional string for labeling the promise.\n      Useful for tooling.\n      @return {Promise}\n    */\n      'finally': function(callback, label) {\n        var promise = this;\n        var constructor = promise.constructor;\n\n        return promise.then(function(value) {\n          return constructor.resolve(callback()).then(function(){\n            return value;\n          });\n        }, function(reason) {\n          return constructor.resolve(callback()).then(function(){\n            throw reason;\n          });\n        }, label);\n      }\n    };\n\n    function lib$rsvp$all$settled$$AllSettled(Constructor, entries, label) {\n      this._superConstructor(Constructor, entries, false /* don't abort on reject */, label);\n    }\n\n    lib$rsvp$all$settled$$AllSettled.prototype = lib$rsvp$utils$$o_create(lib$rsvp$enumerator$$default.prototype);\n    lib$rsvp$all$settled$$AllSettled.prototype._superConstructor = lib$rsvp$enumerator$$default;\n    lib$rsvp$all$settled$$AllSettled.prototype._makeResult = lib$rsvp$enumerator$$makeSettledResult;\n    lib$rsvp$all$settled$$AllSettled.prototype._validationError = function() {\n      return new Error('allSettled must be called with an array');\n    };\n\n    function lib$rsvp$all$settled$$allSettled(entries, label) {\n      return new lib$rsvp$all$settled$$AllSettled(lib$rsvp$promise$$default, entries, label).promise;\n    }\n    var lib$rsvp$all$settled$$default = lib$rsvp$all$settled$$allSettled;\n    function lib$rsvp$all$$all(array, label) {\n      return lib$rsvp$promise$$default.all(array, label);\n    }\n    var lib$rsvp$all$$default = lib$rsvp$all$$all;\n    var lib$rsvp$asap$$len = 0;\n    var lib$rsvp$asap$$toString = {}.toString;\n    var lib$rsvp$asap$$vertxNext;\n    function lib$rsvp$asap$$asap(callback, arg) {\n      lib$rsvp$asap$$queue[lib$rsvp$asap$$len] = callback;\n      lib$rsvp$asap$$queue[lib$rsvp$asap$$len + 1] = arg;\n      lib$rsvp$asap$$len += 2;\n      if (lib$rsvp$asap$$len === 2) {\n        // If len is 1, that means that we need to schedule an async flush.\n        // If additional callbacks are queued before the queue is flushed, they\n        // will be processed by this flush that we are scheduling.\n        lib$rsvp$asap$$scheduleFlush();\n      }\n    }\n\n    var lib$rsvp$asap$$default = lib$rsvp$asap$$asap;\n\n    var lib$rsvp$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;\n    var lib$rsvp$asap$$browserGlobal = lib$rsvp$asap$$browserWindow || {};\n    var lib$rsvp$asap$$BrowserMutationObserver = lib$rsvp$asap$$browserGlobal.MutationObserver || lib$rsvp$asap$$browserGlobal.WebKitMutationObserver;\n    var lib$rsvp$asap$$isNode = typeof self === 'undefined' &&\n      typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n    // test for web worker but not in IE10\n    var lib$rsvp$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&\n      typeof importScripts !== 'undefined' &&\n      typeof MessageChannel !== 'undefined';\n\n    // node\n    function lib$rsvp$asap$$useNextTick() {\n      var nextTick = process.nextTick;\n      // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n      // setImmediate should be used instead instead\n      var version = process.versions.node.match(/^(?:(\\d+)\\.)?(?:(\\d+)\\.)?(\\*|\\d+)$/);\n      if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {\n        nextTick = setImmediate;\n      }\n      return function() {\n        nextTick(lib$rsvp$asap$$flush);\n      };\n    }\n\n    // vertx\n    function lib$rsvp$asap$$useVertxTimer() {\n      return function() {\n        lib$rsvp$asap$$vertxNext(lib$rsvp$asap$$flush);\n      };\n    }\n\n    function lib$rsvp$asap$$useMutationObserver() {\n      var iterations = 0;\n      var observer = new lib$rsvp$asap$$BrowserMutationObserver(lib$rsvp$asap$$flush);\n      var node = document.createTextNode('');\n      observer.observe(node, { characterData: true });\n\n      return function() {\n        node.data = (iterations = ++iterations % 2);\n      };\n    }\n\n    // web worker\n    function lib$rsvp$asap$$useMessageChannel() {\n      var channel = new MessageChannel();\n      channel.port1.onmessage = lib$rsvp$asap$$flush;\n      return function () {\n        channel.port2.postMessage(0);\n      };\n    }\n\n    function lib$rsvp$asap$$useSetTimeout() {\n      return function() {\n        setTimeout(lib$rsvp$asap$$flush, 1);\n      };\n    }\n\n    var lib$rsvp$asap$$queue = new Array(1000);\n    function lib$rsvp$asap$$flush() {\n      for (var i = 0; i < lib$rsvp$asap$$len; i+=2) {\n        var callback = lib$rsvp$asap$$queue[i];\n        var arg = lib$rsvp$asap$$queue[i+1];\n\n        callback(arg);\n\n        lib$rsvp$asap$$queue[i] = undefined;\n        lib$rsvp$asap$$queue[i+1] = undefined;\n      }\n\n      lib$rsvp$asap$$len = 0;\n    }\n\n    function lib$rsvp$asap$$attemptVertex() {\n      try {\n        var r = require;\n        var vertx = r('vertx');\n        lib$rsvp$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;\n        return lib$rsvp$asap$$useVertxTimer();\n      } catch(e) {\n        return lib$rsvp$asap$$useSetTimeout();\n      }\n    }\n\n    var lib$rsvp$asap$$scheduleFlush;\n    // Decide what async method to use to triggering processing of queued callbacks:\n    if (lib$rsvp$asap$$isNode) {\n      lib$rsvp$asap$$scheduleFlush = lib$rsvp$asap$$useNextTick();\n    } else if (lib$rsvp$asap$$BrowserMutationObserver) {\n      lib$rsvp$asap$$scheduleFlush = lib$rsvp$asap$$useMutationObserver();\n    } else if (lib$rsvp$asap$$isWorker) {\n      lib$rsvp$asap$$scheduleFlush = lib$rsvp$asap$$useMessageChannel();\n    } else if (lib$rsvp$asap$$browserWindow === undefined && typeof require === 'function') {\n      lib$rsvp$asap$$scheduleFlush = lib$rsvp$asap$$attemptVertex();\n    } else {\n      lib$rsvp$asap$$scheduleFlush = lib$rsvp$asap$$useSetTimeout();\n    }\n    function lib$rsvp$defer$$defer(label) {\n      var deferred = {};\n\n      deferred['promise'] = new lib$rsvp$promise$$default(function(resolve, reject) {\n        deferred['resolve'] = resolve;\n        deferred['reject'] = reject;\n      }, label);\n\n      return deferred;\n    }\n    var lib$rsvp$defer$$default = lib$rsvp$defer$$defer;\n    function lib$rsvp$filter$$filter(promises, filterFn, label) {\n      return lib$rsvp$promise$$default.all(promises, label).then(function(values) {\n        if (!lib$rsvp$utils$$isFunction(filterFn)) {\n          throw new TypeError(\"You must pass a function as filter's second argument.\");\n        }\n\n        var length = values.length;\n        var filtered = new Array(length);\n\n        for (var i = 0; i < length; i++) {\n          filtered[i] = filterFn(values[i]);\n        }\n\n        return lib$rsvp$promise$$default.all(filtered, label).then(function(filtered) {\n          var results = new Array(length);\n          var newLength = 0;\n\n          for (var i = 0; i < length; i++) {\n            if (filtered[i]) {\n              results[newLength] = values[i];\n              newLength++;\n            }\n          }\n\n          results.length = newLength;\n\n          return results;\n        });\n      });\n    }\n    var lib$rsvp$filter$$default = lib$rsvp$filter$$filter;\n\n    function lib$rsvp$promise$hash$$PromiseHash(Constructor, object, label) {\n      this._superConstructor(Constructor, object, true, label);\n    }\n\n    var lib$rsvp$promise$hash$$default = lib$rsvp$promise$hash$$PromiseHash;\n\n    lib$rsvp$promise$hash$$PromiseHash.prototype = lib$rsvp$utils$$o_create(lib$rsvp$enumerator$$default.prototype);\n    lib$rsvp$promise$hash$$PromiseHash.prototype._superConstructor = lib$rsvp$enumerator$$default;\n    lib$rsvp$promise$hash$$PromiseHash.prototype._init = function() {\n      this._result = {};\n    };\n\n    lib$rsvp$promise$hash$$PromiseHash.prototype._validateInput = function(input) {\n      return input && typeof input === 'object';\n    };\n\n    lib$rsvp$promise$hash$$PromiseHash.prototype._validationError = function() {\n      return new Error('Promise.hash must be called with an object');\n    };\n\n    lib$rsvp$promise$hash$$PromiseHash.prototype._enumerate = function() {\n      var enumerator = this;\n      var promise    = enumerator.promise;\n      var input      = enumerator._input;\n      var results    = [];\n\n      for (var key in input) {\n        if (promise._state === lib$rsvp$$internal$$PENDING && Object.prototype.hasOwnProperty.call(input, key)) {\n          results.push({\n            position: key,\n            entry: input[key]\n          });\n        }\n      }\n\n      var length = results.length;\n      enumerator._remaining = length;\n      var result;\n\n      for (var i = 0; promise._state === lib$rsvp$$internal$$PENDING && i < length; i++) {\n        result = results[i];\n        enumerator._eachEntry(result.entry, result.position);\n      }\n    };\n\n    function lib$rsvp$hash$settled$$HashSettled(Constructor, object, label) {\n      this._superConstructor(Constructor, object, false, label);\n    }\n\n    lib$rsvp$hash$settled$$HashSettled.prototype = lib$rsvp$utils$$o_create(lib$rsvp$promise$hash$$default.prototype);\n    lib$rsvp$hash$settled$$HashSettled.prototype._superConstructor = lib$rsvp$enumerator$$default;\n    lib$rsvp$hash$settled$$HashSettled.prototype._makeResult = lib$rsvp$enumerator$$makeSettledResult;\n\n    lib$rsvp$hash$settled$$HashSettled.prototype._validationError = function() {\n      return new Error('hashSettled must be called with an object');\n    };\n\n    function lib$rsvp$hash$settled$$hashSettled(object, label) {\n      return new lib$rsvp$hash$settled$$HashSettled(lib$rsvp$promise$$default, object, label).promise;\n    }\n    var lib$rsvp$hash$settled$$default = lib$rsvp$hash$settled$$hashSettled;\n    function lib$rsvp$hash$$hash(object, label) {\n      return new lib$rsvp$promise$hash$$default(lib$rsvp$promise$$default, object, label).promise;\n    }\n    var lib$rsvp$hash$$default = lib$rsvp$hash$$hash;\n    function lib$rsvp$map$$map(promises, mapFn, label) {\n      return lib$rsvp$promise$$default.all(promises, label).then(function(values) {\n        if (!lib$rsvp$utils$$isFunction(mapFn)) {\n          throw new TypeError(\"You must pass a function as map's second argument.\");\n        }\n\n        var length = values.length;\n        var results = new Array(length);\n\n        for (var i = 0; i < length; i++) {\n          results[i] = mapFn(values[i]);\n        }\n\n        return lib$rsvp$promise$$default.all(results, label);\n      });\n    }\n    var lib$rsvp$map$$default = lib$rsvp$map$$map;\n\n    function lib$rsvp$node$$Result() {\n      this.value = undefined;\n    }\n\n    var lib$rsvp$node$$ERROR = new lib$rsvp$node$$Result();\n    var lib$rsvp$node$$GET_THEN_ERROR = new lib$rsvp$node$$Result();\n\n    function lib$rsvp$node$$getThen(obj) {\n      try {\n       return obj.then;\n      } catch(error) {\n        lib$rsvp$node$$ERROR.value= error;\n        return lib$rsvp$node$$ERROR;\n      }\n    }\n\n\n    function lib$rsvp$node$$tryApply(f, s, a) {\n      try {\n        f.apply(s, a);\n      } catch(error) {\n        lib$rsvp$node$$ERROR.value = error;\n        return lib$rsvp$node$$ERROR;\n      }\n    }\n\n    function lib$rsvp$node$$makeObject(_, argumentNames) {\n      var obj = {};\n      var name;\n      var i;\n      var length = _.length;\n      var args = new Array(length);\n\n      for (var x = 0; x < length; x++) {\n        args[x] = _[x];\n      }\n\n      for (i = 0; i < argumentNames.length; i++) {\n        name = argumentNames[i];\n        obj[name] = args[i + 1];\n      }\n\n      return obj;\n    }\n\n    function lib$rsvp$node$$arrayResult(_) {\n      var length = _.length;\n      var args = new Array(length - 1);\n\n      for (var i = 1; i < length; i++) {\n        args[i - 1] = _[i];\n      }\n\n      return args;\n    }\n\n    function lib$rsvp$node$$wrapThenable(then, promise) {\n      return {\n        then: function(onFulFillment, onRejection) {\n          return then.call(promise, onFulFillment, onRejection);\n        }\n      };\n    }\n\n    function lib$rsvp$node$$denodeify(nodeFunc, options) {\n      var fn = function() {\n        var self = this;\n        var l = arguments.length;\n        var args = new Array(l + 1);\n        var arg;\n        var promiseInput = false;\n\n        for (var i = 0; i < l; ++i) {\n          arg = arguments[i];\n\n          if (!promiseInput) {\n            // TODO: clean this up\n            promiseInput = lib$rsvp$node$$needsPromiseInput(arg);\n            if (promiseInput === lib$rsvp$node$$GET_THEN_ERROR) {\n              var p = new lib$rsvp$promise$$default(lib$rsvp$$internal$$noop);\n              lib$rsvp$$internal$$reject(p, lib$rsvp$node$$GET_THEN_ERROR.value);\n              return p;\n            } else if (promiseInput && promiseInput !== true) {\n              arg = lib$rsvp$node$$wrapThenable(promiseInput, arg);\n            }\n          }\n          args[i] = arg;\n        }\n\n        var promise = new lib$rsvp$promise$$default(lib$rsvp$$internal$$noop);\n\n        args[l] = function(err, val) {\n          if (err)\n            lib$rsvp$$internal$$reject(promise, err);\n          else if (options === undefined)\n            lib$rsvp$$internal$$resolve(promise, val);\n          else if (options === true)\n            lib$rsvp$$internal$$resolve(promise, lib$rsvp$node$$arrayResult(arguments));\n          else if (lib$rsvp$utils$$isArray(options))\n            lib$rsvp$$internal$$resolve(promise, lib$rsvp$node$$makeObject(arguments, options));\n          else\n            lib$rsvp$$internal$$resolve(promise, val);\n        };\n\n        if (promiseInput) {\n          return lib$rsvp$node$$handlePromiseInput(promise, args, nodeFunc, self);\n        } else {\n          return lib$rsvp$node$$handleValueInput(promise, args, nodeFunc, self);\n        }\n      };\n\n      fn.__proto__ = nodeFunc;\n\n      return fn;\n    }\n\n    var lib$rsvp$node$$default = lib$rsvp$node$$denodeify;\n\n    function lib$rsvp$node$$handleValueInput(promise, args, nodeFunc, self) {\n      var result = lib$rsvp$node$$tryApply(nodeFunc, self, args);\n      if (result === lib$rsvp$node$$ERROR) {\n        lib$rsvp$$internal$$reject(promise, result.value);\n      }\n      return promise;\n    }\n\n    function lib$rsvp$node$$handlePromiseInput(promise, args, nodeFunc, self){\n      return lib$rsvp$promise$$default.all(args).then(function(args){\n        var result = lib$rsvp$node$$tryApply(nodeFunc, self, args);\n        if (result === lib$rsvp$node$$ERROR) {\n          lib$rsvp$$internal$$reject(promise, result.value);\n        }\n        return promise;\n      });\n    }\n\n    function lib$rsvp$node$$needsPromiseInput(arg) {\n      if (arg && typeof arg === 'object') {\n        if (arg.constructor === lib$rsvp$promise$$default) {\n          return true;\n        } else {\n          return lib$rsvp$node$$getThen(arg);\n        }\n      } else {\n        return false;\n      }\n    }\n    var lib$rsvp$platform$$platform;\n\n    /* global self */\n    if (typeof self === 'object') {\n      lib$rsvp$platform$$platform = self;\n\n    /* global global */\n    } else if (typeof global === 'object') {\n      lib$rsvp$platform$$platform = global;\n    } else {\n      throw new Error('no global: `self` or `global` found');\n    }\n\n    var lib$rsvp$platform$$default = lib$rsvp$platform$$platform;\n    function lib$rsvp$race$$race(array, label) {\n      return lib$rsvp$promise$$default.race(array, label);\n    }\n    var lib$rsvp$race$$default = lib$rsvp$race$$race;\n    function lib$rsvp$reject$$reject(reason, label) {\n      return lib$rsvp$promise$$default.reject(reason, label);\n    }\n    var lib$rsvp$reject$$default = lib$rsvp$reject$$reject;\n    function lib$rsvp$resolve$$resolve(value, label) {\n      return lib$rsvp$promise$$default.resolve(value, label);\n    }\n    var lib$rsvp$resolve$$default = lib$rsvp$resolve$$resolve;\n    function lib$rsvp$rethrow$$rethrow(reason) {\n      setTimeout(function() {\n        throw reason;\n      });\n      throw reason;\n    }\n    var lib$rsvp$rethrow$$default = lib$rsvp$rethrow$$rethrow;\n\n    // defaults\n    lib$rsvp$config$$config.async = lib$rsvp$asap$$default;\n    lib$rsvp$config$$config.after = function(cb) {\n      setTimeout(cb, 0);\n    };\n    var lib$rsvp$$cast = lib$rsvp$resolve$$default;\n    function lib$rsvp$$async(callback, arg) {\n      lib$rsvp$config$$config.async(callback, arg);\n    }\n\n    function lib$rsvp$$on() {\n      lib$rsvp$config$$config['on'].apply(lib$rsvp$config$$config, arguments);\n    }\n\n    function lib$rsvp$$off() {\n      lib$rsvp$config$$config['off'].apply(lib$rsvp$config$$config, arguments);\n    }\n\n    // Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`\n    if (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {\n      var lib$rsvp$$callbacks = window['__PROMISE_INSTRUMENTATION__'];\n      lib$rsvp$config$$configure('instrument', true);\n      for (var lib$rsvp$$eventName in lib$rsvp$$callbacks) {\n        if (lib$rsvp$$callbacks.hasOwnProperty(lib$rsvp$$eventName)) {\n          lib$rsvp$$on(lib$rsvp$$eventName, lib$rsvp$$callbacks[lib$rsvp$$eventName]);\n        }\n      }\n    }\n\n    var lib$rsvp$umd$$RSVP = {\n      'race': lib$rsvp$race$$default,\n      'Promise': lib$rsvp$promise$$default,\n      'allSettled': lib$rsvp$all$settled$$default,\n      'hash': lib$rsvp$hash$$default,\n      'hashSettled': lib$rsvp$hash$settled$$default,\n      'denodeify': lib$rsvp$node$$default,\n      'on': lib$rsvp$$on,\n      'off': lib$rsvp$$off,\n      'map': lib$rsvp$map$$default,\n      'filter': lib$rsvp$filter$$default,\n      'resolve': lib$rsvp$resolve$$default,\n      'reject': lib$rsvp$reject$$default,\n      'all': lib$rsvp$all$$default,\n      'rethrow': lib$rsvp$rethrow$$default,\n      'defer': lib$rsvp$defer$$default,\n      'EventTarget': lib$rsvp$events$$default,\n      'configure': lib$rsvp$config$$configure,\n      'async': lib$rsvp$$async\n    };\n\n    /* global define:true module:true window: true */\n    if (typeof define === 'function' && define['amd']) {\n      define(function() { return lib$rsvp$umd$$RSVP; });\n    } else if (typeof module !== 'undefined' && module['exports']) {\n      module['exports'] = lib$rsvp$umd$$RSVP;\n    } else if (typeof lib$rsvp$platform$$default !== 'undefined') {\n      lib$rsvp$platform$$default['RSVP'] = lib$rsvp$umd$$RSVP;\n    }\n}).call(this);\n\n",
    "//     Underscore.js 1.8.3\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.3';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  var property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var getLength = property('length');\n  var isArrayLike = function(collection) {\n    var length = getLength(collection);\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given item (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\n    return _.indexOf(obj, item, fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = getLength(array); i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, getLength).length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = getLength(list); i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = getLength(array);\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createPredicateIndexFinder(1);\n  _.findLastIndex = createPredicateIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generator function to create the indexOf and lastIndexOf functions\n  function createIndexFinder(dir, predicateFind, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0, length = getLength(array);\n      if (typeof idx == 'number') {\n        if (dir > 0) {\n            i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if (sortedIndex && idx && length) {\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n      if (item !== item) {\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\n        return idx >= 0 ? idx + i : -1;\n      }\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n      return -1;\n    };\n  }\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (stop == null) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Creates an object that inherits from the given prototype object.\n  // If additional properties are provided then they will be added to the\n  // created object.\n  _.create = function(prototype, props) {\n    var result = baseCreate(prototype);\n    if (props) _.extendOwn(result, props);\n    return result;\n  };\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = property;\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of\n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n\n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n",
    "'use strict';\nvar Constants = {};\nConstants.DefaultTakeItemsCount = 50;\nConstants.ExpandExpressionName = 'Expand';\nConstants.ReturnAsFieldName = 'ReturnAs';\nConstants.FieldsExpressionName = 'Fields';\nConstants.SingleFieldExpressionName = 'SingleField';\nConstants.SortExpressionName = 'Sort';\nConstants.FilterExpressionName = 'Filter';\nConstants.SkipExpressionName = 'Skip';\nConstants.TakeExpressionName = 'Take';\nConstants.ParentRelationFieldName = 'ParentRelationField';\nConstants.IdFieldNameClient = 'Id';\nConstants.TargetTypeNameFieldName = 'TargetTypeName';\n\nmodule.exports = Constants;",
    "'use strict';\nvar Constants = require('./Constants');\n\n/**\n * A class that is used to get all required information in order to process a set of relations.\n * @param parent - An ExecutionNode instance used to supply the tree like data structure.\n * @param relationNode - The relation node used to created the ExecutionNode instance (ExecutionNode instance should contain one or many relations\n * if they can be combined for batch execution).\n * @constructor\n */\nvar ExecutionNode = function (parent, relationNode) {\n    var parentPath = '';\n    if (parent) {\n        parentPath = parent.path;\n    }\n    this.parent = parentPath;\n    this.relations = [relationNode.path];\n    this.name = relationNode.path;\n    this.targetTypeName = relationNode.targetTypeName;\n    this.canAddOtherRelations = !relationNode.filterExpression && !relationNode.sortExpression && !relationNode.take && !relationNode.skip;\n    this.children = [];\n    var path = '';\n    if (parentPath) {\n        path += parentPath + '.';\n    }\n    path += relationNode.targetTypeName;\n    this.path = path;\n};\n\n/**\n * Inserts a RelationNode to an ExecutionNode.\n * @param relation - A Relation instance.\n */\nExecutionNode.prototype.insertRelationNode = function (relation) {\n    this.relations.push(relation.path);\n};\n\n/**\n * Inserts a child node (which relations) depends from parent node result.\n * @param child - ExecutionNode instance representing child node.\n */\nExecutionNode.prototype.insertChildrenNode = function (child) {\n    this.children.push(child.name);\n};\n\n/**\n * Helper method that checks if some relations could be combined (for example have same TargetType).\n * @param relation\n * @returns {boolean}\n */\nExecutionNode.prototype.canCombineWithRelation = function (relation) {\n    if (!this.canAddOtherRelations) {\n        return false;\n    }\n\n    return this.targetTypeName === relation.targetTypeName && !relation.filterExpression && !relation.sortExpression && !relation.take && !relation.skip;\n};\n\n/** ExecutionTree\n * Class that allows the creation of an execution tree from a relationTree. Used to process all queries (master and child) in a correct order.\n * @param relationTree - An instance of relation tree.\n * @constructor\n */\nvar ExecutionTree = function (relationTree) {\n    this._relationTree = relationTree;\n    this._map = {};\n};\n\n/**\n * Adds execution node to the ExecutionTree.\n * @param executionNode\n */\nExecutionTree.prototype.addExecutionNode = function (executionNode) {\n    this._map[executionNode.name] = executionNode;\n};\n\n/**\n * Finds the ExecutionNode which contains the requested relation.\n * @param relation - A Relation instance.\n * @returns {*}\n */\nExecutionTree.prototype.getExecutionNodeOfRelation = function (relation) {\n    for (var execNode in this._map) {\n        if (this._map.hasOwnProperty(execNode)) {\n            if (this._map[execNode].relations.indexOf(relation) > -1) {\n                return this._map[execNode];\n            }\n        }\n    }\n    return null;\n};\n\n/**\n * Finds a RelationNode within the RelationTree.\n * @param relation - String that represents the relation within the RelationTree (for example: Activities.Likes.Role).\n * @returns {*}\n */\nExecutionTree.prototype.getRelationNode = function (relation) {\n    if (relation) {\n        return this._relationTree[relation] || null;\n    } else {\n        return null;\n    }\n};\n\nExecutionTree.prototype.getRootRelationNode = function () {\n    return this._relationTree[this._relationTree.$root] || null;\n};\n/**\n * Builds the ExecutionTree from a RelationTree.\n */\nExecutionTree.prototype.build = function () {\n    //build beginning from the root\n    var relationRoot = this.getRelationNode(this._relationTree.$root);\n    //Setup the root of the execution tree.\n    var rootExecutionNode = new ExecutionNode(null, relationRoot);//no parent node\n    this.addExecutionNode(rootExecutionNode);\n    this.buildInternal(relationRoot);\n};\n\n/**\n * Traverse the relation tree and build the execution tree.\n * @param relationRoot - The root node of the RelationTree.\n */\nExecutionTree.prototype.buildInternal = function (relationRoot) {\n    relationRoot.children.forEach(function (child) {\n        var childRelationNode = this.getRelationNode(child);\n        this.insertRelationNodeInExecutionTree(childRelationNode);\n        this.buildInternal(childRelationNode);\n    }, this);\n};\n\n/**\n * Inserts a relation node within the execution tree (based on its dependencies).\n * @param relation - The relation that will be inserted.\n */\nExecutionTree.prototype.insertRelationNodeInExecutionTree = function (relation) {\n    var rootExecutionNode = this.getExecutionNodeOfRelation(relation.parent);\n    var childToCombine = this.tryGetChildNodeToCombine(rootExecutionNode, relation);\n    if (childToCombine) {//if there is a child that we combine the relation\n        childToCombine.insertRelationNode(relation);\n    } else {\n        var newExecutionNode = new ExecutionNode(rootExecutionNode, relation);//create a separate execution node that will host the relation\n        rootExecutionNode.insertChildrenNode(newExecutionNode);\n        this.addExecutionNode(newExecutionNode);\n    }\n};\n\n/**\n * Tries to find an ExecutionNode which could be combined with a relation.\n * @param rootExecutionNode - The root node of the ExecutionTree.\n * @param relation - Relation that will be added to the ExecutionTree.\n * @returns {*}\n */\nExecutionTree.prototype.tryGetChildNodeToCombine = function (rootExecutionNode, relation) {\n    if (rootExecutionNode.canCombineWithRelation(relation)) {\n        return rootExecutionNode;\n    }\n    var children = rootExecutionNode.children;\n    for (var i = 0; i < children.length; i++) {\n        var child = this._map[children[i]];\n        var childToCombine = this.tryGetChildNodeToCombine(child, relation);\n        if (childToCombine) {\n            return childToCombine;\n        }\n    }\n    return null;\n};\n\n/**\n * Gets the filter expression from all relations inside an ExecutionNode.\n * @param executionNode - The ExecutionNode instance.\n * @returns {{}}\n */\nExecutionTree.prototype.getFilterFromExecutionNode = function (executionNode, includeArrays) {\n    var filter = {};\n    var subRelationsFilter = [];\n    for (var i = 0; i < executionNode.relations.length; i++) {\n        var innerFilter = this.getFilterFromSingleRelation(this._relationTree[executionNode.relations[i]], includeArrays);\n        if (innerFilter) {\n            subRelationsFilter.push(innerFilter);\n        }\n    }\n\n    if (subRelationsFilter.length > 1) {\n        filter.$or = subRelationsFilter;\n    } else if (subRelationsFilter.length > 0) {\n        filter = subRelationsFilter[0];\n    } else {\n        filter = null;\n    }\n    return filter;\n};\n\n/**\n * Gets filter expression from a single relation. Traverse the relation tree in order to get the \"Id\"s from the result of parent relation\n * along with user defined filters.\n * @param relation - A Relation instance.\n * @returns {*}\n */\nExecutionTree.prototype.getFilterFromSingleRelation = function (relation, includeArrays) {\n    var userDefinedFilter = relation.filterExpression;\n    var parentRelationFilter = {};\n    var parentRelationIds = this.getRelationFieldValues(relation, includeArrays);\n    var parentRelationFieldName = (relation.isInvertedRelation ? relation.relationField : Constants.IdFieldNameClient);\n\n    if (parentRelationIds.length > 0) {\n        parentRelationFilter[parentRelationFieldName] = {'$in': parentRelationIds};\n    } else {\n        return null;\n    }\n\n    if (userDefinedFilter !== undefined) {\n        var filters = [];\n        filters.push(parentRelationFilter);\n        filters.push(userDefinedFilter);\n        return {'$and': filters};\n    } else {\n        return parentRelationFilter;\n    }\n};\n\n/**\n * Get relation field values of parent relation in order to construct a proper filter (to create a relation).\n * @param relation - A relation instance which will get the filter.\n * @param includeArrays - Whether to include array valus of the parent items when calculating the items that will be expanded on the current level.\n * @returns {Array} - An array of relation field values.\n */\nExecutionTree.prototype.getRelationFieldValues = function (relation, includeArrays) {\n    var parentRelationIds = [];\n    var parentRelation = this._relationTree[relation.parent];\n    // parentRelationResult actually is an Activity or Array of Activities\n    var parentRelationResult = Array.isArray(parentRelation.result) ? parentRelation.result : [parentRelation.result];\n    if (relation.isInvertedRelation) {\n        for (var p = 0; p < parentRelationResult.length; p++) {\n            parentRelationIds.push(parentRelationResult[p][relation.parentRelationField]);\n        }\n    } else {\n        // all comments are related to expand of type content type Activities expand: {\"Likes\": true}\n        if (parentRelation && parentRelation.result) {\n            relation.parentRelationIds = relation.parentRelationIds || {};\n            for (var i = 0; i < parentRelationResult.length; i++) {\n                // itemFromParentRelation is single Activity\n                var itemFromParentRelation = parentRelationResult[i];\n\n                // parentRelationFieldValue is Activity.Likes\n                var parentRelationFieldValue = itemFromParentRelation[relation.relationField];\n                if (Array.isArray(parentRelationFieldValue)) {\n                    relation.hasArrayValues = true;\n                    if (includeArrays) {\n                        for (var j = 0; j < parentRelationFieldValue.length; j++) {\n                            // itemToExpandId is current value in Activity.Likes array or just a single \"Id\"\n                            var itemToExpandId = parentRelationFieldValue[j];\n                            if(itemToExpandId !== undefined && itemToExpandId !== null) {\n                                parentRelationIds.push(itemToExpandId);\n                                // we set any value just to create a map of Ids\n                                relation.parentRelationIds[itemToExpandId] = 1;\n                            }\n                        }\n                    }\n                } else {\n                    if(parentRelationFieldValue !== undefined && parentRelationFieldValue !== null) {\n                        parentRelationIds.push(parentRelationFieldValue);\n                        relation.parentRelationIds[parentRelationFieldValue] = 1;\n                    }\n                }\n            }\n        }\n    }\n\n    return parentRelationIds;\n};\n\nmodule.exports = ExecutionTree;\n",
    "'use strict';\nfunction ExpandError(message) {\n    this.name = 'ExpandError';\n    this.message = message;\n    this.stack = (new Error()).stack;\n}\nExpandError.prototype = new Error;\nmodule.exports = ExpandError;",
    "'use strict';\nvar async = require('async');\nvar RelationTreeBuilder = require('./RelationTreeBuilder');\nvar ExecutionTree = require('./ExecutionTree');\nvar Constants = require('./Constants');\nvar ExpandError = require('./ExpandError');\n\nfunction Processor(options) {\n    this._executionNodeFunction = options.executionNodeFunction;\n    this._metadataProviderFunction = options.metadataProviderFunction;\n}\n\nProcessor.prototype._getExecutionTreeRoot = function (executionTree) {\n    var executionTreeRoot = null;\n    for (var exNode in executionTree) {\n        if (executionTree.hasOwnProperty(exNode)) {\n            if (executionTree[exNode].parent === '') {\n                executionTreeRoot = executionTree[exNode];\n                break;\n            }\n        }\n    }\n    return executionTreeRoot;\n};\n\nProcessor.prototype._createExecuteNodeExecutor = function (relationsTree, executionTree, executionNode, expandContext) {\n    var self = this;\n    var relationsTreeMap = relationsTree.map;\n    return function (done) {\n        var relationNode = executionTree.getRelationNode(executionNode.relations[0]);//get the relation node for the only relation of the execution node.\n        var parentRelationNode = executionTree.getRelationNode(relationNode.parent);\n        var includeArrays = !(parentRelationNode.parent && parentRelationNode.hasArrayValues); //only expand array fields if the parent relation is not an array. This means that if we have expanded a Likes (multiple to Users), we won't expand any array relations that are nested in it such as the UserComments (multiple relation to Comments).\n        var filter = executionTree.getFilterFromExecutionNode(executionNode, includeArrays);\n\n        var errorMessage = relationsTree.validateSingleRelation(relationNode);\n        if (errorMessage) {\n            return done(new ExpandError(errorMessage));\n        }\n\n        // if we have such options executionNode should have only one relation.\n        var node = {};\n        node.select = relationNode.fieldsExpression;\n        node.sort = relationNode.sortExpression;\n        node.skip = relationNode.skip;\n        node.take = relationNode.take;\n        node.filter = filter;\n        node.targetTypeName = relationNode.targetTypeName;\n\n        self._executionNodeFunction.call(null, node, expandContext, function onProcessExecutionNode(err, result) {\n            if (err) {\n                return done(err);\n            }\n\n            for (var i = 0; i < executionNode.relations.length; i++) {\n                var childRelation = relationsTreeMap[executionNode.relations[i]];\n                childRelation.result = self._extractResultForRelation(relationsTreeMap[executionNode.relations[i]], result);\n            }\n            executionNode.result = childRelation.result;\n            var arr = [];\n            for (var j = 0; j < executionNode.children.length; j++) {\n                var executionTreeMap = executionTree._map;\n                arr.push(self._createExecuteNodeExecutor(relationsTree, executionTree, executionTreeMap[executionNode.children[j]], expandContext));\n            }\n            async.parallel(arr, done);\n        });\n    };\n};\n\nProcessor.prototype._getSingleResult = function (relationsTree, relation, singleObject) {\n    if (!singleObject) {\n        return null;\n    }\n\n    var childRelation;\n    var childItem;\n\n    // if relation has singleFieldName option we just replace the parent id with a single value\n    if (relation.singleFieldName) {\n        if (relation.children && relation.children.length > 0) {\n            childRelation = relationsTree[relation.children[0]];\n            childItem = this._getObjectByIdFromArray(childRelation.result, singleObject[relation.singleFieldName]);\n            return this._getSingleResult(relationsTree, childRelation, childItem);\n        }\n        return singleObject[relation.singleFieldName];\n    }\n\n    var result = {};\n    var passedProperties = {};\n\n    if (relation.children && relation.children.length > 0) {\n        for (var j = 0; j < relation.children.length; j++) {\n            childRelation = relationsTree[relation.children[j]];\n            var childRelationField = childRelation.relationField;\n            var userDefinedRelName = childRelation.userDefinedName;\n            if (!childRelation.isInvertedRelation) {\n                passedProperties[childRelationField] = 1;\n            }\n\n            var innerRelationResult = childRelation.result;\n\n            if (childRelation.isInvertedRelation) {\n                for (var k = 0; k < innerRelationResult.length; k++) {\n                    this._addSingleResultToParentArray(relationsTree, childRelation, innerRelationResult[k], result, userDefinedRelName);\n                }\n            } else {\n                result[userDefinedRelName] = childRelation.isArray() ? [] : null;\n\n                if (singleObject[childRelationField]) {\n                    if (Array.isArray(singleObject[childRelationField])) {\n                        if (childRelation.sortExpression) {\n                            // if there is a sorting we replace items using order of the query result\n                            for (var p = 0; p < innerRelationResult.length; p++) {\n                                if (singleObject[childRelationField].indexOf(innerRelationResult[p].Id) > -1) {\n                                    childItem = innerRelationResult[p];\n                                    this._addSingleResultToParentArray(relationsTree, childRelation, childItem, result, userDefinedRelName);\n                                }\n                            }\n                        } else {\n                            // we just replace items getting them by id which we have\n                            for (var i = 0; i < singleObject[childRelationField].length; i++) {\n                                childItem = this._getObjectByIdFromArray(innerRelationResult, singleObject[childRelationField][i]);\n                                this._addSingleResultToParentArray(relationsTree, childRelation, childItem, result, userDefinedRelName);\n                            }\n                        }\n                    } else {\n                        childItem = this._getObjectByIdFromArray(innerRelationResult, singleObject[childRelationField]);\n                        result[userDefinedRelName] = this._getSingleResult(relationsTree, childRelation, childItem);\n                    }\n                }\n            }\n        }\n    }\n\n    // add all other fields to the result (except the relation fields which we have already replaced).\n    for (var prop in singleObject) {\n        var propertyShouldBeAddedToResult = singleObject.hasOwnProperty(prop) && !passedProperties[prop] &&\n            this._fieldExistInFieldsExpression(prop, relation.originalFieldsExpression);\n        if (propertyShouldBeAddedToResult) {\n            result[prop] = singleObject[prop];\n        }\n    }\n\n    return result;\n};\n\nProcessor.prototype._addSingleResultToParentArray = function (relationsTree, childRelation, childItem, result, userDefinedRelName) {\n    var singleResult = this._getSingleResult(relationsTree, childRelation, childItem);\n    result[userDefinedRelName] = result[userDefinedRelName] || [];\n    if (singleResult) {\n        result[userDefinedRelName].push(singleResult);\n    }\n};\n\n/**\n * Checks if a field will be returned via given fields expression.\n * @param field - The name of the field.\n * @param fieldsExpression - The Fields expression which is checked.\n * @returns {*}\n */\nProcessor.prototype._fieldExistInFieldsExpression = function (field, fieldsExpression) {\n    if (fieldsExpression === undefined || Object.keys(fieldsExpression).length === 0) {\n        return true;\n    }\n\n    if (field === Constants.IdFieldNameClient) {\n        if (fieldsExpression[field] === undefined) {\n            return true;\n        }\n        return fieldsExpression[field];\n    }\n\n    var isExclusive = RelationTreeBuilder.getIsFieldsExpressionExclusive(fieldsExpression);\n\n    if (isExclusive === undefined) {\n        return true;\n    }\n\n    if (isExclusive) {\n        return !fieldsExpression.hasOwnProperty(field);\n    } else {\n        return fieldsExpression.hasOwnProperty(field);\n    }\n};\n\n/**\n * Extracts the result for a single relation (in cases when ExecutionNode contains more than one relations).\n * @param relation - The relation object.\n * @param queryResult - Result of the combined query.\n * @returns {Array}\n */\nProcessor.prototype._extractResultForRelation = function (relation, queryResult) {\n    var result = [];\n    for (var i = 0; i < queryResult.length; i++) {\n        if (relation.parentRelationIds) {\n            if (relation.parentRelationIds.hasOwnProperty(queryResult[i].Id)) {\n                result.push(queryResult[i]);\n            }\n        }\n        if (relation.isInvertedRelation) {\n            result.push(queryResult[i]);\n        }\n    }\n    return result;\n};\n\n/**\n * Gets an object with a given Id from Array.\n * @param array\n * @param id\n * @returns {*}\n */\nProcessor.prototype._getObjectByIdFromArray = function (array, id) {\n    if (array) {\n        for (var i = 0; i < array.length; i++) {\n            if (array[i].Id === id) {\n                return array[i];\n            }\n        }\n    }\n    return null;\n};\n\n/**\n * @public\n * @param expandExpression\n * @param mainTypeName\n * @param isArray\n * @param fieldsExpression\n * @param maxTakeValue\n * @param prepareContext\n * @param done\n */\nProcessor.prototype.prepare = function (expandExpression, mainTypeName, isArray, fieldsExpression, maxTakeValue, prepareContext, done) {\n    var rtb = new RelationTreeBuilder(expandExpression, mainTypeName, isArray, fieldsExpression, maxTakeValue, this._metadataProviderFunction, prepareContext);\n    rtb.build(function (err, map) {\n        var mainQueryFieldsExpression;\n        if (map) {\n            mainQueryFieldsExpression = map[map.$root].fieldsExpression;\n            var prepareResult = {\n                relationsTree: rtb,\n                mainQueryFieldsExpression: mainQueryFieldsExpression\n            }\n        }\n        done(err, prepareResult);\n    });\n};\n\n/**\n * @public\n * @param relationsTree\n * @param mainQueryResult\n * @param expandContext\n * @param done\n */\nProcessor.prototype.expand = function (relationsTree, mainQueryResult, expandContext, done) {\n    var relationsTreeMap = relationsTree.map;\n    var self = this;\n    var executionTree = new ExecutionTree(relationsTreeMap);\n    executionTree.build();\n    relationsTreeMap[relationsTreeMap.$root].result = mainQueryResult;\n    var executionTreeMap = executionTree._map;\n\n    var executionTreeRoot = this._getExecutionTreeRoot(executionTreeMap);\n\n    var maxQueriesCount = 20;\n    if (Object.keys(executionTreeMap).length > maxQueriesCount) {\n        done(new ExpandError('Expand expression results in more than ' + maxQueriesCount + ' inner queries!'));\n    }\n\n    if (executionTreeRoot) {\n        var execFuncs = [];\n        for (var i = 0; i < executionTreeRoot.children.length; i++) {\n            execFuncs.push(this._createExecuteNodeExecutor(relationsTree, executionTree, executionTreeMap[executionTreeRoot.children[i]], expandContext));\n        }\n        // execFuncs are functions created for every single execution note\n        // we execute them in async, since the result of the parent relation is used to get correct filter.\n        async.series(execFuncs, function onProcessExecutionTree(err) {\n            if (err) {\n                done(err);\n            } else {\n                var output;\n                var rootRelation = relationsTreeMap[relationsTreeMap.$root];\n                if (Array.isArray(mainQueryResult)) {\n                    output = [];\n                    for (var i = 0; i < mainQueryResult.length; i++) {\n                        var singleResult = self._getSingleResult(relationsTreeMap, rootRelation, mainQueryResult[i]);\n                        if (singleResult) {\n                            output.push(singleResult);\n                        }\n                    }\n                } else {\n                    output = self._getSingleResult(relationsTreeMap, rootRelation, mainQueryResult);\n                }\n                done(null, output);\n            }\n        });\n    }\n};\n\nProcessor.Constants = Constants;\n\nmodule.exports = Processor;\n",
    "'use strict';\nvar Constants = require('./Constants');\nvar _ = require('underscore');\nvar ExpandError = require('./ExpandError');\n\nfunction RelationNode(options) {\n    this.parent = options.parent;\n    this.relationField = options.relationField;\n    this.path = options.path || options.parent + '.' + options.relationField;\n    this.fieldsExpression = options.fieldsExpression || {};\n    this.targetTypeName = options.targetTypeName;\n    this.children = [];\n    this.isInvertedRelation = options.isInvertedRelation;\n    this.isArrayRoot = options.isArrayRoot; //used for validation of cases where various expand features are disabled for a GetAll scenario.\n    this.hasArrayValues = false;//set when we have executed the query. Used in validation scenarios where we do not have metadata about whether the relation is an array or not.\n\n    var expandExpression = options.expandExpression || {};\n\n    this.parentRelationField = expandExpression[Constants.ParentRelationFieldName] || Constants.IdFieldNameClient;\n    var relationField = this.isInvertedRelation ? this.path : this.relationField; //inverted relations appear with the full path - ContentType.Field - in the result when expanding.\n    this.userDefinedName = expandExpression[Constants.ReturnAsFieldName] || relationField;\n    _.extend(this.fieldsExpression, expandExpression[Constants.FieldsExpressionName]);\n    this.originalFieldsExpression = {};\n    _.extend(this.originalFieldsExpression, this.fieldsExpression);\n    this.singleFieldName = expandExpression[Constants.SingleFieldExpressionName];\n    this.filterExpression = expandExpression[Constants.FilterExpressionName];\n    this.sortExpression = expandExpression[Constants.SortExpressionName];\n    this.skip = expandExpression[Constants.SkipExpressionName];\n    this.take = this._getTakeLimit(expandExpression[Constants.TakeExpressionName], options.maxTakeValue);\n}\n\n\n/**\n * Gets the take limit depending on the application and the take value that the user has provided.\n * @param clientTakeValue\n * @param maxTakeValue\n * @returns {number}\n */\nRelationNode.prototype._getTakeLimit = function (clientTakeValue, maxTakeValue) {\n    maxTakeValue = maxTakeValue || Constants.DefaultTakeItemsCount;\n    if (clientTakeValue) {\n        if (clientTakeValue > maxTakeValue) {\n            throw new ExpandError('The maximum allowed take value when expanding relations is ' + maxTakeValue + '!');\n        }\n        return clientTakeValue;\n    } else {\n        return maxTakeValue;\n    }\n};\n\n/**\n * Anyone using the bs-expand-processor module can set whether the relation is a multiple relation in the prepare phase.\n * This will allow for certain restrictions to be enforced directly on the prepare phase instead of the execution phase.\n */\nRelationNode.prototype.setIsArrayFromMetadata = function () {\n    this.isArrayFromMetadata = true;\n};\n\nRelationNode.prototype.isArray = function () {\n    // We can find out if a relation is an array in the following cases:\n    // From metadata in the API Server.\n    // All inverted relations are array.\n    // Once values have been received we can find out. This is used for scenarios where we do not have metadata about the relation (offline storage in SDK).\n    return this.isArrayFromMetadata || this.isInvertedRelation || this.hasArrayValues;\n};\n\nmodule.exports = RelationNode;\n",
    "'use strict';\nvar RelationNode = require('./RelationNode');\nvar _ = require('underscore');\nvar Constants = require('./Constants');\nvar ExpandError = require('./ExpandError');\n\n//var relationFieldPropertyName = Constants.RelationExpressionName;\n\nvar possibleExpandOptions = [\n    Constants.ExpandExpressionName,\n    Constants.ReturnAsFieldName,\n    Constants.FieldsExpressionName,\n    Constants.SingleFieldExpressionName,\n    Constants.SortExpressionName,\n    Constants.FilterExpressionName,\n    Constants.SkipExpressionName,\n    Constants.TakeExpressionName,\n    Constants.ParentRelationFieldName,\n    Constants.TargetTypeNameFieldName\n];\n\n\n/**\n * A class used to parse Expand expression and build a corresponding relation tree.\n * In a process of creating the relation tree are performed several checks in order to force some limitations -\n * 50 items both for master and child queries and entire amount of all queries limited to 20.\n * Checks if the relation field given by the customer is valid (for example: user gives \"Like\" while the relation field is \"Likes\").\n * Checks for possible expand options.\n * @constructor\n */\nvar RelationTreeBuilder = function (expandExpression, mainTypeName, isArray, fieldsExpression, maxTakeValue, metadataProviderFunction, context) {\n    this.maxTakeValue = maxTakeValue;\n    this._metadataProviderFunction = metadataProviderFunction;\n    this.context = context;\n    this.expandExpression = this.processExpandExpression(expandExpression);\n    // mark the main query in order to avoid some duplication issues.\n    this.map = {};\n    this.map[mainTypeName] = new RelationNode({\n        targetTypeName: mainTypeName,\n        isArrayRoot: isArray,\n        fieldsExpression: fieldsExpression,\n        validated: true,\n        path: mainTypeName,\n        maxTakeValue: maxTakeValue\n    });\n    this.map[mainTypeName].originalFieldsExpression = {};\n    _.extend(this.map[mainTypeName].originalFieldsExpression, fieldsExpression);\n    this.map.$root = mainTypeName;\n};\n\n/**\n * Creates fully qualified expand expression from shorthand usages:\n * {\"Likes\": true} -> {\"Likes\": {\"ReturnAs\": \"Likes\"}}\n * {\"Likes\": \"LikesExpanded\"} -> {\"Likes\": {\"ReturnAs\": \"LikesExpanded\"}}\n * @param expandExpression\n * @returns {*}\n */\nRelationTreeBuilder.prototype.processExpandExpression = function (expandExpression) {\n    for (var property in expandExpression) {\n        if (expandExpression.hasOwnProperty(property)) {\n            if (typeof expandExpression[property] === 'boolean') {\n                expandExpression[property] = {};\n                expandExpression[property][Constants.ReturnAsFieldName] = property;\n            }\n            if (typeof expandExpression[property] === 'string') {\n                var relationField = expandExpression[property];\n                expandExpression[property] = {};\n                expandExpression[property][Constants.ReturnAsFieldName] = relationField;\n            }\n        }\n    }\n    return expandExpression;\n};\n\n/**\n * Builds the relation tree.\n * @param done\n */\nRelationTreeBuilder.prototype.build = function (done) {\n    try {\n        this.buildMapInternal(this.expandExpression, this.map.$root);\n    } catch (e) {\n        return done(e);\n    }\n    var self = this;\n    require('async').series([\n        this.configureRelationTree.bind(this),\n        this.validateRelationTree.bind(this)\n    ], function (err) {\n        done(err, self.map);\n    });\n};\n\n/**\n *\n * @param relationName - A path to the external relation collection (Comments.ActivityId)\n * @param expandExpression - The expand expression that contains all information about the relation\n * @param rootName - Name of the parent relation.\n * @returns {RelationNode}\n */\nRelationTreeBuilder.prototype.createInvertedRelation = function (relationName, expandExpression, rootName) {\n    var options = {};\n    var relationNameParts = relationName.split('.');\n    options.parent = rootName;\n    options.relationField = relationNameParts[1];\n    options.isInvertedRelation = true;\n    options.targetTypeName = relationNameParts[0];\n    options.expandExpression = expandExpression;\n    options.path = relationName;\n    options.maxTakeValue = this.maxTakeValue;\n    options.validated = false;\n\n    return new RelationNode(options);\n};\n\n/**\n * An internal method which parses the expand expression and produces a basic relation tree (only names and parent relations).\n * @param expandExpression - The expand expression which will be processed.\n * @param rootName - The name of the root relation (master query) usually the name of the requested content type (Activities).\n */\nRelationTreeBuilder.prototype.buildMapInternal = function (expandExpression, rootName) {\n    for (var relationName in expandExpression) {\n        if (expandExpression.hasOwnProperty(relationName)) {\n            var currentExpression = expandExpression[relationName];\n\n            for (var option in currentExpression) {\n                if (currentExpression.hasOwnProperty(option) && possibleExpandOptions.indexOf(option) === -1) {\n                    throw new ExpandError('\\\"' + option + '\\\"' + ' is not a valid option for Expand expression');\n                }\n            }\n\n            if (relationName.indexOf('.') > -1) {\n                var invertedRelation = this.createInvertedRelation(relationName, currentExpression, rootName);\n                this.map[invertedRelation.path] = invertedRelation;\n                this.map[invertedRelation.parent].children.push(invertedRelation.path);\n                // adds a field expression in the original fields expression in order to get the result for that field\n                RelationTreeBuilder.addFieldToFieldsExpression(this.map[invertedRelation.parent].originalFieldsExpression, invertedRelation.userDefinedName);\n\n                if (expandExpression[relationName][Constants.ExpandExpressionName]) {\n                    var processedExpandExpression = this.processExpandExpression(expandExpression[relationName][Constants.ExpandExpressionName]);\n                    this.buildMapInternal(processedExpandExpression, invertedRelation.path);\n                }\n            } else {\n                var options = {};\n                options.relationField = relationName;\n                options.parent = rootName;\n                options.expandExpression = currentExpression;\n                options.maxTakeValue = this.maxTakeValue;\n                options.targetTypeName = currentExpression[Constants.TargetTypeNameFieldName];\n                var relationNode = new RelationNode(options);\n                var parentNode = this.map[options.parent];\n                parentNode.children.push(relationNode.path);\n                this.map[relationNode.path] = relationNode;\n\n                if (currentExpression.hasOwnProperty(Constants.ExpandExpressionName)) {\n                    if (typeof(currentExpression[Constants.ExpandExpressionName]) === 'object') {\n                        this.buildMapInternal(this.processExpandExpression(currentExpression.Expand), relationNode.path);\n                    } else {\n                        throw new ExpandError(relationNode.path + '.Expand must be a valid expand expression!');\n                    }\n                }\n            }\n        }\n    }\n};\n\n/**\n * Adds additional metadata which is necessary to execute a query.\n * Name of the content type of the child relation get via relation field.\n * @param done\n */\nRelationTreeBuilder.prototype.configureRelationTree = function (done) {\n    if (this._metadataProviderFunction) {\n        var relationNames = [];\n        var self = this;\n\n        for (var rel in this.map) {\n            if (this.map.hasOwnProperty(rel)) {\n                if (this.map[rel].parent !== null) {\n                    relationNames.push(this.map[rel].relationField);\n                }\n            }\n        }\n\n        this._metadataProviderFunction(relationNames, this.map, this.context, function (err, result) {\n            done(err);\n        });\n    } else {\n        return done();\n    }\n};\n\n/**\n * Performs several checks like:\n * Validity of the relation field.\n * To not use filter or sorting expression within a \"GetByFilter\" scenario.\n * Does not allow to nest (expand multiple relation field) after a multiple relation.\n * Does not allow to use both \"Fields\" and \"SingleField\" options.\n * @param done\n * @returns {*}\n */\nRelationTreeBuilder.prototype.validateRelationTree = function (done) {\n    var errorMessage = '';\n    var EOL = '\\r\\n';\n    for (var relationPath in this.map) {\n        if (relationPath !== '$root' && this.map.hasOwnProperty(relationPath)) {\n            var relation = this.map[relationPath];\n            errorMessage += this.validateSingleRelation(relation);\n            this.configureFieldsExpressionsForRelation(relation);\n        }\n    }\n    if (errorMessage !== '') {\n        var finalErrorMessage = errorMessage.substr(0, errorMessage.lastIndexOf(EOL));\n        var error = new ExpandError(finalErrorMessage);\n        return done(error);\n    } else {\n        done();\n    }\n};\n\n/**\n * Add relation fields to parent relation fields expression if needed (otherwise relation cannot be established).\n * @param relation - A relation which will be configured.\n */\nRelationTreeBuilder.prototype.configureFieldsExpressionsForRelation = function (relation) {\n    if (relation.parent) {\n        var parentRelationFieldsExpression = this.map[relation.parent].fieldsExpression;\n        if (relation.isInvertedRelation) {\n            RelationTreeBuilder.addFieldToFieldsExpression(parentRelationFieldsExpression, relation.parentRelationField);\n        } else {\n            RelationTreeBuilder.addFieldToFieldsExpression(parentRelationFieldsExpression, relation.relationField);\n        }\n    }\n    if (relation.isInvertedRelation) {\n        RelationTreeBuilder.addFieldToFieldsExpression(relation.fieldsExpression, relation.relationField);\n    } else {\n        RelationTreeBuilder.addFieldToFieldsExpression(relation.fieldsExpression, Constants.IdFieldNameClient);\n    }\n    RelationTreeBuilder.adjustParentRelationFieldsExpression(this.map[relation.parent], relation);\n};\n\n/**\n * Validates a single relation for all build-in limitations.\n * @param relation - A relation which will be validated.\n * @returns {string} - Returns an error message with all errors or empty string if there is no errors.\n */\nRelationTreeBuilder.prototype.validateSingleRelation = function (relation) {\n    var errorMessage = '';\n    var EOL = '\\r\\n';\n    var isGetByFilterQuery = this.map[this.map.$root].isArrayRoot;\n\n    if (relation.path === relation.parent) {\n        errorMessage += relation.path + ' has same parent which will cause an infinite loop.' + EOL;\n        return errorMessage;\n    }\n\n    if (relation.isArray()) {\n        var multipleQueriesCount = this.getParentMultipleRelationsCount(relation);\n        if (multipleQueriesCount > 0) {\n            errorMessage += 'Expand expression has multiple relation \\\"' + relation.path + '\\\" inside a multiple relation.';\n            errorMessage += EOL;\n        }\n\n        if (this.map[relation.parent] === this.map[this.map.$root] &&\n            isGetByFilterQuery &&\n            (relation.filterExpression || relation.sortExpression)) {\n            errorMessage += 'Filter and Sort expressions are not allowed with GetByFilter scenario.';\n            errorMessage += EOL;\n        }\n\n        if (isGetByFilterQuery && relation.isInvertedRelation) {\n            errorMessage += 'Expanding an external content type is not allowed with GetByFilter scenario.';\n            errorMessage += EOL;\n        }\n    }\n    if (!relation.targetTypeName) {\n        errorMessage += 'Expanding relation \\\"' + relation.relationField + '\\\" has no target type name specified. You should use \\\"TargetTypeName\\\" to specify it.';\n        errorMessage += EOL;\n    }\n    if (relation.fieldsExpression && Object.keys(relation.fieldsExpression).length && relation.singleFieldName) {\n        errorMessage += relation.path + ' ';\n        errorMessage += 'expand expression contains both \\\"Fields\\\" and \\\"SingleField\\\" expressions.';\n        errorMessage += EOL;\n    }\n    if (relation.singleFieldName) {\n        if (relation.children) {\n            if (relation.children.length > 1) {\n                errorMessage += relation.path + ' has multiple expand expressions with a single field option.' + EOL;\n            }\n            if (relation.children.length === 1 && this.map[relation.children[0]].relationField !== relation.singleFieldName) {\n                errorMessage += 'Expand expression ' + relation.path;\n                errorMessage += ' single field \\\"' + relation.singleFieldName + '\\\"';\n                errorMessage += ' does not match child relation field \\\"' + this.map[relation.children[0]].relationField + '\\\".';\n                errorMessage += EOL;\n            }\n        }\n    }\n\n    return errorMessage;\n};\n\n/**\n * Gets the count of parent multiple relations.\n * @param relation - Starting relation.\n * @returns {number} - count of all parent multiple relations\n */\nRelationTreeBuilder.prototype.getParentMultipleRelationsCount = function (relation) {\n    var result = 0;\n    var relationForLoop = relation;\n    while (relationForLoop.parent) {\n        var parentRelation = this.map[relationForLoop.parent];\n        if (parentRelation.isArray() && parentRelation.parent) {\n            result += 1;\n        }\n        relationForLoop = parentRelation;\n    }\n    return result;\n};\n\n\n/**\n * Adjusts fields expression of the parent relation based on paging setting of a relation (skip, take).\n * In that case we put a \"$slice\" option within the parent relation fields expression.\n * @param parentRelation\n * @param relation\n */\nRelationTreeBuilder.adjustParentRelationFieldsExpression = function (parentRelation, relation) {\n    if (!relation.isInvertedRelation && relation.take && typeof relation.take === 'number') {\n        // when relation has filter or sorting skip and take should not be transferred to the parent relation as $slice.\n        var shouldTransferPagingToParentRelation = relation.isArray() && !relation.filterExpression && !relation.sortExpression && parentRelation;\n        if (shouldTransferPagingToParentRelation) {\n            if (parentRelation.fieldsExpression === undefined) {\n                parentRelation.fieldsExpression = {};\n            }\n\n            if (relation.skip && typeof relation.skip === 'number') {\n                parentRelation.fieldsExpression[relation.relationField] = {\n                    '$slice': [relation.skip, relation.take]\n                };\n            } else {\n                parentRelation.fieldsExpression[relation.relationField] = {\n                    '$slice': relation.take\n                };\n            }\n            relation.take = null;\n            relation.skip = null;\n            relation.movedSkipTakeAsSlice = true;\n        }\n    }\n};\n\n/**\n * Adds field to parent relation fields expression. For example if the relation field is excluded from the master request.\n * @param fieldsExpression - Fields expression of the parent relation.\n * @param relationField - Name of the field which should be returned.\n */\nRelationTreeBuilder.addFieldToFieldsExpression = function (fieldsExpression, relationField) {\n    if (fieldsExpression === undefined || Object.keys(fieldsExpression).length === 0) {\n        return;\n    }\n    var isExclusive = RelationTreeBuilder.getIsFieldsExpressionExclusive(fieldsExpression);\n\n    if (isExclusive === undefined) {\n        return;\n    }\n\n    if (isExclusive) {\n        delete fieldsExpression[relationField];\n    } else {\n        fieldsExpression[relationField] = 1;\n    }\n};\n\n/**\n * Gets if the fields expression is exclusive (\"FieldName\" : 0)\n * @param fieldsExpression - Fields expression to check.\n * @returns {*}\n */\nRelationTreeBuilder.getIsFieldsExpressionExclusive = function (fieldsExpression) {\n    var isExclusive;\n    for (var fieldName in fieldsExpression) {\n        if (fieldName !== Constants.IdFieldNameClient && fieldsExpression.hasOwnProperty(fieldName)) {\n            if (isExclusive === undefined) {\n                if (fieldsExpression[fieldName] === 0) {\n                    isExclusive = true;\n                    break;\n                } else {\n                    if (typeof fieldsExpression[fieldName] === 'object') {\n                        continue;\n                    } else {\n                        // fieldsExpression[fieldName] === 1\n                        isExclusive = false;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return isExclusive;\n};\n\nmodule.exports = RelationTreeBuilder;\n",
    "/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n",
    "//     Underscore.js 1.8.2\n//     http://underscorejs.org\n//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n//     Underscore may be freely distributed under the MIT license.\n\n(function() {\n\n  // Baseline setup\n  // --------------\n\n  // Establish the root object, `window` in the browser, or `exports` on the server.\n  var root = this;\n\n  // Save the previous value of the `_` variable.\n  var previousUnderscore = root._;\n\n  // Save bytes in the minified (but not gzipped) version:\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;\n\n  // Create quick reference variables for speed access to core prototypes.\n  var\n    push             = ArrayProto.push,\n    slice            = ArrayProto.slice,\n    toString         = ObjProto.toString,\n    hasOwnProperty   = ObjProto.hasOwnProperty;\n\n  // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n  var\n    nativeIsArray      = Array.isArray,\n    nativeKeys         = Object.keys,\n    nativeBind         = FuncProto.bind,\n    nativeCreate       = Object.create;\n\n  // Naked function reference for surrogate-prototype-swapping.\n  var Ctor = function(){};\n\n  // Create a safe reference to the Underscore object for use below.\n  var _ = function(obj) {\n    if (obj instanceof _) return obj;\n    if (!(this instanceof _)) return new _(obj);\n    this._wrapped = obj;\n  };\n\n  // Export the Underscore object for **Node.js**, with\n  // backwards-compatibility for the old `require()` API. If we're in\n  // the browser, add `_` as a global object.\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = _;\n    }\n    exports._ = _;\n  } else {\n    root._ = _;\n  }\n\n  // Current version.\n  _.VERSION = '1.8.2';\n\n  // Internal function that returns an efficient (for current engines) version\n  // of the passed-in callback, to be repeatedly applied in other Underscore\n  // functions.\n  var optimizeCb = function(func, context, argCount) {\n    if (context === void 0) return func;\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n\n  // A mostly-internal function to generate callbacks that can be applied\n  // to each element in a collection, returning the desired result — either\n  // identity, an arbitrary callback, a property matcher, or a property accessor.\n  var cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n  };\n  _.iteratee = function(value, context) {\n    return cb(value, context, Infinity);\n  };\n\n  // An internal function for creating assigner functions.\n  var createAssigner = function(keysFunc, undefinedOnly) {\n    return function(obj) {\n      var length = arguments.length;\n      if (length < 2 || obj == null) return obj;\n      for (var index = 1; index < length; index++) {\n        var source = arguments[index],\n            keys = keysFunc(source),\n            l = keys.length;\n        for (var i = 0; i < l; i++) {\n          var key = keys[i];\n          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];\n        }\n      }\n      return obj;\n    };\n  };\n\n  // An internal function for creating a new object that inherits from another.\n  var baseCreate = function(prototype) {\n    if (!_.isObject(prototype)) return {};\n    if (nativeCreate) return nativeCreate(prototype);\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n    return result;\n  };\n\n  // Helper for collection methods to determine whether a collection\n  // should be iterated as an array or as an object\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\n  var isArrayLike = function(collection) {\n    var length = collection && collection.length;\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\n  };\n\n  // Collection Functions\n  // --------------------\n\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles raw objects in addition to array-likes. Treats all\n  // sparse array-likes as if they were dense.\n  _.each = _.forEach = function(obj, iteratee, context) {\n    iteratee = optimizeCb(iteratee, context);\n    var i, length;\n    if (isArrayLike(obj)) {\n      for (i = 0, length = obj.length; i < length; i++) {\n        iteratee(obj[i], i, obj);\n      }\n    } else {\n      var keys = _.keys(obj);\n      for (i = 0, length = keys.length; i < length; i++) {\n        iteratee(obj[keys[i]], keys[i], obj);\n      }\n    }\n    return obj;\n  };\n\n  // Return the results of applying the iteratee to each element.\n  _.map = _.collect = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length,\n        results = Array(length);\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\n    }\n    return results;\n  };\n\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`.\n  _.reduce = _.foldl = _.inject = createReduce(1);\n\n  // The right-associative version of reduce, also known as `foldr`.\n  _.reduceRight = _.foldr = createReduce(-1);\n\n  // Return the first value which passes a truth test. Aliased as `detect`.\n  _.find = _.detect = function(obj, predicate, context) {\n    var key;\n    if (isArrayLike(obj)) {\n      key = _.findIndex(obj, predicate, context);\n    } else {\n      key = _.findKey(obj, predicate, context);\n    }\n    if (key !== void 0 && key !== -1) return obj[key];\n  };\n\n  // Return all the elements that pass a truth test.\n  // Aliased as `select`.\n  _.filter = _.select = function(obj, predicate, context) {\n    var results = [];\n    predicate = cb(predicate, context);\n    _.each(obj, function(value, index, list) {\n      if (predicate(value, index, list)) results.push(value);\n    });\n    return results;\n  };\n\n  // Return all the elements for which a truth test fails.\n  _.reject = function(obj, predicate, context) {\n    return _.filter(obj, _.negate(cb(predicate)), context);\n  };\n\n  // Determine whether all of the elements match a truth test.\n  // Aliased as `all`.\n  _.every = _.all = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\n    }\n    return true;\n  };\n\n  // Determine if at least one element in the object matches a truth test.\n  // Aliased as `any`.\n  _.some = _.any = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = !isArrayLike(obj) && _.keys(obj),\n        length = (keys || obj).length;\n    for (var index = 0; index < length; index++) {\n      var currentKey = keys ? keys[index] : index;\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\n    }\n    return false;\n  };\n\n  // Determine if the array or object contains a given value (using `===`).\n  // Aliased as `includes` and `include`.\n  _.contains = _.includes = _.include = function(obj, target, fromIndex) {\n    if (!isArrayLike(obj)) obj = _.values(obj);\n    return _.indexOf(obj, target, typeof fromIndex == 'number' && fromIndex) >= 0;\n  };\n\n  // Invoke a method (with arguments) on every item in a collection.\n  _.invoke = function(obj, method) {\n    var args = slice.call(arguments, 2);\n    var isFunc = _.isFunction(method);\n    return _.map(obj, function(value) {\n      var func = isFunc ? method : value[method];\n      return func == null ? func : func.apply(value, args);\n    });\n  };\n\n  // Convenience version of a common use case of `map`: fetching a property.\n  _.pluck = function(obj, key) {\n    return _.map(obj, _.property(key));\n  };\n\n  // Convenience version of a common use case of `filter`: selecting only objects\n  // containing specific `key:value` pairs.\n  _.where = function(obj, attrs) {\n    return _.filter(obj, _.matcher(attrs));\n  };\n\n  // Convenience version of a common use case of `find`: getting the first object\n  // containing specific `key:value` pairs.\n  _.findWhere = function(obj, attrs) {\n    return _.find(obj, _.matcher(attrs));\n  };\n\n  // Return the maximum element (or element-based computation).\n  _.max = function(obj, iteratee, context) {\n    var result = -Infinity, lastComputed = -Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value > result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Return the minimum element (or element-based computation).\n  _.min = function(obj, iteratee, context) {\n    var result = Infinity, lastComputed = Infinity,\n        value, computed;\n    if (iteratee == null && obj != null) {\n      obj = isArrayLike(obj) ? obj : _.values(obj);\n      for (var i = 0, length = obj.length; i < length; i++) {\n        value = obj[i];\n        if (value < result) {\n          result = value;\n        }\n      }\n    } else {\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index, list) {\n        computed = iteratee(value, index, list);\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\n          result = value;\n          lastComputed = computed;\n        }\n      });\n    }\n    return result;\n  };\n\n  // Shuffle a collection, using the modern version of the\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\n  _.shuffle = function(obj) {\n    var set = isArrayLike(obj) ? obj : _.values(obj);\n    var length = set.length;\n    var shuffled = Array(length);\n    for (var index = 0, rand; index < length; index++) {\n      rand = _.random(0, index);\n      if (rand !== index) shuffled[index] = shuffled[rand];\n      shuffled[rand] = set[index];\n    }\n    return shuffled;\n  };\n\n  // Sample **n** random values from a collection.\n  // If **n** is not specified, returns a single random element.\n  // The internal `guard` argument allows it to work with `map`.\n  _.sample = function(obj, n, guard) {\n    if (n == null || guard) {\n      if (!isArrayLike(obj)) obj = _.values(obj);\n      return obj[_.random(obj.length - 1)];\n    }\n    return _.shuffle(obj).slice(0, Math.max(0, n));\n  };\n\n  // Sort the object's values by a criterion produced by an iteratee.\n  _.sortBy = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    return _.pluck(_.map(obj, function(value, index, list) {\n      return {\n        value: value,\n        index: index,\n        criteria: iteratee(value, index, list)\n      };\n    }).sort(function(left, right) {\n      var a = left.criteria;\n      var b = right.criteria;\n      if (a !== b) {\n        if (a > b || a === void 0) return 1;\n        if (a < b || b === void 0) return -1;\n      }\n      return left.index - right.index;\n    }), 'value');\n  };\n\n  // An internal function used for aggregate \"group by\" operations.\n  var group = function(behavior) {\n    return function(obj, iteratee, context) {\n      var result = {};\n      iteratee = cb(iteratee, context);\n      _.each(obj, function(value, index) {\n        var key = iteratee(value, index, obj);\n        behavior(result, value, key);\n      });\n      return result;\n    };\n  };\n\n  // Groups the object's values by a criterion. Pass either a string attribute\n  // to group by, or a function that returns the criterion.\n  _.groupBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key].push(value); else result[key] = [value];\n  });\n\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\n  // when you know that your index values will be unique.\n  _.indexBy = group(function(result, value, key) {\n    result[key] = value;\n  });\n\n  // Counts instances of an object that group by a certain criterion. Pass\n  // either a string attribute to count by, or a function that returns the\n  // criterion.\n  _.countBy = group(function(result, value, key) {\n    if (_.has(result, key)) result[key]++; else result[key] = 1;\n  });\n\n  // Safely create a real, live array from anything iterable.\n  _.toArray = function(obj) {\n    if (!obj) return [];\n    if (_.isArray(obj)) return slice.call(obj);\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\n    return _.values(obj);\n  };\n\n  // Return the number of elements in an object.\n  _.size = function(obj) {\n    if (obj == null) return 0;\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\n  };\n\n  // Split a collection into two arrays: one whose elements all satisfy the given\n  // predicate, and one whose elements all do not satisfy the predicate.\n  _.partition = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var pass = [], fail = [];\n    _.each(obj, function(value, key, obj) {\n      (predicate(value, key, obj) ? pass : fail).push(value);\n    });\n    return [pass, fail];\n  };\n\n  // Array Functions\n  // ---------------\n\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head` and `take`. The **guard** check\n  // allows it to work with `_.map`.\n  _.first = _.head = _.take = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[0];\n    return _.initial(array, array.length - n);\n  };\n\n  // Returns everything but the last entry of the array. Especially useful on\n  // the arguments object. Passing **n** will return all the values in\n  // the array, excluding the last N.\n  _.initial = function(array, n, guard) {\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\n  };\n\n  // Get the last element of an array. Passing **n** will return the last N\n  // values in the array.\n  _.last = function(array, n, guard) {\n    if (array == null) return void 0;\n    if (n == null || guard) return array[array.length - 1];\n    return _.rest(array, Math.max(0, array.length - n));\n  };\n\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\n  // Especially useful on the arguments object. Passing an **n** will return\n  // the rest N values in the array.\n  _.rest = _.tail = _.drop = function(array, n, guard) {\n    return slice.call(array, n == null || guard ? 1 : n);\n  };\n\n  // Trim out all falsy values from an array.\n  _.compact = function(array) {\n    return _.filter(array, _.identity);\n  };\n\n  // Internal implementation of a recursive `flatten` function.\n  var flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    for (var i = startIndex || 0, length = input && input.length; i < length; i++) {\n      var value = input[i];\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\n        //flatten current level of array or arguments object\n        if (!shallow) value = flatten(value, shallow, strict);\n        var j = 0, len = value.length;\n        output.length += len;\n        while (j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if (!strict) {\n        output[idx++] = value;\n      }\n    }\n    return output;\n  };\n\n  // Flatten out an array, either recursively (by default), or just one level.\n  _.flatten = function(array, shallow) {\n    return flatten(array, shallow, false);\n  };\n\n  // Return a version of the array that does not contain the specified value(s).\n  _.without = function(array) {\n    return _.difference(array, slice.call(arguments, 1));\n  };\n\n  // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\n    if (array == null) return [];\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n    if (iteratee != null) iteratee = cb(iteratee, context);\n    var result = [];\n    var seen = [];\n    for (var i = 0, length = array.length; i < length; i++) {\n      var value = array[i],\n          computed = iteratee ? iteratee(value, i, array) : value;\n      if (isSorted) {\n        if (!i || seen !== computed) result.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        if (!_.contains(seen, computed)) {\n          seen.push(computed);\n          result.push(value);\n        }\n      } else if (!_.contains(result, value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  };\n\n  // Produce an array that contains the union: each distinct element from all of\n  // the passed-in arrays.\n  _.union = function() {\n    return _.uniq(flatten(arguments, true, true));\n  };\n\n  // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n  _.intersection = function(array) {\n    if (array == null) return [];\n    var result = [];\n    var argsLength = arguments.length;\n    for (var i = 0, length = array.length; i < length; i++) {\n      var item = array[i];\n      if (_.contains(result, item)) continue;\n      for (var j = 1; j < argsLength; j++) {\n        if (!_.contains(arguments[j], item)) break;\n      }\n      if (j === argsLength) result.push(item);\n    }\n    return result;\n  };\n\n  // Take the difference between one array and a number of other arrays.\n  // Only the elements present in just the first array will remain.\n  _.difference = function(array) {\n    var rest = flatten(arguments, true, true, 1);\n    return _.filter(array, function(value){\n      return !_.contains(rest, value);\n    });\n  };\n\n  // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n  _.zip = function() {\n    return _.unzip(arguments);\n  };\n\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\n  // each array's elements on shared indices\n  _.unzip = function(array) {\n    var length = array && _.max(array, 'length').length || 0;\n    var result = Array(length);\n\n    for (var index = 0; index < length; index++) {\n      result[index] = _.pluck(array, index);\n    }\n    return result;\n  };\n\n  // Converts lists into objects. Pass either a single array of `[key, value]`\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\n  // the corresponding values.\n  _.object = function(list, values) {\n    var result = {};\n    for (var i = 0, length = list && list.length; i < length; i++) {\n      if (values) {\n        result[list[i]] = values[i];\n      } else {\n        result[list[i][0]] = list[i][1];\n      }\n    }\n    return result;\n  };\n\n  // Return the position of the first occurrence of an item in an array,\n  // or -1 if the item is not included in the array.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n  _.indexOf = function(array, item, isSorted) {\n    var i = 0, length = array && array.length;\n    if (typeof isSorted == 'number') {\n      i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;\n    } else if (isSorted && length) {\n      i = _.sortedIndex(array, item);\n      return array[i] === item ? i : -1;\n    }\n    if (item !== item) {\n      return _.findIndex(slice.call(array, i), _.isNaN);\n    }\n    for (; i < length; i++) if (array[i] === item) return i;\n    return -1;\n  };\n\n  _.lastIndexOf = function(array, item, from) {\n    var idx = array ? array.length : 0;\n    if (typeof from == 'number') {\n      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);\n    }\n    if (item !== item) {\n      return _.findLastIndex(slice.call(array, 0, idx), _.isNaN);\n    }\n    while (--idx >= 0) if (array[idx] === item) return idx;\n    return -1;\n  };\n\n  // Generator function to create the findIndex and findLastIndex functions\n  function createIndexFinder(dir) {\n    return function(array, predicate, context) {\n      predicate = cb(predicate, context);\n      var length = array != null && array.length;\n      var index = dir > 0 ? 0 : length - 1;\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) return index;\n      }\n      return -1;\n    };\n  }\n\n  // Returns the first index on an array-like that passes a predicate test\n  _.findIndex = createIndexFinder(1);\n\n  _.findLastIndex = createIndexFinder(-1);\n\n  // Use a comparator function to figure out the smallest index at which\n  // an object should be inserted so as to maintain order. Uses binary search.\n  _.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = array.length;\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\n    }\n    return low;\n  };\n\n  // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n  _.range = function(start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n    step = step || 1;\n\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\n    var range = Array(length);\n\n    for (var idx = 0; idx < length; idx++, start += step) {\n      range[idx] = start;\n    }\n\n    return range;\n  };\n\n  // Function (ahem) Functions\n  // ------------------\n\n  // Determines whether to execute a function as a constructor\n  // or a normal function with the provided arguments\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\n    var self = baseCreate(sourceFunc.prototype);\n    var result = sourceFunc.apply(self, args);\n    if (_.isObject(result)) return result;\n    return self;\n  };\n\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\n  // available.\n  _.bind = function(func, context) {\n    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\n    var args = slice.call(arguments, 2);\n    var bound = function() {\n      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));\n    };\n    return bound;\n  };\n\n  // Partially apply a function by creating a version that has had some of its\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\n  // as a placeholder, allowing any combination of arguments to be pre-filled.\n  _.partial = function(func) {\n    var boundArgs = slice.call(arguments, 1);\n    var bound = function() {\n      var position = 0, length = boundArgs.length;\n      var args = Array(length);\n      for (var i = 0; i < length; i++) {\n        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];\n      }\n      while (position < arguments.length) args.push(arguments[position++]);\n      return executeBound(func, bound, this, this, args);\n    };\n    return bound;\n  };\n\n  // Bind a number of an object's methods to that object. Remaining arguments\n  // are the method names to be bound. Useful for ensuring that all callbacks\n  // defined on an object belong to it.\n  _.bindAll = function(obj) {\n    var i, length = arguments.length, key;\n    if (length <= 1) throw new Error('bindAll must be passed function names');\n    for (i = 1; i < length; i++) {\n      key = arguments[i];\n      obj[key] = _.bind(obj[key], obj);\n    }\n    return obj;\n  };\n\n  // Memoize an expensive function by storing its results.\n  _.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      var cache = memoize.cache;\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);\n      return cache[address];\n    };\n    memoize.cache = {};\n    return memoize;\n  };\n\n  // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n  _.delay = function(func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function(){\n      return func.apply(null, args);\n    }, wait);\n  };\n\n  // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n  _.defer = _.partial(_.delay, _, 1);\n\n  // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time. Normally, the throttled function will run\n  // as much as it can, without ever going more than once per `wait` duration;\n  // but if you'd like to disable the execution on the leading edge, pass\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\n  _.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    var previous = 0;\n    if (!options) options = {};\n    var later = function() {\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    };\n    return function() {\n      var now = _.now();\n      if (!previous && options.leading === false) previous = now;\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n        previous = now;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n      return result;\n    };\n  };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds. If `immediate` is passed, trigger the function on the\n  // leading edge, instead of the trailing.\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timestamp, result;\n\n    var later = function() {\n      var last = _.now() - timestamp;\n\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        if (!immediate) {\n          result = func.apply(context, args);\n          if (!timeout) context = args = null;\n        }\n      }\n    };\n\n    return function() {\n      context = this;\n      args = arguments;\n      timestamp = _.now();\n      var callNow = immediate && !timeout;\n      if (!timeout) timeout = setTimeout(later, wait);\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n\n      return result;\n    };\n  };\n\n  // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n  _.wrap = function(func, wrapper) {\n    return _.partial(wrapper, func);\n  };\n\n  // Returns a negated version of the passed-in predicate.\n  _.negate = function(predicate) {\n    return function() {\n      return !predicate.apply(this, arguments);\n    };\n  };\n\n  // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n  _.compose = function() {\n    var args = arguments;\n    var start = args.length - 1;\n    return function() {\n      var i = start;\n      var result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  };\n\n  // Returns a function that will only be executed on and after the Nth call.\n  _.after = function(times, func) {\n    return function() {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  };\n\n  // Returns a function that will only be executed up to (but not including) the Nth call.\n  _.before = function(times, func) {\n    var memo;\n    return function() {\n      if (--times > 0) {\n        memo = func.apply(this, arguments);\n      }\n      if (times <= 1) func = null;\n      return memo;\n    };\n  };\n\n  // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n  _.once = _.partial(_.before, 2);\n\n  // Object Functions\n  // ----------------\n\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\n                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n\n  function collectNonEnumProps(obj, keys) {\n    var nonEnumIdx = nonEnumerableProps.length;\n    var constructor = obj.constructor;\n    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;\n\n    // Constructor is a special case.\n    var prop = 'constructor';\n    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\n\n    while (nonEnumIdx--) {\n      prop = nonEnumerableProps[nonEnumIdx];\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\n        keys.push(prop);\n      }\n    }\n  }\n\n  // Retrieve the names of an object's own properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n  _.keys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    if (nativeKeys) return nativeKeys(obj);\n    var keys = [];\n    for (var key in obj) if (_.has(obj, key)) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve all the property names of an object.\n  _.allKeys = function(obj) {\n    if (!_.isObject(obj)) return [];\n    var keys = [];\n    for (var key in obj) keys.push(key);\n    // Ahem, IE < 9.\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\n    return keys;\n  };\n\n  // Retrieve the values of an object's properties.\n  _.values = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var values = Array(length);\n    for (var i = 0; i < length; i++) {\n      values[i] = obj[keys[i]];\n    }\n    return values;\n  };\n\n  // Returns the results of applying the iteratee to each element of the object\n  // In contrast to _.map it returns an object\n  _.mapObject = function(obj, iteratee, context) {\n    iteratee = cb(iteratee, context);\n    var keys =  _.keys(obj),\n          length = keys.length,\n          results = {},\n          currentKey;\n      for (var index = 0; index < length; index++) {\n        currentKey = keys[index];\n        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\n      }\n      return results;\n  };\n\n  // Convert an object into a list of `[key, value]` pairs.\n  _.pairs = function(obj) {\n    var keys = _.keys(obj);\n    var length = keys.length;\n    var pairs = Array(length);\n    for (var i = 0; i < length; i++) {\n      pairs[i] = [keys[i], obj[keys[i]]];\n    }\n    return pairs;\n  };\n\n  // Invert the keys and values of an object. The values must be serializable.\n  _.invert = function(obj) {\n    var result = {};\n    var keys = _.keys(obj);\n    for (var i = 0, length = keys.length; i < length; i++) {\n      result[obj[keys[i]]] = keys[i];\n    }\n    return result;\n  };\n\n  // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n  _.functions = _.methods = function(obj) {\n    var names = [];\n    for (var key in obj) {\n      if (_.isFunction(obj[key])) names.push(key);\n    }\n    return names.sort();\n  };\n\n  // Extend a given object with all the properties in passed-in object(s).\n  _.extend = createAssigner(_.allKeys);\n\n  // Assigns a given object with all the own properties in the passed-in object(s)\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n  _.extendOwn = _.assign = createAssigner(_.keys);\n\n  // Returns the first key on an object that passes a predicate test\n  _.findKey = function(obj, predicate, context) {\n    predicate = cb(predicate, context);\n    var keys = _.keys(obj), key;\n    for (var i = 0, length = keys.length; i < length; i++) {\n      key = keys[i];\n      if (predicate(obj[key], key, obj)) return key;\n    }\n  };\n\n  // Return a copy of the object only containing the whitelisted properties.\n  _.pick = function(object, oiteratee, context) {\n    var result = {}, obj = object, iteratee, keys;\n    if (obj == null) return result;\n    if (_.isFunction(oiteratee)) {\n      keys = _.allKeys(obj);\n      iteratee = optimizeCb(oiteratee, context);\n    } else {\n      keys = flatten(arguments, false, false, 1);\n      iteratee = function(value, key, obj) { return key in obj; };\n      obj = Object(obj);\n    }\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n      var value = obj[key];\n      if (iteratee(value, key, obj)) result[key] = value;\n    }\n    return result;\n  };\n\n   // Return a copy of the object without the blacklisted properties.\n  _.omit = function(obj, iteratee, context) {\n    if (_.isFunction(iteratee)) {\n      iteratee = _.negate(iteratee);\n    } else {\n      var keys = _.map(flatten(arguments, false, false, 1), String);\n      iteratee = function(value, key) {\n        return !_.contains(keys, key);\n      };\n    }\n    return _.pick(obj, iteratee, context);\n  };\n\n  // Fill in a given object with default properties.\n  _.defaults = createAssigner(_.allKeys, true);\n\n  // Create a (shallow-cloned) duplicate of an object.\n  _.clone = function(obj) {\n    if (!_.isObject(obj)) return obj;\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  };\n\n  // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n  _.tap = function(obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  };\n\n  // Returns whether an object has a given set of `key:value` pairs.\n  _.isMatch = function(object, attrs) {\n    var keys = _.keys(attrs), length = keys.length;\n    if (object == null) return !length;\n    var obj = Object(object);\n    for (var i = 0; i < length; i++) {\n      var key = keys[i];\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\n    }\n    return true;\n  };\n\n\n  // Internal recursive comparison function for `isEqual`.\n  var eq = function(a, b, aStack, bStack) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\n    // A strict comparison is necessary because `null == undefined`.\n    if (a == null || b == null) return a === b;\n    // Unwrap any wrapped objects.\n    if (a instanceof _) a = a._wrapped;\n    if (b instanceof _) b = b._wrapped;\n    // Compare `[[Class]]` names.\n    var className = toString.call(a);\n    if (className !== toString.call(b)) return false;\n    switch (className) {\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n      case '[object RegExp]':\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n      case '[object String]':\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n        // equivalent to `new String(\"5\")`.\n        return '' + a === '' + b;\n      case '[object Number]':\n        // `NaN`s are equivalent, but non-reflexive.\n        // Object(NaN) is equivalent to NaN\n        if (+a !== +a) return +b !== +b;\n        // An `egal` comparison is performed for other numeric values.\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\n      case '[object Date]':\n      case '[object Boolean]':\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n        // millisecond representations. Note that invalid dates with millisecond representations\n        // of `NaN` are not equivalent.\n        return +a === +b;\n    }\n\n    var areArrays = className === '[object Array]';\n    if (!areArrays) {\n      if (typeof a != 'object' || typeof b != 'object') return false;\n\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n      // from different frames are.\n      var aCtor = a.constructor, bCtor = b.constructor;\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\n                          && ('constructor' in a && 'constructor' in b)) {\n        return false;\n      }\n    }\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n    \n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || [];\n    bStack = bStack || [];\n    var length = aStack.length;\n    while (length--) {\n      // Linear search. Performance is inversely proportional to the number of\n      // unique nested structures.\n      if (aStack[length] === a) return bStack[length] === b;\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a);\n    bStack.push(b);\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n      // Compare array lengths to determine if a deep comparison is necessary.\n      length = a.length;\n      if (length !== b.length) return false;\n      // Deep compare the contents, ignoring non-numeric properties.\n      while (length--) {\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\n      }\n    } else {\n      // Deep compare objects.\n      var keys = _.keys(a), key;\n      length = keys.length;\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\n      if (_.keys(b).length !== length) return false;\n      while (length--) {\n        // Deep compare each member\n        key = keys[length];\n        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\n      }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop();\n    bStack.pop();\n    return true;\n  };\n\n  // Perform a deep comparison to check if two objects are equal.\n  _.isEqual = function(a, b) {\n    return eq(a, b);\n  };\n\n  // Is a given array, string, or object empty?\n  // An \"empty\" object has no enumerable own-properties.\n  _.isEmpty = function(obj) {\n    if (obj == null) return true;\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\n    return _.keys(obj).length === 0;\n  };\n\n  // Is a given value a DOM element?\n  _.isElement = function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  };\n\n  // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n  _.isArray = nativeIsArray || function(obj) {\n    return toString.call(obj) === '[object Array]';\n  };\n\n  // Is a given variable an object?\n  _.isObject = function(obj) {\n    var type = typeof obj;\n    return type === 'function' || type === 'object' && !!obj;\n  };\n\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {\n    _['is' + name] = function(obj) {\n      return toString.call(obj) === '[object ' + name + ']';\n    };\n  });\n\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\n  // there isn't any inspectable \"Arguments\" type.\n  if (!_.isArguments(arguments)) {\n    _.isArguments = function(obj) {\n      return _.has(obj, 'callee');\n    };\n  }\n\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\n  // IE 11 (#1621), and in Safari 8 (#1929).\n  if (typeof /./ != 'function' && typeof Int8Array != 'object') {\n    _.isFunction = function(obj) {\n      return typeof obj == 'function' || false;\n    };\n  }\n\n  // Is a given object a finite number?\n  _.isFinite = function(obj) {\n    return isFinite(obj) && !isNaN(parseFloat(obj));\n  };\n\n  // Is the given value `NaN`? (NaN is the only number which does not equal itself).\n  _.isNaN = function(obj) {\n    return _.isNumber(obj) && obj !== +obj;\n  };\n\n  // Is a given value a boolean?\n  _.isBoolean = function(obj) {\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\n  };\n\n  // Is a given value equal to null?\n  _.isNull = function(obj) {\n    return obj === null;\n  };\n\n  // Is a given variable undefined?\n  _.isUndefined = function(obj) {\n    return obj === void 0;\n  };\n\n  // Shortcut function for checking if an object has a given property directly\n  // on itself (in other words, not on a prototype).\n  _.has = function(obj, key) {\n    return obj != null && hasOwnProperty.call(obj, key);\n  };\n\n  // Utility Functions\n  // -----------------\n\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n  _.noConflict = function() {\n    root._ = previousUnderscore;\n    return this;\n  };\n\n  // Keep the identity function around for default iteratees.\n  _.identity = function(value) {\n    return value;\n  };\n\n  // Predicate-generating functions. Often useful outside of Underscore.\n  _.constant = function(value) {\n    return function() {\n      return value;\n    };\n  };\n\n  _.noop = function(){};\n\n  _.property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    };\n  };\n\n  // Generates a function for a given object that returns a given property.\n  _.propertyOf = function(obj) {\n    return obj == null ? function(){} : function(key) {\n      return obj[key];\n    };\n  };\n\n  // Returns a predicate for checking whether an object has a given set of \n  // `key:value` pairs.\n  _.matcher = _.matches = function(attrs) {\n    attrs = _.extendOwn({}, attrs);\n    return function(obj) {\n      return _.isMatch(obj, attrs);\n    };\n  };\n\n  // Run a function **n** times.\n  _.times = function(n, iteratee, context) {\n    var accum = Array(Math.max(0, n));\n    iteratee = optimizeCb(iteratee, context, 1);\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\n    return accum;\n  };\n\n  // Return a random integer between min and max (inclusive).\n  _.random = function(min, max) {\n    if (max == null) {\n      max = min;\n      min = 0;\n    }\n    return min + Math.floor(Math.random() * (max - min + 1));\n  };\n\n  // A (possibly faster) way to get the current timestamp as an integer.\n  _.now = Date.now || function() {\n    return new Date().getTime();\n  };\n\n   // List of HTML entities for escaping.\n  var escapeMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#x27;',\n    '`': '&#x60;'\n  };\n  var unescapeMap = _.invert(escapeMap);\n\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\n  var createEscaper = function(map) {\n    var escaper = function(match) {\n      return map[match];\n    };\n    // Regexes for identifying a key that needs to be escaped\n    var source = '(?:' + _.keys(map).join('|') + ')';\n    var testRegexp = RegExp(source);\n    var replaceRegexp = RegExp(source, 'g');\n    return function(string) {\n      string = string == null ? '' : '' + string;\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n    };\n  };\n  _.escape = createEscaper(escapeMap);\n  _.unescape = createEscaper(unescapeMap);\n\n  // If the value of the named `property` is a function then invoke it with the\n  // `object` as context; otherwise, return it.\n  _.result = function(object, property, fallback) {\n    var value = object == null ? void 0 : object[property];\n    if (value === void 0) {\n      value = fallback;\n    }\n    return _.isFunction(value) ? value.call(object) : value;\n  };\n\n  // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n  var idCounter = 0;\n  _.uniqueId = function(prefix) {\n    var id = ++idCounter + '';\n    return prefix ? prefix + id : id;\n  };\n\n  // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n  _.templateSettings = {\n    evaluate    : /<%([\\s\\S]+?)%>/g,\n    interpolate : /<%=([\\s\\S]+?)%>/g,\n    escape      : /<%-([\\s\\S]+?)%>/g\n  };\n\n  // When customizing `templateSettings`, if you don't want to define an\n  // interpolation, evaluation or escaping regex, we need one that is\n  // guaranteed not to match.\n  var noMatch = /(.)^/;\n\n  // Certain characters need to be escaped so that they can be put into a\n  // string literal.\n  var escapes = {\n    \"'\":      \"'\",\n    '\\\\':     '\\\\',\n    '\\r':     'r',\n    '\\n':     'n',\n    '\\u2028': 'u2028',\n    '\\u2029': 'u2029'\n  };\n\n  var escaper = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\n\n  var escapeChar = function(match) {\n    return '\\\\' + escapes[match];\n  };\n\n  // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n  // NB: `oldSettings` only exists for backwards compatibility.\n  _.template = function(text, settings, oldSettings) {\n    if (!settings && oldSettings) settings = oldSettings;\n    settings = _.defaults({}, settings, _.templateSettings);\n\n    // Combine delimiters into one regular expression via alternation.\n    var matcher = RegExp([\n      (settings.escape || noMatch).source,\n      (settings.interpolate || noMatch).source,\n      (settings.evaluate || noMatch).source\n    ].join('|') + '|$', 'g');\n\n    // Compile the template source, escaping string literals appropriately.\n    var index = 0;\n    var source = \"__p+='\";\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\n      source += text.slice(index, offset).replace(escaper, escapeChar);\n      index = offset + match.length;\n\n      if (escape) {\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\n      } else if (interpolate) {\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\n      } else if (evaluate) {\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\n      }\n\n      // Adobe VMs need the match returned to produce the correct offest.\n      return match;\n    });\n    source += \"';\\n\";\n\n    // If a variable is not specified, place data values in local scope.\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\n\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\n      source + 'return __p;\\n';\n\n    try {\n      var render = new Function(settings.variable || 'obj', '_', source);\n    } catch (e) {\n      e.source = source;\n      throw e;\n    }\n\n    var template = function(data) {\n      return render.call(this, data, _);\n    };\n\n    // Provide the compiled source as a convenience for precompilation.\n    var argument = settings.variable || 'obj';\n    template.source = 'function(' + argument + '){\\n' + source + '}';\n\n    return template;\n  };\n\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\n  _.chain = function(obj) {\n    var instance = _(obj);\n    instance._chain = true;\n    return instance;\n  };\n\n  // OOP\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n  // Helper function to continue chaining intermediate results.\n  var result = function(instance, obj) {\n    return instance._chain ? _(obj).chain() : obj;\n  };\n\n  // Add your own custom functions to the Underscore object.\n  _.mixin = function(obj) {\n    _.each(_.functions(obj), function(name) {\n      var func = _[name] = obj[name];\n      _.prototype[name] = function() {\n        var args = [this._wrapped];\n        push.apply(args, arguments);\n        return result(this, func.apply(_, args));\n      };\n    });\n  };\n\n  // Add all of the Underscore functions to the wrapper object.\n  _.mixin(_);\n\n  // Add all mutator Array functions to the wrapper.\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      var obj = this._wrapped;\n      method.apply(obj, arguments);\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\n      return result(this, obj);\n    };\n  });\n\n  // Add all accessor Array functions to the wrapper.\n  _.each(['concat', 'join', 'slice'], function(name) {\n    var method = ArrayProto[name];\n    _.prototype[name] = function() {\n      return result(this, method.apply(this._wrapped, arguments));\n    };\n  });\n\n  // Extracts the result from a wrapped and chained object.\n  _.prototype.value = function() {\n    return this._wrapped;\n  };\n\n  // Provide unwrapping proxy for some methods used in engine operations\n  // such as arithmetic and JSON stringification.\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\n  \n  _.prototype.toString = function() {\n    return '' + this._wrapped;\n  };\n\n  // AMD registration happens at the end for compatibility with AMD loaders\n  // that may not enforce next-turn semantics on modules. Even though general\n  // practice for AMD registration is to be anonymous, underscore registers\n  // as a named module because, like jQuery, it is a base library that is\n  // popular enough to be bundled in a third party lib, but not be part of\n  // an AMD load request. Those cases could generate an error when an\n  // anonymous define() is called outside of a loader request.\n  if (typeof define === 'function' && define.amd) {\n    define('underscore', [], function() {\n      return _;\n    });\n  }\n}.call(this));\n",
    "var EverliveError = require('./EverliveError').EverliveError;\nvar constants = require('./constants');\nvar _ = require('underscore');\n\nmodule.exports = (function () {\n\n    function AutoQueue(maxConcurrentTasks) {\n        maxConcurrentTasks = parseInt(maxConcurrentTasks || constants.MaxConcurrentDownloadTasks);\n\n        if (isNaN(maxConcurrentTasks) || maxConcurrentTasks <= 0) {\n            throw new EverliveError('The maxConcurrentTasks must be a number larger than 0');\n        }\n\n        this.maxConcurrentTasks = maxConcurrentTasks;\n        this.runningTasksCount = 0;\n        this.tasks = [];\n    }\n\n    AutoQueue.prototype = {\n        /**\n         * @param {Function} task\n         * @param {Function} taskSuccess\n         * @param {Function} taskError\n         */\n        enqueue: function (task, taskSuccess, taskError) {\n            if (!_.isFunction(taskSuccess) || !_.isFunction(taskError)) {\n                throw new EverliveError('taskSuccess and taskError functions must be provided');\n            }\n\n            var args = [].splice.call(arguments, 3);\n\n            this.tasks.push({\n                task: task,\n                args: args,\n                success: taskSuccess,\n                error: taskError\n            });\n\n            this._runNext();\n        },\n\n        _runNext: function () {\n            var self = this;\n\n            if (self.runningTasksCount === self.maxConcurrentTasks || !self.tasks.length) {\n                return;\n            }\n\n            self.runningTasksCount++;\n\n            var nextTask = this.tasks.shift();\n            var task = nextTask.task;\n            var args = nextTask.args;\n            var taskSuccess = nextTask.success;\n            var taskError = nextTask.error;\n\n            args.unshift(function executedCallback(err) {\n                self.runningTasksCount--;\n\n                if (err) {\n                    taskError(err);\n                } else {\n                    taskSuccess.apply(null, [].splice.call(arguments, 1));\n                }\n\n                self._runNext();\n            });\n\n            task.apply(null, args);\n        }\n    };\n\n    return AutoQueue;\n}());",
    "'use strict';\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar apply = function apply(obj) {\n    obj._emitter = new EventEmitter();\n\n    obj._emitterProxy = function (event, args) {\n        obj._emitter[event].apply(obj._emitter, args);\n    };\n\n    obj.addListener = function () {\n        obj._emitterProxy('addListener', arguments);\n    };\n\n    obj.on = obj.addListener;\n\n    obj.removeListener = function () {\n        obj._emitterProxy('removeListener', arguments);\n    };\n\n    obj.off = obj.removeListener;\n\n    obj.once = function () {\n        obj._emitterProxy('once', arguments);\n    };\n\n    obj.removeAllListeners = function () {\n        obj._emitterProxy('removeAllListeners', arguments);\n    };\n};\n\nmodule.exports = {\n    apply: apply\n};",
    "var Setup = require('./Setup');\nvar Data = require('./types/Data');\nvar usersModule = require('./types/Users');\nvar filesModule = require('./types/Files');\nvar constants = require('./constants');\nvar utils = require('./utils');\nvar buildAuthHeader = utils.buildAuthHeader;\nvar Push = require('./Push');\nvar Authentication = require('./auth/Authentication');\nvar offlineModule = require('./offline/offline');\nvar caching = require('./caching/caching');\nvar Request = require('./Request');\nvar common = require('./common');\nvar rsvp = common.rsvp;\nvar _ = common._;\nvar EverliveError = require('./EverliveError').EverliveError;\nvar EverliveErrors = require('./EverliveError').EverliveErrors;\nvar helpers = require('./helpers/helpers');\nvar EventEmitterProxy = require('./EventEmitterProxy');\n\n// Registering mixins:\nvar mixins = require('./mixins/mixins');\n\nmodule.exports = (function () {\n\n    // The constructor of Everlive instances.\n    // The entry point for the SDK.\n\n    /**\n     * @class Everlive\n     * @classdesc The constructor of the {{site.bs}} (Everlive) JavaScript SDK. This is the entry point for the SDK.\n     * @param {object|string} options - An object containing configuration options for the Setup object. Alternatively, you can pass a string representing your API key.\n     * @param {string} options.apiKey - Your API key.\n     * @param {string} [options.url=//api.everlive.com/v1/] - The {{site.TelerikBackendServices}} URL.\n     * @param {string} [options.token] - An authentication token. The instance will be associated with the provided previously obtained token.\n     * @param {string} [options.tokenType=bearer] - The type of the token that is used for authentication.\n     * @param {string} [options.scheme=http] - The URI scheme used to make requests. Supported values: http, https\n     * @param {boolean} [options.parseOnlyCompleteDateTimeObjects=false] - If set to true, the SDK will parse only complete date strings (according to the ISO 8601 standard).\n     * @param {boolean} [options.emulatorMode=false] - Set this option to true to set the SDK in emulator mode.\n     * @param {object|boolean} [options.offline] - Set this option to true to enable Offline Support using the default offline settings.\n     * @param {boolean} [options.offline.enabled=false] - When using an object to initialize Offline Support with non-default settings, set this option to enable or disable Offline Support.\n     * @param {boolean} [options.offline.isOnline=true] - Whether the storage is in online mode initially.\n     * @param {ConflictResolutionStrategy|function} [options.offline.conflicts.strategy=ConflictResolutionStrategy.ClientWins] - A constant specifying the conflict resolution strategy or a function used to resolve the conflicts.\n     * @param {object} [options.offline.storage] - An object specifying settings for the offline storage.\n     * @param {string} [options.offline.storage.provider=_platform dependant_] - Allows you to select an offline storage provider. Possible values: Everlive.Constants.StorageProvider.LocalStorage, Everlive.Constants.StorageProvider.FileSystem, Everlive.Constants.StorageProvider.Custom. Default value: Cordova, Web: Everlive.Constants.StorageProvider.LocalStorage; NativeScript, Node.js: Everlive.Constants.StorageProvider.FileSystem.\n     * @param {string} [options.offline.storage.storagePath=el_store] - A relative path specifying where data will be saved if the FileSystem provider is used.\n     * @param {number} [options.offline.storage.requestedQuota=10485760] - How much memory (in bytes) to be requested when using FileSystem for persistence. This option is only valid for Chrome as the other platforms use all the available space.\n     * @param {object} [options.offline.storage.implementation] - When storage.provider is set to custom, use this object to specify your custom offline storage implementation.\n     * @param {string} [options.offline.encryption.key] - A key that will be used to encrypt the data stored offline.\n     * @param {string} [options.offline.files.storagePath=el_file_store] - A relative path specifying where the files will be saved if file system is used for persistence of files in offline mode.\n     * @param {string} [options.offline.files.metaPath=el_file_mapping] - A relative path specifying where the metadata file will be saved if file system is used for persistence of files in offline mode.\n     * @param {object|boolean} [options.offline.files] - Set this option to true to enable support for files in offline mode.\n     * @param {number} [options.offline.files.maxConcurrentDownloads] - The maximum amount of files that can be downloaded simultaneously.\n     * @param {boolean} [options.authentication.persist=false] - Indicates whether the current user's authentication will be persisted.\n     * @param {Function} [options.authentication.onAuthenticationRequired] - Invoked when the user's credentials have expired. Allowing you to perform custom logic.\n     * @param {object} [options.helpers] - An object holding options for all Everlive helper components.\n     * @param {object} [options.helpers.html] - HTML Helper configuration objects.\n     * @param {boolean} [options.helpers.html.processOnLoad=false] - Whether to process all HTML elements when the window loads.\n     * @param {boolean} [options.helpers.html.processOnResize=false] - Whether to process all HTML elements when the window resizes.\n     * @param {string} [options.helpers.html.loadingImageUrl] - The image to be displayed while the original image is being processed.\n     * @param {string} [options.helpers.html.errorImageUrl] - The image to be displayed when the original image processing fails.\n     * @param {object} [options.helpers.html.attributes] - HTML Helper attributes configuration object.\n     * @param {object} [options.helpers.html.attributes.loadingImage=data-loading-image] - A custom name for the attribute to be used to set a loading image.\n     * @param {object} [options.helpers.html.attributes.errorImage=data-error-image] - A custom name for the attribute to be used to set an error image.\n     * @param {object} [options.helpers.html.attributes.dpi=data-dpi] - A custom name for the attribute to be used to specify DPI settings.\n     * @param {object} [options.helpers.html.attributes.imageSource=data-src] - A custom name for the attribute to be used to set the image source.\n     * @param {object} [options.helpers.html.attributes.fileSource=data-href] - A custom name for the attribute to be used to set the anchor source.\n     * @param {object} [options.helpers.html.attributes.enableOffline=data-offline] - A custom name for the attribute to be used to control offline processing.\n     * @param {object} [options.helpers.html.attributes.enableResponsive=data-responsive] - A custom name for the attribute to be used to control Responsive Images processing.\n     * @param {object|boolean} [options.caching=false] - Set this option to true to enable caching using the default cache settings.\n     * @param {number} [options.caching.maxAge=60] - Global setting for maximum age of cached items in minutes.\n     * @param {boolean} [options.caching.enabled=false] - Global setting for enabling or disabling cache.\n     * @param {object} [options.caching.typeSettings] - Specify per-content-type settings that override the global settings.\n     */\n    function Everlive(options) {\n        var self = this;\n        this.setup = new Setup(options);\n        _.each(initializations, function (init) {\n            init.func.call(self, options);\n        });\n\n        if (Everlive.$ === null) {\n            Everlive.$ = self;\n        }\n\n        EventEmitterProxy.apply(this);\n    }\n\n    /**\n     * Adds an event listener to the SDK.\n     * @method addListener\n     * @param {String} eventName The name of the event to which to subscribe.\n     * @param {Function} eventListener An event listener which will be called once the event is raised.\n     * @memberOf Everlive.prototype\n     */\n\n    /**\n     * Adds an event listener to the SDK.\n     * @method on\n     * @param {String} eventName The name of the event to which to subscribe.\n     * @param {Function} eventListener An event listener which will be called once the event is raised.\n     * @memberOf Everlive.prototype\n     */\n\n    /**\n     * Removes an SDK event listener.\n     * @method removeListener\n     * @param {String} eventName The name of the event for which to stop listening.\n     * @param {Function} eventListener The event listener to remove.\n     * @memberOf Everlive.prototype\n     */\n\n    /**\n     * Removes an SDK event listener.\n     * @method off\n     * @param {Function} eventListener\n     * @memberOf Everlive.prototype\n     */\n\n    /**\n     * Adds an event listener to the SDK which will be called only the first time the event is emitted.\n     * @method once\n     * @param {String} eventName The name of the event to which to subscribe.\n     * @param {Function} eventListener An event listener which will be called once the event is raised.\n     * @memberOf Everlive.prototype\n     */\n\n    /**\n     * Removes all SDK event listeners.\n     * @memberOf Everlive.prototype\n     * @method removeAllListeners\n     */\n\n    /** Reference to the current {{site.TelerikBackendServices}} (Everlive) JavaScript SDK.\n     * @memberOf Everlive\n     * @type {Everlive}\n     * @static\n     */\n    Everlive.$ = null;\n    Everlive.idField = constants.idField;\n\n\n    // An array keeping initialization functions called by the Everlive constructor.\n    // These functions will be used to extend the functionality of an Everlive instance.\n    var initializations = [];\n\n    /** An array of functions that are invoked during instantiation of the {{site.TelerikBackendServices}} (Everlive) JavaScript SDK.\n     * @memberOf Everlive\n     * @type {Function[]}\n     * @static\n     * @private\n     */\n    Everlive.initializations = initializations;\n\n    Everlive.init = function (options) {\n        Everlive.$ = null;\n        return new Everlive(options);\n    };\n\n    /**\n     * Creates a new {@link Data} class.\n     * @memberOf Everlive.prototype\n     * @instance\n     * @param {String} collectionName The name of the collection to be used.\n     * @returns {Data}\n     */\n    Everlive.prototype.data = function (collectionName) {\n        return new Data(this.setup, collectionName, this.offlineStorage, this);\n    };\n\n    /**\n     * Returns the URL to the {{site.bs}} application endpoint that the SDK uses.\n     * @memberOf Everlive.prototype\n     * @method buildUrl\n     * @returns {string} The generated URL.\n     */\n    Everlive.prototype.buildUrl = function () {\n        return utils.buildUrl(this.setup);\n    };\n\n    /**\n     * Generates the Authorization headers that are used by the {{site.TelerikBackendServices}} (Everlive) JavaScript SDK to make requests to the {{site.bs}} servers.\n     * @memberOf Everlive\n     * @returns {Object} AuthorizationHeaders The generated Authorization headers object.\n     */\n    Everlive.prototype.buildAuthHeader = function () {\n        return buildAuthHeader(this.setup);\n    };\n\n    Everlive.disableRequestCache = utils.disableRequestCache;\n\n    Everlive.AuthStatus = constants.AuthStatus;\n\n    /**\n     * Gets the current authentication status of the {{site.TelerikBackendServices}} JavaScript SDK instance.\n     * @memberOf Everlive.prototype\n     * @method authInfo\n     * @name authInfo\n     * @deprecated\n     * @see {@link Authentication.getAuthenticationStatus}\n     * @returns {Promise} A promise to the authentication status.\n     */\n    /**\n     * Gets the current authentication status of the {{site.TelerikBackendServices}} JavaScript SDK instance.\n     * @memberOf Everlive.prototype\n     * @method authInfo\n     * @name authInfo\n     * @deprecated\n     * @see {@link Authentication.getAuthenticationStatus}\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    Everlive.prototype.authInfo = function (success, error) {\n        var self = this;\n        return utils.buildPromise(function (success, error) {\n            var setup = self.setup;\n            if (setup.masterKey) {\n                return success({status: Everlive.AuthStatus.masterKey});\n            }\n\n            if (!setup.token) {\n                return success({status: Everlive.AuthStatus.unauthenticated});\n            }\n\n            if (self.authentication && self.authentication.isAuthenticationInProgress()) {\n                return success({status: Everlive.AuthStatus.authenticating});\n            }\n\n            self.Users\n                .skipAuth(true)\n                .currentUser()\n                .then(function (res) {\n                    return success({status: Everlive.AuthStatus.authenticated, user: res.result});\n                }, function (err) {\n                    if (self.authentication && self.authentication.isAuthenticationInProgress()) {\n                        return success({status: Everlive.AuthStatus.authenticating});\n                    } else if (err.code === EverliveErrors.invalidRequest.code || err.code === EverliveErrors.expiredToken.code) { // invalid request, i.e. the access token is invalid or missing\n                        return success({status: Everlive.AuthStatus.invalidAuthentication});\n                    } else {\n                        return error(err);\n                    }\n                });\n        }, success, error);\n    };\n\n    /**\n     * Make a request to the current {{site.bs}} JavaScript SDK instance.\n     * @method request\n     * @memberOf Everlive.prototype\n     * @param {object} options Object used to configure the request.\n     * @param {object} [options.endpoint] The endpoint of the {{site.bs}} JavaScript API relative to the API key section. (For example, options.endpoint = MyType will make a request to the MyType type.)\n     * @param {HttpMethod} [options.method] HTTP request method.\n     * @param {object} [options.data] Data to be sent with the request.\n     * @param {Function} [options.success] Success callback that will be called when the request finishes successfully.\n     * @param {Function} [options.error] Error callback to be called in case of an error.\n     * @param {object} [options.headers] Additional headers to be included in the request.\n     * @param {Query|object} [options.filter] This is either a {@link Query} or a [filter](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) expression.\n     * @param {boolean} [options.authHeaders=true] When set to false, no Authorization headers will be sent with the request.\n     * @returns {function} The request configuration object containing the `send` function that sends the request.\n     */\n    Everlive.prototype.request = function (options) {\n        return new Request(this.setup, options);\n    };\n\n    function protectOfflineEnabled() {\n        if (!this._isOfflineStorageEnabled()) {\n            throw new EverliveError('You have instantiated the SDK without support for offline storage');\n        }\n    }\n\n    Everlive.prototype._isOfflineStorageEnabled = function () {\n        var offlineStorageOptions = this.setup.offlineStorage || this.setup.offline;\n        return offlineStorageOptions && offlineStorageOptions.enabled !== false;\n    };\n\n    /**\n     * Sets the SDK to work in offline mode.\n     * @method offline\n     * @memberOf Everlive.prototype\n     * @param {boolean} [isOffline = true] Boolean parameter for setting the SDK to online or offline mode.\n     */\n    Everlive.prototype.offline = function () {\n        protectOfflineEnabled.call(this);\n\n        var isOffline;\n        if (arguments.length === 0) {\n            isOffline = true;\n        } else {\n            isOffline = arguments[0] == true;\n        }\n        this.offlineStorage._setOffline(isOffline);\n    };\n\n    /**\n     * Sets the SDK to work in online mode.\n     * @method online\n     * @memberOf Everlive.prototype\n     * @param {boolean} [isOnline = true] Boolean parameter for setting the SDK to online or offline mode.\n     */\n    Everlive.prototype.online = function () {\n        protectOfflineEnabled.call(this);\n\n        var isOnline;\n        if (arguments.length === 0) {\n            isOnline = true;\n        } else {\n            isOnline = arguments[0] == true;\n        }\n        this.offlineStorage._setOffline(!isOnline);\n    };\n\n    /**\n     * Check if the SDK is in offline mode.\n     * @method isOffline\n     * @memberOf Everlive.prototype\n     * @returns {boolean} Returns true if the SDK is in offline mode.\n     */\n    Everlive.prototype.isOffline = function () {\n        protectOfflineEnabled.call(this);\n        return !this.isOnline();\n    };\n\n    /**\n     * Check if the SDK is in online mode.\n     * @method isOnline\n     * @memberOf Everlive.prototype\n     * @returns {boolean} Returns true if the SDK is in online mode.\n     */\n    Everlive.prototype.isOnline = function () {\n        return this.offlineStorage.isOnline();\n    };\n\n    /**\n     * Starts the synchronization procedure. Emits the 'syncStart' event when started and the 'syncEnd' event when the procedure finishes. 'syncEnd' contains information about the completed sync operation that you can use to find out how many items were synchronized.\n     * @method sync\n     * @memberOf Everlive.prototype\n     */\n    Everlive.prototype.sync = function () {\n        protectOfflineEnabled.call(this);\n        return this.offlineStorage.sync.apply(this.offlineStorage, arguments);\n    };\n\n    var initDefault = function initDefault() {\n        var users = this.data('Users');\n        usersModule.addUsersFunctions(users, this);\n\n        /**\n         * @memberOf Everlive\n         * @instance\n         * @deprecated\n         * @see {@link Everlive.users}\n         * @description An instance of the [Users]{@link Users} class for working with users.\n         * @member {Users} Users\n         */\n        this.Users = users;\n\n        /**\n         * @memberOf Everlive\n         * @instance\n         * @description An instance of the [Users]{@link Users} class for working with users.\n         * @member {Users} users\n         */\n        this.users = users;\n\n        var files = this.data('Files');\n        filesModule.addFilesFunctions(files);\n\n        /**\n         * @memberOf Everlive\n         * @instance\n         * @deprecated Use everlive.files instead\n         * @see {@link Everlive.files}\n         * @description An instance of the [Files]{@link Files} class for working with files.\n         * @member {Files} Files\n         */\n        this.Files = files;\n\n        /**\n         * @memberOf Everlive\n         * @instance\n         * @description An instance of the [Files]{@link Files} class for working with files.\n         * @member {Files} files\n         */\n        this.files = files;\n\n        /**\n         * @memberOf Everlive\n         * @instance\n         * @description An instance of the [Push]{@link Push} class for working with push notifications.\n         * @member {Push} push\n         */\n        this.push = new Push(this);\n    };\n\n    var initAuthentication = function initAuthentication() {\n        /**\n         * @memberOf Everlive\n         * @instance\n         * @description An instance of the [Authentication]{@link Authentication} class for working with the authentication of the SDK.\n         * @member {Authentication} authentication\n         */\n        /**\n         * @memberOf Everlive\n         * @instance\n         * @description An instance of the [Authentication]{@link Authentication} class for working with the authentication of the SDK.\n         * @member {authentication} authentication\n         */\n        this.authentication = this.Authentication = new Authentication(this, this.setup.authentication);\n    };\n\n    var initializeHelpers = function initializeHelpers(options) {\n        var self = this;\n        self.helpers = {};\n\n        _.each(helpers, function (helper) {\n            var helperOptions = options.helpers ? options.helpers[helper.name] : null;\n            self.helpers[helper.name] = new helper.ctor(self, helperOptions);\n        });\n    };\n\n    initializations.push({name: 'caching', func: caching.initCaching});\n    initializations.push({name: 'offlineStorage', func: offlineModule.initOfflineStorage});\n    initializations.push({name: 'cacheStore', func: caching._initStore});\n    initializations.push({name: 'default', func: initDefault});\n    initializations.push({name: 'authentication', func: initAuthentication});\n    initializations.push({name: 'helpers', func: initializeHelpers});\n\n    return Everlive;\n}());\n",
    "var EverliveErrors = {\n    itemNotFound: {\n        code: 801,\n        message: 'Item not found.'\n    },\n    syncConflict: {\n        code: 10001,\n        message: 'A conflict occurred while syncing data.'\n    },\n    syncError: {\n        code: 10002,\n        message: 'Synchronization failed for item.'\n    },\n    syncInProgress: {\n        code: 10003,\n        message: 'Cannot perform operation while synchronization is in progress.'\n    },\n    syncCancelledByUser: {\n        code: 10004,\n        message: 'Synchronization cancelled by user.'\n    },\n    operationNotSupportedOffline: {\n        code: 20000 // the error message is created dynamically based on the query filter for offline storage\n    },\n    generalDatabaseError: {\n        code: 107,\n        message: 'General database error.'\n    },\n    invalidToken: {\n        code: 301,\n        message: 'Invalid access token.'\n    },\n    expiredToken: {\n        code: 302,\n        message: 'Expired access token.'\n    },\n    invalidExpandExpression: {\n        code: 618,\n        message: 'Invalid expand expression.'\n    },\n    invalidRequest: {\n        code: 601,\n        message: 'Invalid request.'\n    },\n    missingContentType: {\n        code: 701,\n        message: 'ContentType not specified.'\n    },\n    missingOrInvalidFileContent: {\n        code: 702,\n        message: 'Missing or invalid file content.'\n    },\n    customFileSyncNotSupported: {\n        code: 703,\n        message: 'Custom ConflictResolution for files is not allowed.'\n    },\n    cannotDownloadOffline: {\n        code: 704,\n        message: 'Cannot download a file while offline.'\n    },\n    cannotForceCacheWhenDisabled: {\n        code: 705,\n        message: 'Cannot use forceCache while the caching is disabled.'\n    },\n    filesNotSupportedInBrowser: {\n        code: 706,\n        message: 'Offline files are not supported in web browsers.'\n    }\n};\n\nvar EverliveError = (function () {\n    function EverliveError(message, code) {\n        var tmpError = Error.apply(this);\n\n        if (typeof message === 'object') {\n            var err = message;\n            message = err.message;\n            code = err.code;\n        }\n\n        tmpError.message = message;\n        tmpError.code = code || 0;\n        tmpError.name = this.name = 'EverliveError';\n\n        this.message = tmpError.message;\n        this.code = code;\n\n        Object.defineProperty(this, 'stack', {\n            get: function () {\n                return tmpError.stack\n            }\n        });\n\n        return this;\n    }\n\n    EverliveError.prototype = Object.create(Error.prototype);\n    EverliveError.prototype.toJSON = function () {\n        return {\n            name: this.name,\n            message: this.message,\n            code: this.code,\n            stack: this.stack\n        };\n    };\n\n    return EverliveError;\n}());\n\nvar DeviceRegistrationError = (function () {\n    var DeviceRegistrationError = function (errorType, message, additionalInformation) {\n        EverliveError.call(this, message);\n        this.errorType = errorType;\n        this.message = message;\n        if (additionalInformation !== undefined) {\n            this.additionalInformation = additionalInformation;\n        }\n    };\n\n    DeviceRegistrationError.prototype = Object.create(EverliveError.prototype);\n\n    DeviceRegistrationError.fromEverliveError = function (everliveError) {\n        var deviceRegistrationError = new DeviceRegistrationError(DeviceRegistrationErrorTypes.EverliveError, everliveError.message, everliveError);\n        return deviceRegistrationError;\n    };\n\n    DeviceRegistrationError.fromPluginError = function (errorObj) {\n        var message = 'A plugin error occurred';\n        if (errorObj) {\n            if (typeof errorObj.error === 'string') {\n                message = errorObj.error;\n            } else if (typeof errorObj.message === 'string') {\n                message = errorObj.message;\n            }\n        }\n\n        var deviceRegistrationError = new DeviceRegistrationError(DeviceRegistrationErrorTypes.PluginError, message, errorObj);\n        return deviceRegistrationError;\n    };\n\n    var DeviceRegistrationErrorTypes = {\n        EverliveError: 1,\n        PluginError: 2\n    };\n\n    return DeviceRegistrationError;\n}());\n\nmodule.exports = {\n    EverliveError: EverliveError,\n    EverliveErrors: EverliveErrors,\n    DeviceRegistrationError: DeviceRegistrationError\n};",
    "var Processor = require('./common').Processor;\nvar DataQuery = require('./query/DataQuery');\nvar Query = require('./query/Query');\nvar EverliveError = require('./EverliveError').EverliveError;\nvar constants = require('./constants');\n\nmodule.exports = (function () {\n    return new Processor({\n        executionNodeFunction: function (node, expandContext, done) {\n            var targetTypeName = node.targetTypeName.toLowerCase() === constants.FilesTypeNameLegacy ? constants.FilesTypeName : node.targetTypeName;\n\n            var query = new DataQuery({\n                operation: DataQuery.operations.read,\n                collectionName: targetTypeName,\n                filter: new Query(node.filter, node.select, node.sort, node.skip, node.take)\n            });\n\n            expandContext.offlineModule.processQuery(query).then(function (data) {\n                done(null, data.result);\n            }, done);\n        }\n    });\n}());\n",
    "module.exports = (function () {\n    function Expression(operator, operands) {\n        this.operator = operator;\n        this.operands = operands || [];\n    }\n\n    Expression.prototype = {\n        addOperand: function (operand) {\n            this.operands.push(operand);\n        }\n    };\n\n    return Expression;\n}());",
    "module.exports = (function () {\n    //TODO add a function for calculating the distances in geospatial queries\n\n    /**\n     * @classdesc A class representing a value for the {{site.TelerikBackendServices}} GeoPoint field.\n     * @class GeoPoint\n     * @param longitude Longitude of the GeoPoint in decimal degrees (range: -180 to 180). Example: `123.3239467`\n     * @param latitude Latitude of the GeoPoint in decimal degrees (range: -90 to 90). Example: `42.6954322`\n     */\n    function GeoPoint(longitude, latitude) {\n        this.longitude = longitude || 0;\n        this.latitude = latitude || 0;\n    }\n\n    return GeoPoint;\n}());",
    "var utils = require('./utils');\nvar buildPromise = utils.buildPromise;\nvar DeviceRegistrationResult = utils.DeviceRegistrationResult;\nvar everliveErrorModule = require('./EverliveError');\nvar DeviceRegistrationError = everliveErrorModule.DeviceRegistrationError;\nvar EverliveError = everliveErrorModule.EverliveError;\nvar CurrentDevice = require('./push/CurrentDevice');\nvar Platform = require('./constants').Platform;\n\nmodule.exports = (function () {\n    /**\n     * @class Push\n     * @classdesc A class for managing push notifications in your application. Supported are push notifications for hybrid apps on Android and iOS.\n     * @protected\n     * @param el {Everlive} Everlive Object\n     */\n    function Push(el) {\n        this._el = el;\n        this.notifications = el.data('Push/Notifications');\n        this.devices = el.data('Push/Devices');\n    }\n\n    Push.prototype = {\n\n        /**\n         * Ensures that the Telerik Push Notifications plug-in has been loaded and is ready to use. An {EverliveError} is returned if the plug-in is not available.\n         * @method ensurePushIsAvailable\n         * @memberOf Push.prototype\n         */\n        ensurePushIsAvailable: function () {\n            var isPushNotificationPluginAvailable = (typeof window !== 'undefined' && window.plugins && window.plugins.pushNotification);\n\n            if (!isPushNotificationPluginAvailable && !this._inAppBuilderSimulator()) {\n                throw new EverliveError(\"The push notification plugin is not available. Ensure that the pushNotification plugin is included \" +\n                \"and use after `deviceready` event has been fired.\");\n            }\n        },\n        /**\n         * Returns the current device for sending push notifications\n         * @deprecated since version 1.2.7\n         * @see [Push.register]{@link push.register}\n         * @memberOf Push.prototype\n         * @method currentDevice\n         * @name currentDevice\n         * @param [emulatorMode] {Boolean} If set to true, emulator mode is enabled meaning you cannot send push notifications.\n         * @returns {CurrentDevice} Returns an instance of CurrentDevice.\n         */\n        currentDevice: function (emulatorMode) {\n            this.ensurePushIsAvailable();\n\n            if (arguments.length === 0) {\n                emulatorMode = this._el.setup._emulatorMode;\n            }\n\n            if (!this._currentDevice) {\n                this._currentDevice = new CurrentDevice(this);\n            }\n\n            this._currentDevice.emulatorMode = emulatorMode || this._inAppBuilderSimulator();\n\n            return this._currentDevice;\n        },\n\n        _inAppBuilderSimulator: function () {\n            return typeof window !== undefined && window.navigator && window.navigator.simulator;\n        },\n\n        /**\n         * Enables push notifications on the device and registers it for the feature with {{site.TelerikBackendServices}} if it hasn't already been registered. If it has been registered, the registration details are updated.\n         * @method register\n         * @name register\n         * @memberOf Push.prototype\n         * @param {Object} settings An object containing settings for the registration. It can include custom parameters to be stored by {{site.bs}}.\n         * @param {Object} settings.iOS=null iOS-specific settings.\n         * @param {Boolean} settings.iOS.alert=true If set to true, the push notification will display as a standard iOS alert.\n         * @param {String|Number} settings.iOS.badge='+1' Specifies the badge counter to be displayed on the device.\n         * @param {Boolean} settings.iOS.clearBadge=false Specifies whether to reset the badge count to 0.\n         * @param {Boolean} settings.iOS.sound=true If set to true, the device will play a notification sound.\n         * @param {Object} settings.android=null Android-specific settings.\n         * @param {String} settings.android.senderID=null Your Google API project number. It is required when obtaining a push token for an Android device.\n         * @param {String} settings.android.projectNumber=null Synonym for android.senderID. Available in JavaScript SDK versions 1.2.7 and later.\n         * @param {Object} settings.wp8=null Windows Phone specific settings.\n         * @param {String} settings.wp8.channelName=null The name of the push channel that the device is registering to.\n         * @param {Function} settings.notificationCallbackIOS Specifies a custom callback to be used when a push notification is received on iOS.\n         * @param {Function} settings.notificationCallbackAndroid Specifies a custom callback to be used when a push notification is received on Android.\n         * @param {Function} settings.notificationCallbackWP8 Specifies a custom callback to be used when a push notification is received on Windows Phone 8.\n         * @param {Object} settings.customParameters=null Specifies optional custom registration parameters that will be saved in Telerik Backend Services.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Enables push notifications on the device and registers it for the feature with {{site.TelerikBackendServices}} if it hasn't already been registered. If it has been registered, the registration details are updated.\n         * Telerik Backend Services if it hasn't already been registered.\n         * If it was registered the registration details are updated.\n         * @method register\n         * @name register\n         * @memberOf Push.prototype\n         * @param {Object} settings Settings for the registration. Can include custom parameters to be saved in backend services.\n         * @param {Object} settings.iOS=null iOS specific settings\n         * @param {Boolean} settings.iOS.alert=true Specifies whether the device will display an alert message.\n         * @param {String|Number} settings.iOS.badge='+1' Specifies the badge counter to be displayed on the device.\n         * @param {Boolean} settings.iOS.clearBadge=false Specifies whether to reset the badge count to 0.\n         * @param {Boolean} settings.iOS.sound=true Specifies whether the device will play a sound.\n         * @param {Object} settings.android=null Android specific settings\n         * @param {String} settings.android.senderID=null This is your Google API project number. It is required when obtaining a push token for an Android device.\n         * @param {String} settings.android.projectNumber=null Synonym for android.senderID. Available in JavaScript SDK versions 1.2.7 and later.\n         * @param {Object} settings.wp8=null Windows Phone specific settings\n         * @param {String} settings.wp8.channelName=null The name of the push channel that the device is registering to.\n         * @param {Function} settings.notificationCallbackIOS Specifies a custom callback to be used when a push notification is received on iOS.\n         * @param {Function} settings.notificationCallbackAndroid Specifies a custom callback to be used when a push notification is received on Android.\n         * @param {Function} settings.notificationCallbackWP8 Specifies a custom callback to be used when a push notification is received on Windows Phone 8.\n         * @param {Object} settings.customParameters=null Specifies optional custom registration parameters that will be saved in Telerik Backend Services.\n         * @param {Function} [success] Callback to invoke on success.\n         * @param {Function} [error] Callback to invoke on error.\n         */\n        register: function (settings, success, error) {\n            this.ensurePushIsAvailable();\n\n            var currentDevice = this.currentDevice();\n            var self = this;\n            settings = settings || {};\n\n            if (settings.android) {\n                settings.android.senderID = settings.android.projectNumber || settings.android.senderID;\n            }\n\n            var successCallback = function (token, callback) {\n                var result = new DeviceRegistrationResult(token);\n                callback(result);\n            };\n\n            var errorCallback = function (err, callback) {\n                var registrationError = DeviceRegistrationError.fromEverliveError(err);\n                callback(registrationError);\n            };\n\n            var clearBadgeIfNeeded = function (token, successCb, errorCb) {\n                var platformType = currentDevice._getPlatformType();\n                var clearBadge = platformType === Platform.iOS;\n\n                if (clearBadge && settings.iOS) {\n                    clearBadge = settings.iOS.clearBadge !== false;\n                }\n\n                if (clearBadge) {\n                    self.clearBadgeNumber().then(function () {\n                        successCallback(token, successCb);\n                    }, function (err) {\n                        errorCallback(err, errorCb);\n                    });\n                } else {\n                    successCallback(token, successCb);\n                }\n            };\n\n            return buildPromise(function (successCb, errorCb) {\n                currentDevice.enableNotifications(settings, function (response) {\n                    var token = response.token;\n                    var customParameters = settings.customParameters;\n                    currentDevice.getRegistration()\n                        .then(function () {\n                            currentDevice.updateRegistration(customParameters, function () {\n                                clearBadgeIfNeeded(token, successCb, errorCb);\n                            }, function (err) {\n                                errorCallback(err, errorCb);\n                            });\n                        }, function (err) {\n                            if (err.code === 801) { //Not registered\n                                currentDevice.register(customParameters, function () {\n                                    clearBadgeIfNeeded(token, successCb, errorCb);\n                                }, errorCb);\n                            } else {\n                                errorCallback(err, errorCb);\n                            }\n                        });\n                }, function (err) {\n                    var deviceRegistrationError = DeviceRegistrationError.fromPluginError(err);\n                    errorCb(deviceRegistrationError);\n                });\n            }, success, error);\n        },\n\n        /**\n         * Disables push notifications for the current device. This method invalidates any push tokens that were obtained for the device from the current application. The device will also be unregistered from {{site.TelerikBackendServices}}.\n         * @method unregister\n         * @name unregister\n         * @memberOf Push.prototype\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Disables push notifications for the current device. This method invalidates any push tokens that were obtained for the device from the current application. The device will also be unregistered from {{site.TelerikBackendServices}}.\n         * This method invalidates any push tokens that were obtained for the device from the current application.\n         * The device will also be unregistered from Telerik Backend Services.\n         * @method unregister\n         * @name unregister\n         * @memberOf Push.prototype\n         * @param {Function} [onSuccess] Callback to invoke on success.\n         * @param {Function} [onError] Callback to invoke on error.\n         */\n        unregister: function (onSuccess, onError) {\n            this.ensurePushIsAvailable();\n\n            var currentDevice = this.currentDevice();\n            return currentDevice.disableNotifications.apply(currentDevice, arguments);\n        },\n\n        /**\n         * Updates the registration of the current device.\n         * @method updateRegistration\n         * @name updateRegistration\n         * @memberOf Push.prototype\n         * @param {Object} customParameters Custom parameters for the registration. If {undefined}, customParameters are not updated.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Updates the registration for the current device.\n         * @method updateRegistration\n         * @name updateRegistration\n         * @memberOf Push.prototype\n         * @param {Object} customParameters Custom parameters for the registration. If {undefined}, customParameters are not updated.\n         * @param {Function} [onSuccess] Callback to invoke on success.\n         * @param {Function} [onError] Callback to invoke on error.\n         */\n        updateRegistration: function (customParameters, onSuccess, onError) {\n            this.ensurePushIsAvailable();\n\n            var currentDevice = this.currentDevice();\n            return currentDevice.updateRegistration.apply(currentDevice, arguments);\n        },\n\n        /**\n         * Sets the badge number on the {{site.TelerikBackendServices}} server.\n         * @method setBadgeNumber\n         * @name setBadgeNumber\n         * @memberOf Push.prototype\n         * @param {Number|String} badge The number to be set as a badge.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Sets the badge number on the server\n         * @method setBadgeNumber\n         * @name setBadgeNumber\n         * @memberOf Push.prototype\n         * @param {Number|String} badge The number to be set as a badge.\n         * @param {Function} [onSuccess] Callback to invoke on success.\n         * @param {Function} [onError] Callback to invoke on error.\n         */\n        setBadgeNumber: function (badge, onSuccess, onError) {\n            var self = this;\n\n            this.ensurePushIsAvailable();\n\n            badge = parseInt(badge);\n            if (isNaN(badge)) {\n                return buildPromise(function (success, error) {\n                    error(new EverliveError('The badge must have a numeric value'));\n                }, onSuccess, onError);\n            }\n\n            var deviceRegistration = {};\n            var currentDevice = this.currentDevice();\n            var deviceId = currentDevice._getDeviceId();\n            deviceRegistration.Id = 'HardwareId/' + encodeURIComponent(deviceId);\n            deviceRegistration.BadgeCounter = badge;\n            return buildPromise(function (successCb, errorCb) {\n                currentDevice._pushHandler.devices.updateSingle(deviceRegistration).then(\n                    function () {\n                        if (window.plugins && window.plugins.pushNotification && !self._inAppBuilderSimulator()) {\n                            return window.plugins.pushNotification.setApplicationIconBadgeNumber(successCb, errorCb, badge);\n                        } else {\n                            return successCb();\n                        }\n                    }, errorCb)\n            }, onSuccess, onError);\n        },\n\n        /**\n         * Resets the badge number on the {{site.TelerikBackendServices}} server to 0.\n         * @method clearBadgeNumber\n         * @name clearBadgeNumber\n         * @memberOf Push.prototype\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Clears the badge number on the server by setting it to 0\n         * @method clearBadgeNumber\n         * @name clearBadgeNumber\n         * @memberOf Push.prototype\n         * @param {Function} [onSuccess] Callback to invoke on success.\n         * @param {Function} [onError] Callback to invoke on error.\n         */\n        clearBadgeNumber: function (onSuccess, onError) {\n            this.ensurePushIsAvailable();\n\n            return this.setBadgeNumber(0, onSuccess, onError);\n        },\n\n        /**\n         * Returns the push notifications registration for the current device.\n         * @method getRegistration\n         * @name getRegistration\n         * @memberOf Push.prototype\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Returns the push registration for the current device.\n         * @method getRegistration\n         * @name getRegistration\n         * @memberOf Push.prototype\n         * @param {Function} [onSuccess] Callback to invoke on success.\n         * @param {Function} [onError] Callback to invoke on error.\n         */\n        getRegistration: function (onSuccess, onError) {\n            this.ensurePushIsAvailable();\n\n            var currentDevice = this.currentDevice();\n            return currentDevice.getRegistration.apply(currentDevice, arguments);\n        },\n\n        /**\n         * Sends a push notification.\n         * @method send\n         * @name send\n         * @memberOf Push.prototype\n         * @param {Object} notification The push notification object\n         * @returns {Promise} The promise for request.\n         */\n        /**\n         * Sends a push message\n         * @method send\n         * @name send\n         * @memberOf Push.prototype\n         * @param {Object} notification The push notification object\n         * @param {Function} [onSuccess] Callback to invoke on success.\n         * @param {Function} [onError] Callback to invoke on error.\n         */\n        send: function (notification, onSuccess, onError) {\n            this.ensurePushIsAvailable();\n\n            return this.notifications.create.apply(this.notifications, arguments);\n        },\n\n        /**\n         * This method provides a different operation on each supported platform:\n         *\n         * - On iOS: Checks if Notifications is enabled for this application in the device's Notification Center.\n         * - On Windows Phone: Checks if the application has an active open channel for communication with the Microsoft Push Notification Service. The outcome does not depend on the device's notification settings.\n         * - On Android: Checks if the application has established a connection with Google Cloud Messaging. The outcome does not depend on the device's notification settings.\n         * @method areNotificationsEnabled\n         * @name areNotificationsEnabled\n         * @memberOf Push.prototype\n         * @param {Object} options An object passed to the Push Notification plugin's areNotificationsEnabled method\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * iOS: Checks if the Notifications are enabled for this Application in the Device's Notification Center.\n         * Windows Phone: Checks if the Application has an active opened Channel for communication with the Notification Service. Not relying on the device notification settings.\n         * Android: Checks if the Application has established connection with the Notification Service. Not relying on the device notification settings.\n         * @method areNotificationsEnabled\n         * @name areNotificationsEnabled\n         * @memberOf Push.prototype\n         * @param {Object} options an object passed to the Push Notification plugin's areNotificationsEnabled method.\n         * @param {Function} [onSuccess] Callback to invoke on successful check. Passes a single boolean value: true or false.\n         * @param {Function} [onError] Callback to invoke when an error in the push plugin has occurred.\n         */\n        areNotificationsEnabled: function (options, onSuccess, onError) {\n            this.ensurePushIsAvailable();\n\n            var currentDevice = this.currentDevice();\n            return currentDevice.areNotificationsEnabled(options, onSuccess, onError);\n        }\n    };\n\n    return Push;\n}());",
    "var utils = require('./utils');\nvar rsvp = require('./common').rsvp;\nvar buildAuthHeader = utils.buildAuthHeader;\nvar parseUtilities = utils.parseUtilities;\nvar guardUnset = utils.guardUnset;\nvar common = require('./common');\nvar reqwest = common.reqwest;\nvar _ = common._;\nvar Headers = require('./constants').Headers;\nvar isNodejs = require('./everlive.platform').isNodejs;\nvar Query = require('./query/Query');\n\nmodule.exports = (function () {\n    var _self;\n\n    // The Request type is an abstraction over Ajax libraries\n    // A Request object needs information about the Everlive connection and initialization options\n\n    function Request(setup, options) {\n        guardUnset(setup, 'setup');\n        guardUnset(options, 'options');\n        this.setup = setup;\n        this.method = null;\n        this.endpoint = null;\n        this.data = null;\n        this.headers = {};\n        // TODO success and error callbacks should be uniformed for all ajax libs\n        this.success = null;\n        this.error = null;\n        this.parse = Request.parsers.simple;\n\n        _.extend(this, options);\n        _self = this;\n        this._init(options);\n    }\n\n    Request.prototype = {\n        // Calls the underlying Ajax library\n        send: function () {\n            Request.sendRequest(this);\n        },\n        // Returns an authorization header used by the request.\n        // If there is a logged in user for the Everlive instance then her/his authentication will be used.\n        buildAuthHeader: buildAuthHeader,\n        // Builds the URL of the target Everlive service\n        buildUrl: function buildUrl(setup) {\n            return utils.buildUrl(setup);\n        },\n        // Processes the given query to return appropriate headers to be used by the request\n        buildQueryHeaders: function buildQueryHeaders(query) {\n            if (query) {\n                if (query instanceof Query) {\n                    return Request.prototype._buildQueryHeaders(query);\n                }\n                else {\n                    return Request.prototype._buildFilterHeader(query);\n                }\n            }\n            else {\n                return {};\n            }\n        },\n        // Initialize the Request object by using the passed options\n        _init: function (options) {\n            _.extend(this.headers, this.buildAuthHeader(this.setup, options), this.buildQueryHeaders(options.filter), options.headers);\n        },\n        // Translates an Everlive.Query to request headers\n        _buildQueryHeaders: function (query) {\n            query = query.build();\n            var headers = {};\n            if (query.$where !== null) {\n                headers[Headers.filter] = JSON.stringify(query.$where);\n            }\n            if (query.$select !== null) {\n                headers[Headers.select] = JSON.stringify(query.$select);\n            }\n            if (query.$sort !== null) {\n                headers[Headers.sort] = JSON.stringify(query.$sort);\n            }\n            if (query.$skip !== null) {\n                headers[Headers.skip] = query.$skip;\n            }\n            if (query.$take !== null) {\n                headers[Headers.take] = query.$take;\n            }\n            if (query.$expand !== null) {\n                headers[Headers.expand] = JSON.stringify(query.$expand);\n            }\n            return headers;\n        },\n        // Creates a header from a simple filter\n        _buildFilterHeader: function (filter) {\n            var headers = {};\n            headers[Headers.filter] = JSON.stringify(filter);\n            return headers;\n        }\n    };\n\n    var parseOnlyCompleteDateTimeString = _self && _self.setup && _self.setup.parseOnlyCompleteDateTimeObjects;\n\n    var reviver = parseUtilities.getReviver(parseOnlyCompleteDateTimeString);\n\n    Request.parsers = {\n        simple: {\n            result: parseUtilities.parseResult.bind(null, reviver),\n            error: parseUtilities.parseError.bind(null, reviver)\n        },\n        single: {\n            result: parseUtilities.parseSingleResult.bind(null, reviver),\n            error: parseUtilities.parseError.bind(null, reviver)\n        },\n        update: {\n            result: parseUtilities.parseUpdateResult.bind(null, reviver),\n            error: parseUtilities.parseError.bind(null, reviver)\n        }\n    };\n\n    // TODO built for request\n    if (typeof Request.sendRequest === 'undefined') {\n        Request.sendRequest = function (request) {\n            var url = request.buildUrl(request.setup) + request.endpoint;\n            url = utils.disableRequestCache(url, request.method);\n            request.method = request.method || 'GET';\n            var data = request.method === 'GET' ? request.data : JSON.stringify(request.data);\n\n            var requestParams = {\n                url: url,\n                method: request.method,\n                data: data,\n                headers: request.headers,\n                contentType: 'application/json'\n            };\n\n            if (isNodejs) {\n                requestParams.success = function (data, response) {\n                    request.success.call(request, request.parse.result(data), response);\n                };\n\n                requestParams.error = function (jqXHR) {\n                    request.error.call(request, request.parse.error(jqXHR.responseText || jqXHR.statusText));\n                };\n            } else {\n                requestParams.type = 'json';\n                requestParams.crossOrigin = true;\n                requestParams.success = function (data, textStatus, jqXHR) {\n                    var result = request.parse.result(data);\n                    request.success.call(request, result);\n                };\n\n                requestParams.error = function (jqXHR, textStatus, errorThrown) {\n                    var error = request.parse.error(jqXHR.responseText || jqXHR.statusText);\n                    request.error.call(request, error);\n                };\n            }\n\n            reqwest(requestParams);\n        };\n    }\n\n    return Request;\n}());",
    "var _ = require('./common')._;\nvar constants = require('./constants');\nvar AuthenticationSetup = require('./auth/AuthenticationSetup');\n\nmodule.exports = (function () {\n    var everliveUrl = constants.everliveUrl;\n\n    // An object that keeps information about an Everlive connection\n    function Setup(options) {\n        this.url = everliveUrl;\n        this.apiKey = null;\n        this.masterKey = null;\n        this.token = null;\n        this.tokenType = null;\n        this.principalId = null;\n        this.scheme = 'http'; // http or https\n        this.parseOnlyCompleteDateTimeObjects = false;\n        if (typeof options === 'string') {\n            this.apiKey = options;\n        } else {\n            this._emulatorMode = options.emulatorMode;\n            _.extend(this, options);\n        }\n\n        this.authentication = new AuthenticationSetup(this, options.authentication);\n    }\n\n    Setup.prototype.setAuthorizationProperties = function (token, tokenType, principalId) {\n        this.token = token;\n        this.tokenType = tokenType;\n        this.principalId = principalId;\n    };\n\n    Setup.prototype.getAuthorizationProperties = function () {\n        return {\n            token: this.token,\n            tokenType: this.tokenType,\n            principalId: this.principalId\n        };\n    };\n\n    return Setup;\n\n}());",
    "'use strict';\nvar utils = require('../utils');\nvar DataQuery = require('../query/DataQuery');\nvar Request = require('../Request');\nvar Everlive = require('../Everlive');\nvar constants = require('../constants');\nvar usersCollectionName = 'Users';\nvar buildPromise = utils.buildPromise;\nvar LocalStore = require('../storages/LocalStore');\nvar EverliveErrors = require('../EverliveError').EverliveErrors;\n\nmodule.exports = (function () {\n    /**\n     * @class Authentication\n     * @classdesc A class for managing authentication of a user in your application.\n     * @protected\n     * @param el {Everlive} Everlive Object\n     * @param setup {AuthSetup} the authentication setup object\n     */\n    var Authentication = function (el, setup) {\n        this.authSetup = setup || {};\n        this._el = el;\n        this._authenticationCallbacks = null;\n        if (this.authSetup.persist) {\n            this._localStore = new LocalStore(el);\n            var localStoreKey = this._getLocalStoreKey();\n            var authOptions = this._localStore.getItem(localStoreKey);\n            var authInfo;\n            if (authOptions) {\n                authInfo = JSON.parse(this._localStore.getItem(localStoreKey));\n            }\n            if (authInfo) {\n                this._el.setup.setAuthorizationProperties(authInfo.token, authInfo.tokenType, authInfo.principalId);\n            }\n        }\n    };\n\n    /**\n     *\n     * Logs in a user using a username and a password to the current {{site.bs}} JavaScript SDK instance. All requests initiated by the current {{site.bs}} JavaScript SDK instance will be authenticated with that user's credentials.\n     * @memberOf Authentication.prototype\n     * @method login\n     * @name login\n     * @param {string} username The user's username.\n     * @param {string} password The user's password.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Logs in a user using a username and a password to the current {{site.bs}} JavaScript SDK instance. All requests initiated by the current {{site.bs}} JavaScript SDK instance will be authenticated with that user's credentials.\n     * @memberOf Authentication.prototype\n     * @method login\n     * @name login\n     * @param {string} username The user's username.\n     * @param {string} password The user's password.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    Authentication.prototype.login = function (username, password, success, error) {\n        var self = this;\n        return buildPromise(function (success, error) {\n            var successFunc = function () {\n                self._loginSuccess.apply(self, arguments);\n                success.apply(null, arguments);\n            };\n\n            var query = new DataQuery({\n                operation: DataQuery.operations.userLogin,\n                collectionName: usersCollectionName,\n                data: {\n                    username: username,\n                    password: password,\n                    grant_type: 'password'\n                },\n                skipAuth: true,\n                onSuccess: successFunc,\n                onError: error\n            });\n\n            return self._el.Users.processDataQuery(query);\n        }, success, error);\n    };\n\n    /**\n     * Log out the user who is currently logged in.\n     * @memberOf Authentication.prototype\n     * @method logout\n     * @name logout\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Log out the user who is currently logged in.\n     * @memberOf Authentication.prototype\n     * @method logout\n     * @name logout\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    Authentication.prototype.logout = function (success, error) {\n        var self = this;\n        return buildPromise(function (success, error) {\n            var successFunc = function () {\n                self._logoutSuccess.apply(self, arguments);\n                success.apply(null, arguments);\n            };\n\n            var errorFunc = function (err) {\n                if (err.code === 301) { //invalid token\n                    self.clearAuthorization();\n                }\n\n                error.apply(null, arguments);\n            };\n\n            var query = new DataQuery({\n                operation: DataQuery.operations.userLogout,\n                collectionName: usersCollectionName,\n                skipAuth: true,\n                onSuccess: successFunc,\n                onError: errorFunc\n            });\n\n            return self._el.Users.processDataQuery(query);\n        }, success, error);\n    };\n\n    Authentication.prototype._getLocalStoreKey = function () {\n        return constants.AuthStoreKey + this._el.setup.apiKey + '$authentication';\n    };\n\n    /**\n     * Log in a user using an Facebook access token.\n     * @memberOf Authentication.prototype\n     * @method loginWithFacebook\n     * @name loginWithFacebook\n     * @param {string} accessToken Facebook access token.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Log in a user using an Facebook access token.\n     * @memberOf Authentication.prototype\n     * @method loginWithFacebook\n     * @name loginWithFacebook\n     * @param {string} accessToken Facebook access token.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    Authentication.prototype.loginWithFacebook = function (accessToken, success, error) {\n        var identity = {\n            Provider: 'Facebook',\n            Token: accessToken\n        };\n        return this._loginWithProvider(identity, success, error);\n    };\n\n    /**\n     * Log in a user using an ADFS access token.\n     * @memberOf Authentication.prototype\n     * @method loginWithADFS\n     * @name loginWithADFS\n     * @param {string} accessToken ADFS access token.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Log in a user using an ADFS access token.\n     * @memberOf Authentication.prototype\n     * @method loginWithADFS\n     * @name loginWithADFS\n     * @param {string} accessToken ADFS access token.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    Authentication.prototype.loginWithADFS = function (accessToken, success, error) {\n        var identity = {\n            Provider: 'ADFS',\n            Token: accessToken\n        };\n        return this._loginWithProvider(identity, success, error);\n    };\n\n    /**\n     * Log in a user using a LiveID access token.\n     * @memberOf Authentication.prototype\n     * @method loginWithLiveID\n     * @name loginWithLiveID\n     * @param {string} accessToken LiveID access token.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Log in a user using a LiveID access token.\n     * @memberOf Authentication.prototype\n     * @method loginWithLiveID\n     * @name loginWithLiveID\n     * @param {string} accessToken LiveID access token.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    Authentication.prototype.loginWithLiveID = function (accessToken, success, error) {\n        var identity = {\n            Provider: 'LiveID',\n            Token: accessToken\n        };\n        return this._loginWithProvider(identity, success, error);\n    };\n\n    /**\n     * Log in a user using a Google access token.\n     * @memberOf Authentication.prototype\n     * @method loginWithGoogle\n     * @name loginWithGoogle\n     * @param {string} accessToken Google access token.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Log in a user using a Google access token.\n     * @memberOf Authentication.prototype\n     * @method loginWithGoogle\n     * @name loginWithGoogle\n     * @param {string} accessToken Google access token.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    Authentication.prototype.loginWithGoogle = function (accessToken, success, error) {\n        var identity = {\n            Provider: 'Google',\n            Token: accessToken\n        };\n\n        return this._loginWithProvider(identity, success, error);\n    };\n\n    /**\n     * Log in a user with a Twitter token. A secret token needs to be provided.\n     * @memberOf Authentication.prototype\n     * @method loginWithTwitter\n     * @name loginWithTwitter\n     * @param {string} token Twitter token.\n     * @param {string} tokenSecret Twitter secret token.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Log in a user with a Twitter token. A secret token needs to be provided.\n     * @memberOf Authentication.prototype\n     * @method loginWithTwitter\n     * @name loginWithTwitter\n     * @param {string} token Twitter token.\n     * @param {string} tokenSecret Twitter secret token.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    Authentication.prototype.loginWithTwitter = function (token, tokenSecret, success, error) {\n        var identity = {\n            Provider: 'Twitter',\n            Token: token,\n            TokenSecret: tokenSecret\n        };\n\n        return this._loginWithProvider(identity, success, error);\n    };\n\n    /**\n     * Sets the token and token type that the {{site.TelerikBackendServices}} JavaScript SDK will use for authorization.\n     * @memberOf Authentication.prototype\n     * @method setAuthorization\n     * @param {string} token Token that will be used for authorization.\n     * @param {Everlive.TokenType} tokenType Token type. Currently only 'bearer' token is supported.\n     * @param {string} principalId The id of the user that is logged in.\n     */\n    Authentication.prototype.setAuthorization = function setAuthorization(token, tokenType, principalId) {\n        this._el.setup.setAuthorizationProperties(token, tokenType, principalId);\n\n        if (this.authSetup.persist) {\n            var localStoreKey = this._getLocalStoreKey();\n            var authorizationProperties = this._el.setup.getAuthorizationProperties();\n            this._localStore.setItem(localStoreKey, JSON.stringify(authorizationProperties));\n        }\n\n        if (this._authenticationCallbacks) {\n            this._authenticationCallbacks.success();\n            this._authenticationCallbacks = null;\n        }\n    };\n\n    /**\n     * Clears the authentication token that the {{site.bs}} JavaScript SDK currently uses. Note that this is different than logging out, because the authorization token that was used, will not be invalidated.\n     * @method clearAuthorization\n     * @memberOf Authentication.prototype\n     */\n    Authentication.prototype.clearAuthorization = function clearAuthorization() {\n        this.setAuthorization(null, null, null);\n        this.clearPersistedAuthentication();\n    };\n\n    /**\n     * Clears the current persisted authentication from the local store for the current {{site.bs}} JavaScript SDK instance. Will not logout or modify the current authentication of the Javascript SDK.\n     * @method clearPersistedAuthentication\n     * @memberOf Authentication.prototype\n     */\n    Authentication.prototype.clearPersistedAuthentication = function () {\n        if (this._localStore) {\n            var localStoreKey = this._getLocalStoreKey();\n            this._localStore.removeItem(localStoreKey);\n            this._el.setup.setAuthorizationProperties(null, null, null);\n        }\n    };\n\n    /**\n     * @memberOf Authentication.prototype\n     * Returns whether authentication requirement is enabled for the current instance of the {{site.bs}} JavaScript SDK.\n     * @returns {boolean} whether an onAuthenticationRequired function is provided\n     */\n    Authentication.prototype.isAuthenticationInProgress = function () {\n        return typeof this.authSetup.onAuthenticationRequired === 'function';\n    };\n\n    /** Ensures that authentication is completed before continuing.\n     * @memberOf Authentication.prototype\n     * @private\n     * @returns {Promise} A promise that will be resolved when the authentication is complete. See {{@link Everlive.prototype.completeAuthentication}}.\n     * @throws throws an error if no onAuthenticationRequired handler is provided to the setup.\n     */\n    Authentication.prototype._ensureAuthentication = function () {\n        if (!this.isAuthenticationInProgress()) {\n            throw new Error('onAuthenticationRequired option of Everlive.Setup.Authentication is required.');\n        }\n        if (this.isAuthenticating()) {\n            return this._authenticationCallbacks.promise;\n        }\n\n        this.clearAuthorization();\n        this.authSetup.onAuthenticationRequired.call(this);\n        this._authenticationCallbacks = utils.getCallbacks();\n        return this._authenticationCallbacks.promise;\n    };\n\n    /**\n     * A method that should be called with the authentication result.\n     * @memberOf Authentication.prototype\n     * @param authentication authentication object containing information about the\n     * @param authentication.access_token\n     * @param authentication.token_type\n     * @param authentication.principal_id\n     */\n    Authentication.prototype.completeAuthentication = function (authentication) {\n        this._el.setAuthorization(authentication.access_token, authentication.token_type, authentication.principal_id);\n    };\n    /**\n     * Gets the current authentication status of the {{site.TelerikBackendServices}} JavaScript SDK instance.\n     * @memberOf Authentication.prototype\n     * @method getAuthenticationStatus\n     * @name getAuthenticationStatus\n     * @returns {Promise} A promise to the authentication status.\n     */\n    /**\n     * Gets the current authentication status of the {{site.TelerikBackendServices}} JavaScript SDK instance.\n     * @memberOf Authentication.prototype\n     * @method getAuthenticationStatus\n     * @name getAuthenticationStatus\n     * @param {Everlive.Callbacks.authenticationStatusSuccess} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    Authentication.prototype.getAuthenticationStatus = function (success, error) {\n        var self = this;\n        return utils.buildPromise(function (success, error) {\n            var setup = self._el.setup;\n            if (setup.masterKey) {\n                return success({status: constants.AuthStatus.masterKey});\n            }\n\n            if (!setup.token) {\n                return success({status: constants.AuthStatus.unauthenticated});\n            }\n\n            if (self.isAuthenticationInProgress()) {\n                return success({status: constants.AuthStatus.authenticating});\n            }\n\n            self._el.Users\n                .skipAuth(true)\n                .currentUser()\n                .then(function (res) {\n                    return success({status: constants.AuthStatus.authenticated, user: res.result});\n                }, function (err) {\n                    if (self.isAuthenticationInProgress()) {\n                        return success({status: constants.AuthStatus.authenticating});\n                    } else if (err.code === EverliveErrors.invalidRequest.code || err.code === EverliveErrors.invalidToken.code) { // invalid request, i.e. the access token is invalid or missing\n                        return success({status: constants.AuthStatus.invalidAuthentication});\n                    } else if (err.code === EverliveErrors.expiredToken.code) {\n                        return success({status: constants.AuthStatus.expiredAuthentication});\n                    } else {\n                        return error(err);\n                    }\n                });\n        }, success, error);\n    };\n\n    /** Returns whether the {{site.TelerikBackendServices}} is currently waiting for authentication to be completed. See {{@link Everlive.prototype.completeAuthentication}}.\n     * @memberOf Everlive.prototype\n     * @returns {boolean}\n     */\n    Authentication.prototype.isAuthenticating = function () {\n        return !!this._authenticationCallbacks;\n    };\n\n    Authentication.prototype._loginSuccess = function (data) {\n        var result = data.result;\n        this.setAuthorization(result.access_token, result.token_type, result.principal_id);\n    };\n\n    Authentication.prototype._logoutSuccess = function () {\n        this.clearAuthorization();\n    };\n\n    Authentication.prototype._loginWithProvider = function (identity, success, error) {\n        var user = {\n            Identity: identity\n        };\n        var self = this;\n        return buildPromise(function (success, error) {\n            var successFunc = function () {\n                self._loginSuccess.apply(self, arguments);\n                success.apply(null, arguments);\n            };\n\n            var query = new DataQuery({\n                operation: DataQuery.operations.userLoginWithProvider,\n                collectionName: usersCollectionName,\n                data: user,\n                authHeaders: false,\n                skipAuth: true,\n                parse: Request.parsers.single,\n                onSuccess: successFunc,\n                onError: error\n            });\n\n            self._el.Users.processDataQuery(query);\n        }, success, error);\n    };\n\n    return Authentication;\n}());\n",
    "'use strict';\nmodule.exports = (function () {\n    var AuthenticationSetup = function (everlive, options) {\n        options = options || {};\n        this.onAuthenticationRequired = options.onAuthenticationRequired;\n        this.persist = options.persist;\n    };\n\n    return AuthenticationSetup;\n}());",
    "'use strict';\n\nvar constants = require('../constants');\nvar common = require('../common');\nvar utils = require('../utils');\nvar buildPromise = utils.buildPromise;\nvar jsonStringify = common.jsonStringify;\nvar rsvp = common.rsvp;\nvar _ = require('underscore');\n\nvar persisters = require('../offline/offlinePersisters');\nvar EverliveError = require('../EverliveError').EverliveError;\nvar Query = require('../query/Query');\nvar DataQuery = require('../query/DataQuery');\nvar buildOfflineStorageOptions = require('../offline/offline').buildOfflineStorageOptions;\n\nvar CacheModule = function (options, everlive) {\n    this.options = options;\n    this.typeSettings = this.options.typeSettings;\n    this.maxAgeInMs = this.options.maxAge * 60 * 1000;\n    this._everlive = everlive;\n};\n\nvar cacheableOperations = [\n    DataQuery.operations.read,\n    DataQuery.operations.readById,\n    DataQuery.operations.count\n];\n\n/**\n * @class CacheModule\n * @classDesc A class providing access to the various caching features.\n */\n\n/**\n * Represents the {@link CacheModule} class.\n * @memberOf Everlive.prototype\n * @member {CacheModule} cache\n */\nCacheModule.prototype = {\n    _hash: function (obj) {\n        return jsonStringify(obj);\n    },\n\n    // using the offline storage options to initialize the same type of storage\n    _initStore: function (sdkOptions) {\n        if (!this.persister) {\n            var offlineStorageOptions = buildOfflineStorageOptions(sdkOptions);\n            var storageKey = this.options.storage.storagePath + '_' + sdkOptions.apiKey;\n\n            this.persister = persisters.getPersister(storageKey, offlineStorageOptions);\n        }\n    },\n\n    _getCacheData: function () {\n        var self = this;\n\n        if (!this.cacheData) {\n            return this._persisterGetAllDataWrap()\n                .then(function (cacheData) {\n                    self.cacheData = cacheData;\n                    return self.cacheData;\n                });\n        }\n\n        return utils.successfulPromise(this.cacheData);\n    },\n\n    _persisterGetAllDataWrap: function () {\n        var self = this;\n\n        return new rsvp.Promise(function (resolve, reject) {\n            return self.persister.getAllData(resolve, reject);\n        });\n    },\n\n    _persisterSaveDataWrap: function (contentType, data) {\n        var self = this;\n        return new rsvp.Promise(function (resolve, reject) {\n            return self.persister.saveData(contentType, JSON.stringify(data), resolve, reject);\n        });\n    },\n\n    _getCacheDataForContentType: function (contentType) {\n        return this._getCacheData()\n            .then(function (cacheData) {\n                if (typeof cacheData[contentType] === 'string') {\n                    cacheData[contentType] = JSON.parse(cacheData[contentType]);\n                } else {\n                    cacheData[contentType] = cacheData[contentType] || {};\n                }\n\n                return _.clone(cacheData[contentType]);\n            })\n    },\n\n    _persistCacheData: function (contentType, cacheData) {\n        var self = this;\n\n        return this._getCacheDataForContentType(contentType)\n            .then(function () {\n                var dataToCache = _.extend({}, self.cacheData[contentType], cacheData);\n                self.cacheData[contentType] = _.compactObject(dataToCache);\n                return self._persisterSaveDataWrap(contentType, self.cacheData[contentType]);\n            });\n    },\n\n    isQueryUnsupportedOffline: function (dataQuery) {\n        var hasPowerfieldsExpression = !!dataQuery.getHeader(constants.Headers.powerFields);\n        var queryParams = dataQuery.getQueryParameters();\n        var dataQueryFilter = queryParams.filter;\n        var unsupportedDbOperators = utils.getUnsupportedOperators(dataQueryFilter);\n        var hasUnsupportedOperators = unsupportedDbOperators.length !== 0;\n        return hasPowerfieldsExpression || hasUnsupportedOperators;\n    },\n\n    _shouldSkipCache: function (dataQuery) {\n        var operationShouldSkipCache = cacheableOperations.indexOf(dataQuery.operation) === -1;\n        var collectionName = dataQuery.collectionName;\n        var typeSettings = this.typeSettings;\n        var cacheDisabledForContentType = typeSettings && typeSettings && typeSettings[collectionName] && typeSettings[collectionName].enabled === false;\n        var ignoreCacheForQuery = dataQuery.ignoreCache;\n\n        var isUnsupportedOffline = this.isQueryUnsupportedOffline(dataQuery);\n\n        return operationShouldSkipCache || cacheDisabledForContentType || ignoreCacheForQuery || isUnsupportedOffline;\n    },\n\n    _cacheDataQuery: function (dataQuery) {\n        if (this._shouldSkipCache(dataQuery)) {\n            if (dataQuery.ignoreCache && !this.isQueryUnsupportedOffline(dataQuery)) {\n                var hash = this._getHashForQuery(dataQuery);\n                this._cacheQuery(dataQuery, hash);\n            } else {\n                this._everlive.data(dataQuery.collectionName)._sendRequest(dataQuery);\n            }\n        } else {\n            dataQuery.useCache = false;\n            this._processCacheItem(dataQuery);\n        }\n    },\n\n    _processCacheItem: function (dataQuery) {\n        var self = this;\n\n        var contentType = dataQuery.collectionName;\n        var hash = this._getHashForQuery(dataQuery);\n        return this._getCacheDataForContentType(contentType)\n            .then(function (cacheData) {\n                if (cacheData[hash]) {\n                    return self._isHashExpired(contentType, hash, dataQuery.maxAge)\n                        .then(function (isExpired) {\n                            if (isExpired && !dataQuery.forceCache) {\n                                return self._purgeForHash(contentType, hash)\n                                    .then(function () {\n                                        return self._cacheQuery(dataQuery, hash);\n                                    });\n                            } else {\n                                //If cache is used, change 'me' to the ID of the logged in user (only for currentUser() requests).\n                                if (dataQuery.operation === DataQuery.operations.readById && dataQuery.additionalOptions.id === 'me') {\n                                    dataQuery.additionalOptions.id = self._everlive.setup.principalId;\n                                }\n\n                                return self._everlive.offlineStorage.processQuery(dataQuery)\n                                    .then(function (result) {\n                                        dataQuery.onSuccess(result);\n                                    })\n                                    .catch(dataQuery.onError);\n                            }\n                        });\n                } else {\n                    return self._cacheQuery(dataQuery, hash);\n                }\n            });\n    },\n\n    _addObjectToCache: function (obj, contentType, maxAge) {\n        var itemHash = obj.Id;\n        return this._cacheResultFromDataQuery(contentType, itemHash, maxAge);\n    },\n\n    _cacheQuery: function (dataQuery, hash) {\n        var self = this;\n        var contentType = dataQuery.collectionName;\n\n        var originalSuccess = dataQuery.onSuccess;\n        dataQuery.onSuccess = function (response) {\n            var args = arguments;\n\n            return self._getCacheData()\n                .then(function () {\n                    var cacheForItems = [];\n                    var result = response.result;\n\n                    if (dataQuery.operation !== DataQuery.operations.count) {\n                        if (Array.isArray(result)) {\n                            _.each(result, function (singleResult) {\n                                var cacheItemPromise = self._addObjectToCache(singleResult, dataQuery.collectionName);\n                                cacheForItems.push(cacheItemPromise);\n                            });\n                        } else if (_.isObject(result)) {\n                            var cacheItemPromise = self._addObjectToCache(result, dataQuery.collectionName);\n                            cacheForItems.push(cacheItemPromise);\n                        }\n                    }\n\n                    return rsvp.all(cacheForItems)\n                        .then(function () {\n                            if (dataQuery.operation !== DataQuery.operations.count) {\n                                return self._cacheResultFromDataQuery(contentType, hash);\n                            }\n                        })\n                        .then(function () {\n                            return originalSuccess.apply(this, args);\n                        });\n                });\n        };\n\n        this._everlive.data(dataQuery.collectionName)._sendRequest(dataQuery);\n    },\n\n    _cacheResultFromDataQuery: function (contentType, hash) {\n        var cacheData = {};\n        cacheData[hash] = {\n            cachedAt: Date.now()\n        };\n\n        return this._persistCacheData(contentType, cacheData);\n    },\n\n    _getExpirationForHash: function (contentType, hash) {\n        return this._getCacheDataForContentType(contentType)\n            .then(function (cacheData) {\n                return cacheData[hash].cachedAt;\n            });\n    },\n\n    _isHashExpired: function (contentType, hash, maxAge) {\n        var self = this;\n\n        return this._getExpirationForHash(contentType, hash)\n            .then(function (cachedAt) {\n                var maxAgeForContentType = self.typeSettings && self.typeSettings[contentType] ? self.typeSettings[contentType].maxAge * 60 * 1000 : null;\n                var cacheAge = maxAge || maxAgeForContentType || self.maxAgeInMs;\n                return (cachedAt + cacheAge) < Date.now();\n            });\n    },\n\n    _purgeForHash: function (contentType, hash) {\n        var cacheData = {};\n        cacheData[hash] = null;\n\n        return this._persistCacheData(contentType, cacheData);\n    },\n\n    _getHashForQuery: function (dataQuery) {\n        if (dataQuery.operation === DataQuery.operations.readById) {\n            return dataQuery.additionalOptions.id;\n        }\n\n        var queryParams = dataQuery.getQueryParameters();\n        return this._hash(queryParams);\n    },\n\n    /**\n     * Clears the cached data for a specified content type.\n     * @method clear\n     * @name clear\n     * @param {string} contentType The content type to clear.\n     * @memberOf CacheModule.prototype\n     * @returns {Promise}\n     */\n    /**\n     * Clears the cached data for a specified content type.\n     * @method clear\n     * @name clear\n     * @param {string} contentType The content type to clear.\n     * @memberOf CacheModule.prototype\n     * @param {function} [success] A success callback.\n     * @param {function} [error] An error callback.\n     */\n    clear: function (contentType, success, error) {\n        var self = this;\n\n        return buildPromise(function (success, error) {\n            return self.persister.purge(contentType, function () {\n                delete self.cacheData[contentType];\n                if (self._everlive.offlineStorage.setup.enabled) {\n                    success();\n                } else {\n                    self._everlive.offlineStorage._queryProcessor._persister.purge(contentType, success, error);\n                }\n            }, error);\n        }, success, error);\n    },\n\n    /**\n     * Clears all data from the cache.\n     * @method clearAll\n     * @name clearAll\n     * @memberOf CacheModule.prototype\n     * @returns {Promise}\n     */\n    /**\n     * Clears all data from the cache.\n     * @method clearAll\n     * @name clearAll\n     * @memberOf CacheModule.prototype\n     * @param {function} [success] A success callback.\n     * @param {function} [error] An error callback.\n     */\n    clearAll: function (success, error) {\n        var self = this;\n        self.cacheData = null;\n\n        return buildPromise(function (success, error) {\n            return self.persister.purgeAll(function () {\n                if (self._everlive.offlineStorage.setup.enabled) {\n                    success();\n                } else {\n                    self._everlive.offlineStorage._queryProcessor._persister.purgeAll(success, error);\n                }\n            }, error)\n        }, success, error);\n    }\n};\n\nmodule.exports = CacheModule;",
    "'use strict';\n\nvar CacheModule = require('./CacheModule');\nvar _ = require('../common')._;\n\nvar getDefaultOptions = function () {\n    return {\n        maxAge: 60,\n        enabled: false,\n        storage: {\n            storagePath: 'el_cache'\n        }\n    }\n};\n\nmodule.exports = {\n    initCaching: function (options) {\n        var cachingOptions;\n        var defaultOptions = getDefaultOptions();\n        if (options.caching === true) {\n            cachingOptions = _.deepExtend({}, defaultOptions);\n            cachingOptions.enabled = true;\n        } else {\n            cachingOptions = _.deepExtend(defaultOptions, options.caching);\n        }\n\n        if (options.caching !== false) {\n            this.setup.caching = cachingOptions;\n        }\n\n        this.cache = new CacheModule(cachingOptions, this);\n    },\n    _initStore: function (options) {\n        this.cache._initStore(options);\n    }\n};",
    "module.exports = (function () {\n    var common = {};\n    var dependencyStore = {};\n\n    var platform = require('./everlive.platform');\n    var isNativeScript = platform.isNativeScript;\n    var isNodejs = platform.isNodejs;\n\n    if (!isNodejs && !isNativeScript) {\n        dependencyStore.reqwest = require('reqwest');\n    } else if (isNativeScript) {\n        common.root = global;\n        dependencyStore.reqwest = require('./reqwest.nativescript');\n    } else if (isNodejs) {\n        common.root = global;\n        dependencyStore.reqwest = require('./reqwest.nodejs');\n    }\n\n    if (!common.root) {\n        //browser/requirejs/cordova\n        common.root = window;\n    }\n\n    var exportDependency = function exportDependency(globalName, localName) {\n        if (!localName) {\n            localName = globalName;\n        }\n\n        //for the everlive bundle without dependencies included, browserify replaces them with empty objects\n        //we need to make sure that these dependencies are marked as undefined\n        if (dependencyStore[localName] &&\n            typeof dependencyStore[localName] === 'object' && !Object.keys(dependencyStore[localName]).length) {\n\n            dependencyStore[localName] = undefined;\n        }\n\n        Object.defineProperty(common, localName, {\n            get: function () {\n                return dependencyStore[localName] || this.root[globalName];\n            }\n        });\n    };\n\n    dependencyStore._ = require('underscore');\n    exportDependency('_');\n\n    dependencyStore.jstz = require('jstimezonedetect').jstz;\n    exportDependency('jstz');\n\n    dependencyStore.mongoQuery = require('mongo-query');\n    exportDependency('mongoQuery');\n\n    dependencyStore.Mingo = require('mingo');\n    exportDependency('Mingo');\n\n    dependencyStore.Processor = require('../scripts/bs-expand-processor');\n    exportDependency('Processor');\n\n    dependencyStore.rsvp = require('rsvp');\n    exportDependency('RSVP', 'rsvp');\n\n    exportDependency('reqwest');\n\n    dependencyStore.jsonStringify = require('json-stable-stringify');\n    exportDependency('json-stable-stringify', 'jsonStringify');\n\n    return common;\n}());",
    "/**\n * Constants used by the SDK\n * @typedef {Object} Everlive.Constants\n */\n\nvar constants = {\n    idField: 'Id',\n    guidEmpty: '00000000-0000-0000-0000-000000000000',\n    everliveUrl: '//api.everlive.com/v1/',\n    /**\n     * A class used to represent the conflict resolution strategies.\n     * @property {string} ClientWins\n     * @property {string} ServerWins\n     * @property {string} Custom\n     * @typedef {string} Everlive.Constants.ConflictResolutionStrategy\n     */\n    ConflictResolutionStrategy: {\n        ClientWins: 'clientWins',\n        ServerWins: 'serverWins',\n        Custom: 'custom'\n    },\n    ConflictResolution: {\n        KeepServer: 'keepServer',\n        KeepClient: 'keepClient',\n        Custom: 'custom',\n        Skip: 'skip'\n    },\n    /**\n     * A class used to represent the available storage providers.\n     * @property {string} LocalStorage\n     * @property {string} FileSystem\n     * @property {string} Custom\n     * @typedef {string} Everlive.Constants.StorageProvider\n     */\n    StorageProvider: {\n        LocalStorage: 'localStorage',\n        FileSystem: 'fileSystem',\n        Custom: 'custom'\n    },\n\n    DefaultStoragePath: 'el_store',\n\n    // the default location for storing files offline\n    DefaultFilesStoragePath: 'el_file_store',\n\n    // the default location for storing offline to online location map\n    DefaultFilesMetadataPath: 'el_file_mapping',\n\n    EncryptionProvider: {\n        Default: 'default',\n        Custom: 'custom'\n    },\n\n    // The headers used by the Everlive services\n    Headers: {\n        filter: 'X-Everlive-Filter',\n        select: 'X-Everlive-Fields',\n        sort: 'X-Everlive-Sort',\n        skip: 'X-Everlive-Skip',\n        take: 'X-Everlive-Take',\n        expand: 'X-Everlive-Expand',\n        singleField: 'X-Everlive-Single-Field',\n        includeCount: 'X-Everlive-Include-Count',\n        powerFields: 'X-Everlive-Power-Fields',\n        debug: 'X-Everlive-Debug',\n        overrideSystemFields: 'X-Everlive-Override-System-Fields',\n        sdk: 'X-Everlive-Sdk',\n        sync: 'X-Everlive-Sync'\n    },\n    //Constants for different platforms in Everlive\n    Platform: {\n        WindowsPhone: 1,\n        Windows: 2,\n        Android: 3,\n        iOS: 4,\n        OSX: 5,\n        Blackberry: 6,\n        Nokia: 7,\n        Unknown: 100\n    },\n    OperatorType: {\n        query: 1,\n\n        where: 100,\n        filter: 101,\n\n        and: 110,\n        or: 111,\n        not: 112,\n\n        equal: 120,\n        not_equal: 121,\n        lt: 122,\n        lte: 123,\n        gt: 124,\n        gte: 125,\n        isin: 126,\n        notin: 127,\n        all: 128,\n        size: 129,\n        regex: 130,\n        contains: 131,\n        startsWith: 132,\n        endsWith: 133,\n\n        nearShpere: 140,\n        withinBox: 141,\n        withinPolygon: 142,\n        withinShpere: 143,\n\n        select: 200,\n        exclude: 201,\n\n        order: 300,\n        order_desc: 301,\n\n        skip: 400,\n        take: 401,\n        expand: 402\n    },\n\n    /**\n     * A class used to represent the current authentication status of the {{site.TelerikBackendServices}} JavaScript SDK instance.\n     * @property {string} unauthenticated Indicates that no user is authenticated.\n     * @property {string} masterKey Indicates that a master key authentication is used.\n     * @property {string} invalidAuthentication Indicates an authentication has been attempted, but it was invalid.\n     * @property {string} authenticated Indicates that a user is authenticated.\n     * @property {string} authenticating Indicates that a user is currently authenticating. Some requests might be pending and waiting for the user to authenticate.\n     * @property {string} expiredAuthentication Indicates that a user's authentication has expired and that the user must log back in.\n     * @typedef {string} Everlive.AuthStatus\n     */\n    AuthStatus: {\n        unauthenticated: 'unauthenticated',\n        masterKey: 'masterKey',\n        invalidAuthentication: 'invalidAuthentication',\n        authenticated: 'authenticated',\n        expiredAuthentication: 'expiredAuthentication',\n        authenticating: 'authenticating'\n    },\n    offlineItemStates: {\n        created: 'create',\n        modified: 'update',\n        deleted: 'delete'\n    },\n\n    /**\n     * HTTP Methods\n     * @enum {string}\n     */\n    HttpMethod: {\n        GET: 'GET',\n        POST: 'POST',\n        PUT: 'PUT',\n        DELETE: 'DELETE'\n    },\n    maxDistanceConsts: {\n        radians: '$maxDistance',\n        km: '$maxDistanceInKilometers',\n        miles: '$maxDistanceInMiles'\n    },\n    radiusConsts: {\n        radians: 'radius',\n        km: 'radiusInKilometers',\n        miles: 'radiusInMiles'\n    }\n};\n\n// using an invalid field name in the context of Everlive\n// to ensure no naming collisions can occur\nconstants.offlineItemsStateMarker = '__everlive_offline_state';\n\nconstants.SyncErrors = {\n    generalError: 'generalError',\n    itemSyncError: 'itemSyncError'\n};\n\nconstants.syncBatchSize = 10;\n\nconstants.AuthStoreKey = '__everlive_auth_key';\n\nconstants.CachingStoreKey = '__everlive_cache';\n\n// the minimum interval between sync requests\nconstants.defaultSyncInterval = 1000 * 60 * 10; // 10 minutes\nconstants.fileUploadKey = 'fileUpload';\nconstants.fileUploadDelimiter = '_';\n\nconstants.FilesTypeNameLegacy = 'system.files';\nconstants.FilesTypeName = 'Files';\n\nconstants.MaxConcurrentDownloadTasks = 3;\n\nmodule.exports = constants;\n",
    "var CryptoJS = require('node-cryptojs-aes').CryptoJS;\nvar AES = CryptoJS.AES;\n\nmodule.exports = (function () {\n\n    function CryptographicProvider(options) {\n        this.options = options;\n    }\n\n    CryptographicProvider.prototype = {\n        _getKey: function () {\n            return this.options.encryption.key;\n        },\n\n        _canEncryptDecrypt: function (content) {\n            return this._getKey() && content !== null && content !== undefined;\n        },\n\n        encrypt: function (content) {\n            if (!this._canEncryptDecrypt(content)) {\n                return content;\n            }\n\n            return AES.encrypt(content, this._getKey()).toString();\n        },\n\n        decrypt: function (content) {\n            if (!this._canEncryptDecrypt(content)) {\n                return content;\n            }\n\n            return AES.decrypt(content, this._getKey()).toString(CryptoJS.enc.Utf8);\n        }\n    };\n\n    return CryptographicProvider;\n}());",
    "var isNativeScript = Boolean(((typeof android !== 'undefined' && android && android.widget && android.widget.Button)\n|| (typeof UIButton !== 'undefined' && UIButton)));\n\nvar platform;\nvar isCordova = false;\nvar isWindowsPhone = false;\nvar isAndroid = false;\n\nif (isNativeScript) {\n    global.window = {\n        localStorage: {\n            removeItem: function () {\n            } //shim for mongo-query under nativescript\n        }\n    };\n\n} else if (typeof window !== 'undefined') {\n    isCordova = /^file:\\/{3}[^\\/]|x-wmapp/i.test(window.location.href) && /ios|iphone|ipod|ipad|android|iemobile/i.test(navigator.userAgent);\n    isWindowsPhone = isCordova && /iemobile/i.test(navigator.userAgent);\n    isAndroid = isCordova && cordova.platformId === 'android';\n}\n\nvar isNodejs = typeof exports === 'object' && typeof window === 'undefined';\nvar isRequirejs = typeof define === 'function' && define.amd;\nvar isDesktop = !isNativeScript && !isCordova && !isNodejs;\n\nif (isNativeScript) {\n    platform = 'ns';\n} else if (isNodejs) {\n    platform = 'nodejs';\n} else if (isDesktop) {\n    platform = 'desktop';\n} else if (isCordova) {\n    platform = 'cordova';\n}\n\nmodule.exports = {\n    isCordova: isCordova,\n    isNativeScript: isNativeScript,\n    isDesktop: isDesktop,\n    isWindowsPhone: isWindowsPhone,\n    isAndroid: isAndroid,\n    isNodejs: isNodejs,\n    isRequirejs: isRequirejs,\n    platform: platform\n};",
    "'use strict';\n\n/**\n * @class Helpers\n * @classdesc Everlive helper classes\n */\n\nvar platform = require('../everlive.platform');\n\nvar helpers = [];\n\nvar htmlHelper = require('./html/htmlHelper');\n\nif (platform.isCordova || platform.isDesktop) {\n    helpers.push({\n        name: 'html',\n        ctor: htmlHelper\n    });\n}\n\nmodule.exports = helpers;",
    "'use strict';\n\nvar platform = require('../../everlive.platform');\nvar common = require('../../common');\nvar _ = common._;\nvar utils = require('../../utils');\nvar rsvp = common.rsvp;\nvar HtmlHelperResponsiveModule = require('./htmlHelperResponsiveModule');\nvar HtmlHelperOfflineModule = require('./htmlHelperOfflineModule');\nvar constants = require('../../constants');\nvar EverliveError = require('../../EverliveError').EverliveError;\nvar EventEmitterProxy = require('../../EventEmitterProxy');\n\nmodule.exports = (function () {\n    var defaults = {\n        processOnLoad: false,\n        processOnResize: false,\n        loadingImageUrl: '',\n        errorImageUrl: '',\n        attributes: {\n            loadingImage: 'data-loading-image',\n            errorImage: 'data-error-image',\n            dpi: 'data-dpi',\n            imageSource: 'data-src',\n            fileSource: 'data-href',\n            enableOffline: 'data-offline',\n            enableResponsive: 'data-responsive'\n        }\n    };\n\n    /**\n     * @typedef Helpers.html\n     * @description Everlive helper for html related operations, such as processing html elements with specific tags.\n     */\n\n    function HtmlHelper(everlive, config) {\n        EventEmitterProxy.apply(this);\n\n        this._everlive = everlive;\n        this._settings = {\n            urlTemplate: '[protocol][hostname][apikey]/[operations][url]',\n            server: 'bs1.cdn.telerik.com/image/v1/'\n        };\n\n        config = config || {};\n\n        this.options = _.extend({}, defaults, config);\n        this.options.attributes = _.extend({}, defaults.attributes, config.attributes);\n\n        this._responsive = new HtmlHelperResponsiveModule(this);\n        this._offline = new HtmlHelperOfflineModule(this);\n\n        this._init();\n    }\n\n    HtmlHelper.prototype = {\n        _init: function _init() {\n            var self = this;\n            if (self.options.processOnLoad) {\n                window.addEventListener('load', this.processAll.bind(this), false);\n            }\n\n            if (this.options.processOnResize) {\n                window.addEventListener('resize', _.debounce(this.processAll.bind(this), 300), false);\n            }\n        },\n\n        _triggerOnProcessed: function _triggerOnProcessed(args) {\n            this._emitter.emit('processed', args);\n        },\n\n        _defaultProcessSettings: function _defaultProcessSettings(settings) {\n            return _.defaults({}, settings, {\n                responsive: true,\n                offline: true\n            });\n        },\n\n        _setLoadingUrl: function _setLoadingUrl(element) {\n            var loadingImageUri = element.getAttribute(this.options.attributes.loadingImage) || this.options.loadingImageUrl;\n            if (!loadingImageUri || utils.isElement.anchor(element)) {\n                return utils.successfulPromise();\n            }\n\n            return this._setUrl(element, loadingImageUri, true);\n        },\n\n        _getBackgroundSrc: function _getBackgroundSrc(el) {\n            var elStyle = window.getComputedStyle(el, null);\n            var backgrImage = elStyle.getPropertyValue('background-image');\n\n            var img = backgrImage !== 'none' ? backgrImage : false;\n            if (img) {\n                img = img.replace(/url\\(('?\"?)(.*?)\\1\\)/gi, '$2');\n            }\n\n            return img;\n        },\n\n        _setErrorUrl: function (element) {\n            var errorImageUrl = element.getAttribute(this.options.attributes.errorImage) || this.options.errorImageUrl;\n            if (!errorImageUrl || utils.isElement.anchor(element)) {\n                return utils.successfulPromise();\n            }\n\n            return this._setUrl(element, errorImageUrl, true);\n        },\n\n        _setUrl: function _setUrl(element, url, apply) {\n            var self = this;\n            return new rsvp.Promise(function (resolve, reject) {\n                var elAttr = self._getAttr(element);\n                if (utils.isElement.image(element) && elAttr === self.options.attributes.imageSource) {\n                    if (apply) {\n                        element.src = url;\n                        element.style.visibility = 'visible';\n                    } else {\n                        var img = new Image();\n\n                        img.onerror = function () {\n                            img = null;\n                            reject(new EverliveError('Can\\'t be loaded: ' + url));\n                        };\n\n                        img.onload = function () {\n                            img = null;\n                            self._setUrl(element, url, true)\n                                .then(resolve)\n                                .catch(reject);\n                        };\n\n                        img.src = url;\n                    }\n                } else {\n                    apply = true;\n                    if (elAttr) {\n                        var attr;\n                        if (elAttr === self.options.attributes.imageSource) {\n                            attr = 'src';\n                        } else if (elAttr === self.options.attributes.fileSource) {\n                            attr = 'href';\n                        } else {\n                            attr = _.last(elAttr.split('-'));\n                        }\n\n                        element.setAttribute(attr, url);\n                    } else {\n                        element.style.backgroundImage = 'url(' + url + ')';\n                    }\n                }\n\n                if (apply) {\n                    resolve();\n                }\n            });\n        },\n\n        _getAttr: function _getAttr(element) {\n            if (element.getAttribute(this.options.attributes.imageSource)) {\n                return this.options.attributes.imageSource;\n            }\n\n            if (element.getAttribute(this.options.attributes.fileSource)) {\n                return this.options.attributes.fileSource;\n            }\n        },\n\n        _getUrl: function _getUrl(element) {\n            var url = element.getAttribute(this.options.attributes.imageSource)\n                || element.getAttribute(this.options.attributes.fileSource)\n                || this._getBackgroundSrc(element);\n\n            return url;\n        },\n\n        _wrapElements: function _wrapElements(elements) {\n            var self = this;\n\n            var results = _.map(elements, function (element) {\n                var tag = element.tagName.toLowerCase();\n\n                var evaluateDataAttr = function evaluateDataAttr(attr) {\n                    // data-a - true\n                    // data-a=\"\" - true\n                    // data-a=\"true\" - true\n                    // data-a=\"anything\" - true\n                    // data-a=\"false\" - false\n                    // missing - false\n                    var val;\n                    var dataVal = (element.attributes[attr] || {value: null}).value;\n                    if (dataVal === '') {\n                        val = true;\n                    } else if (!dataVal) {\n                        val = false;\n                    } else {\n                        try {\n                            val = JSON.parse(dataVal);\n                        } catch (e) {\n                            val = true;\n                        }\n                    }\n\n                    return val;\n                };\n\n                var canResponsive = evaluateDataAttr(self.options.attributes.enableResponsive);\n                var canOffline = evaluateDataAttr(self.options.attributes.enableOffline);\n\n                return {\n                    item: element,\n                    tag: tag,\n                    operations: {\n                        responsive: canResponsive,\n                        offline: canOffline\n                    }\n                };\n            });\n\n            return results;\n        },\n\n        /**\n         * @method process\n         * @memberOf Helpers.html\n         * @param {HtmlElement|HtmlElement[]} elements\n         * @param {Object} settings A settings specifying custom behavior.\n         * @param {boolean} [settings.responsive] Whether to process the data-responsive attributes that help implement Responsive Images.\n         * @param {boolean} [settings.offline] Whether to process the data-offline attributes that help implement offline files.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n\n        /**\n         * @method process\n         * @memberOf Helpers.html\n         * @param {HtmlElement|HtmlElement[]} elements\n         * @param {Object} settings A settings specifying custom behavior.\n         * @param {boolean} [settings.responsive] Whether to process the data-responsive attributes that help implement Responsive Images.\n         * @param {boolean} [settings.offline] Whether to process the data-offline attributes that help implement offline files.\n         * @returns {Promise} A promise to the process state.\n         */\n        process: function process(elements, settings, success, error) {\n            var self = this;\n\n            return utils.buildPromise(function (resolve) {\n                settings = self._defaultProcessSettings(settings);\n                if (_.isArray(elements) || elements instanceof NodeList || elements.length) {\n                    elements = _.flatten(elements);\n                } else {\n                    elements = [elements];\n                }\n\n                var wrappedElements = self._wrapElements(elements);\n                var promises = [];\n                _.each(wrappedElements, function (element) {\n                    var result = {\n                        element: element.item,\n                        responsive: false,\n                        offline: false\n                    };\n\n                    var dataUrl = self._getUrl(result.element);\n\n                    if (!dataUrl) {\n                        return promises.push(utils.successfulPromise(result));\n                    }\n\n                    var canResponsive = settings.responsive ? element.operations.responsive : false;\n                    var canOffline = settings.offline ? element.operations.offline : false;\n\n                    if (!canResponsive && !canOffline) {\n                        return promises.push(self._setUrl(result.element, dataUrl, true)\n                            .then(function () {\n                                return result;\n                            }));\n                    }\n\n                    var promise = self._setLoadingUrl(result.element);\n                    var handleOperation = function handleOperation(operation, url) {\n                        if (url) {\n                            result[operation] = true;\n                            return url;\n                        }\n                    };\n\n                    if (canResponsive) {\n                        promise = promise.then(function () {\n                            return self._responsive.responsiveImage(element, dataUrl)\n                                .then(handleOperation.bind(this, 'responsive'));\n                        });\n                    }\n\n                    if (canOffline) {\n                        promise = promise.then(function (responsiveSrc) {\n                            return self._offline.processOffline(responsiveSrc || dataUrl)\n                                .then(handleOperation.bind(this, 'offline'));\n                        });\n                    }\n\n                    promise = promise.then(function (finalUrl) {\n                        return self._setUrl(result.element, finalUrl)\n                            .then(function () {\n                                return result;\n                            });\n                    }).catch(function (err) {\n                        return self._setErrorUrl(result.element)\n                            .then(function () {\n                                throw {\n                                    element: result.element,\n                                    error: err\n                                }\n                            });\n                    });\n\n                    promises.push(promise);\n                });\n\n                rsvp.allSettled(promises)\n                    .then(function (results) {\n                        var processed = [];\n                        var failed = [];\n\n                        _.each(results, function (result) {\n                            if (result.state === 'fulfilled') {\n                                processed.push(result.value);\n                            } else {\n                                failed.push(result.reason);\n                            }\n                        });\n\n                        var result = {\n                            processed: processed,\n                            failed: failed\n                        };\n\n                        self._triggerOnProcessed(result);\n                        resolve(result);\n                    });\n            }, success, error);\n        },\n\n        /**\n         * @method processAll\n         * @memberOf Helpers.html\n         * @param {Object} settings A settings specifying custom behavior.\n         * @param {boolean} [settings.responsive] Whether to process the data-responsive attributes that help implement Responsive Images.\n         * @param {boolean} [settings.offline] Whether to process the data-offline attributes that help implement offline files.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n\n        /**\n         * @method processAll\n         * @memberOf Helpers.html\n         * @param {Object} settings A settings specifying custom behavior.\n         * @param {boolean} [settings.responsive] Whether to process the data-responsive attributes that help implement Responsive Images.\n         * @param {boolean} [settings.offline] Whether to process the data-offline attributes that help implement offline files.\n         * @returns {Promise} A promise to the process state.\n         */\n        processAll: function processAll(settings, success, error) {\n            settings = this._defaultProcessSettings(settings);\n            var responsiveSelector = '[' + this.options.attributes.enableResponsive + ']';\n            var offlineSelector = '[' + this.options.attributes.enableOffline + ']';\n\n            var responsiveElements = [];\n            if (settings.responsive) {\n                responsiveElements = document.querySelectorAll(responsiveSelector);\n            }\n\n            var offlineElements = [];\n            if (settings.offline) {\n                offlineElements = document.querySelectorAll(offlineSelector);\n            }\n\n            var slice = [].slice;\n            var elements = _.unique(slice.call(responsiveElements).concat(slice.call(offlineElements)));\n\n\n            return this.process(elements, settings, success, error);\n        }\n    };\n\n    return HtmlHelper;\n}());\n",
    "'use strict';\n\nvar utils = require('../../utils');\nvar EverliveErrorModule = require('../../EverliveError');\nvar EverliveErrors = EverliveErrorModule.EverliveErrors;\nvar EverliveError = EverliveErrorModule.EverliveError;\nvar constants = require('../../constants');\nvar path = require('path');\nvar common = require('../../common');\nvar _ = common._;\n\nmodule.exports = (function () {\n    function HtmlHelperOfflineModule(htmlHelper) {\n        this.htmlHelper = htmlHelper;\n    }\n\n    HtmlHelperOfflineModule.prototype = {\n        processOffline: function (url) {\n            var self = this;\n\n            if (!self.htmlHelper._everlive.offlineStorage.files) {\n                return utils.rejectedPromise(new EverliveError('Offline storage must be enabled in order to use the offline features of the images component.'));\n            }\n\n            return self.htmlHelper._everlive.offlineStorage.files.downloadOffline(url)\n                .then(function (localUrl) {\n                    return localUrl;\n                })\n                .catch(function (err) {\n                    if (err.code !== EverliveErrors.cannotDownloadOffline.code) {\n                        throw err;\n                    }\n\n                    return self.htmlHelper._everlive.offlineStorage._offlineFilesProcessor\n                        .getOfflineFilesData()\n                        .then(function (offlineFilesData) {\n                            var basename = path.basename(url);\n                            var oldFile = _.find(offlineFilesData, function (entry) {\n                                if (entry.onlineLocation && entry.offlineLocation) {\n                                    var onlineLocation = entry.onlineLocation;\n                                    var basenameIndex = onlineLocation.lastIndexOf(basename);\n                                    return basenameIndex !== -1;\n                                }\n                            });\n\n                            if (oldFile) {\n                                return oldFile.offlineLocation;\n                            }\n\n                            throw new EverliveError('Cannot find offline image ' + url, EverliveErrors.missingOrInvalidFileContent.code);\n                        });\n                });\n        }\n    };\n\n    return HtmlHelperOfflineModule;\n}());",
    "'use strict';\n\nvar common = require('../../common');\nvar _ = common._;\nvar rsvp = common.rsvp;\nvar EverliveError = require('../../EverliveError').EverliveError;\nvar constants = require('../../constants');\nvar utils = require('../../utils');\n\nmodule.exports = (function () {\n    function HtmlHelperResponsiveModule(htmlHelper) {\n        this.htmlHelper = htmlHelper;\n    }\n\n    HtmlHelperResponsiveModule.prototype = {\n        getBackgroundWidth: function getBackgroundWidth(el) {\n            return Math.ceil(el.offsetWidth);\n        },\n\n        parseParamsString: function parseParamsString(str) {\n            if (!str || typeof str === 'undefined' || str.length <= 1) {\n                return false;\n            }\n\n            var isUserResize = false;\n            var params = [];\n            var tmp = str.split('/');\n            var ii = tmp.length;\n\n            for (var i = 0; i < ii; i++) {\n                var item = tmp[i].split('='),\n                    tmpObj = {};\n                if (typeof item[1] === 'undefined') {\n                    item[1] = false;\n                } else {\n                    item[1] = unescape(item[1].replace(/\\+/g, ' '));\n                }\n\n                tmpObj[item[0]] = item[1];\n                params.push(tmpObj);\n                if (item[0] === 'resize') {\n                    isUserResize = true;\n                }\n            }\n            return {\n                params: params,\n                isUserResize: isUserResize\n            };\n        },\n\n        getImgParams: function getImgParams(src) {\n            var operations;\n            var imgUrl = src.replace(/.*?resize=[^//]*\\//gi, '');\n            var protocolRe = new RegExp('https?://', 'gi');\n            var serverRe = new RegExp(this.htmlHelper._settings.server, 'gi');\n            var apiKeyRe = new RegExp(this.htmlHelper._everlive.apiKey + '/', 'gi');\n\n            operations = src.replace(imgUrl, '').replace(protocolRe, '').replace(serverRe, '').replace(apiKeyRe, '').toLowerCase();\n            if (operations !== '') {\n                operations = operations.indexOf('/') ? operations.substring(0, operations.length - 1) : operations;\n            } else {\n                operations = false;\n            }\n\n            operations = this.parseParamsString(operations);\n            // If it's a user resize operation, use the passed url in the data-src property\n            if (operations.isUserResize) {\n                imgUrl = src;\n            }\n\n            return {\n                imgUrl: imgUrl,\n                operations: operations.params,\n                isUserResize: operations.isUserResize\n            };\n        },\n\n        hasClass: function hasClass(el, cl) {\n            var regex = new RegExp('(?:\\\\s|^)' + cl + '(?:\\\\s|$)');\n            return !!el.className.match(regex);\n        },\n\n        getImageWidth: function getImageWidth(el) {\n            var parentEl = el.parentNode;\n            var parentWidth = parentEl.offsetWidth;\n            var itemStyle = window.getComputedStyle(parentEl, null);\n            var pl = parseFloat(itemStyle.getPropertyValue('padding-left'));\n            var pr = parseFloat(itemStyle.getPropertyValue('padding-right'));\n            var bl = parseFloat(itemStyle.getPropertyValue('border-left-width'));\n            var br = parseFloat(itemStyle.getPropertyValue('border-right-width'));\n\n            return Math.abs(parentWidth - Math.ceil(pl + pr + bl + br));\n        },\n\n        getDevicePixelRatio: function getDevicePixelRatio() {\n            return window.devicePixelRatio ? window.devicePixelRatio : 1;\n        },\n\n        getPixelRatio:function getPixelRatio(el) {\n            var pixelDensity = el.getAttribute(this.htmlHelper.options.attributes.dpi) || '';\n            return pixelDensity !== '' ? _.isNumber(pixelDensity) ? parseFloat(pixelDensity) : false : this.getDevicePixelRatio();\n        },\n\n        getImgParamsString: function getImgParamsString(image, params) {\n            var paramsStr = '';\n            var i = 0;\n            var ii = params.length;\n            for (; i < ii; i++) {\n                var item = params[i];\n                var key = _.keys(item)[0];\n                var value;\n\n                if (!utils.isElement.image(image) && key === 'resize') {\n                    continue;\n                }\n\n                var pixelDensity = this.getPixelRatio(image.item);\n                pixelDensity = (pixelDensity) ? ',pd:' + pixelDensity : '';\n                for (var k in item) {\n                    value = (key === 'resize') ? item[k] + pixelDensity : item[k];\n                }\n\n                paramsStr += key + '=' + value + '/';\n            }\n\n            return paramsStr;\n        },\n\n        responsiveImage: function responsiveImage(item, dataSrc) {\n            var self = this;\n            var image = _.extend({}, item);\n            var element = image.item;\n            var tag = image.tag;\n\n            var isImage = utils.isElement.image(tag);\n            var imgWidth;\n\n            image = _.extend({}, image, self.getImgParams(dataSrc));\n\n            if (!image.isUserResize) {\n                imgWidth = (!isImage) ? self.getBackgroundWidth(element) : self.getImageWidth(element);\n            }\n\n            imgWidth = imgWidth ? imgWidth : false;\n            var src = image.isUserResize ? image.imgUrl : self.getImgSrc(image, imgWidth);\n\n            return new rsvp.Promise(function (resolve) {\n                if (!imgWidth && !image.isUserResize) { // we don't have the width of the user image either.\n                    // if this element is not visible, we don't have to process it.\n\n                    return resolve();\n                }\n\n                return resolve(src);\n            });\n        },\n\n        getImgSrc: function getImgSrc(image, imgWidth) {\n            var protocol = this.htmlHelper._everlive.setup.scheme + '://';\n            var apiKey = this.htmlHelper._everlive.setup.apiKey;\n            var server = this.htmlHelper._settings.server;\n            var url = this.htmlHelper._settings.urlTemplate;\n            var pixelDensity = this.getPixelRatio(image.item);\n\n            pixelDensity = pixelDensity ? ',pd:' + pixelDensity : '';\n\n            url = url.replace('[protocol]', protocol);\n            url = url.replace('[apikey]', apiKey ? apiKey : '');\n            url = url.replace('[hostname]', server);\n\n            var params = image.operations || false;\n            if (params) {\n                var operations = '';\n                params = this.getImgParamsString(image, params);\n                if (utils.isElement.image(image.tag)) {\n                    operations = imgWidth ? 'resize=w:' + imgWidth + pixelDensity + '/' + params : params;\n                } else {\n                    operations = 'resize=w:' + imgWidth + pixelDensity + '/' + params;\n                }\n                url = url.replace('[operations]', operations);\n            } else {\n                url = url.replace('[operations]', 'resize=w:' + imgWidth + pixelDensity + '/');\n            }\n\n            url = url.replace('[url]', image.imgUrl);\n            return url;\n        }\n    };\n\n    return HtmlHelperResponsiveModule;\n}());",
    "/*!\n The MIT License (MIT)\n Copyright (c) 2013 Telerik AD\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.y distributed under the MIT license.\n */\n/*!\n Everlive SDK\n Version 1.5.6\n */\n(function () {\n    var Everlive = require('./Everlive');\n    var platform = require('./everlive.platform');\n    var common = require('./common');\n\n    if (!platform.isNativeScript && !platform.isNodejs) {\n        var kendo = require('./kendo/kendo.everlive');\n        Everlive.createDataSource = kendo.createDataSource;\n        Everlive.createHierarchicalDataSource = kendo.createHierarchicalDataSource;\n    }\n\n    //Global event handlers for push notification events. Required by the cordova PushNotifications plugin that we use.\n    Everlive.PushCallbacks = {};\n    Everlive.Offline = {};\n\n    Everlive.Query = require('./query/Query');\n    Everlive.QueryBuilder = require('./query/QueryBuilder');\n    Everlive.GeoPoint = require('./GeoPoint');\n    Everlive.Constants = require('./constants');\n    Everlive.Request = require('./Request');\n    Everlive.Data = require('./types/Data');\n    Everlive._utils = require('./utils');\n    Everlive._traverseAndRevive = Everlive._utils.parseUtilities.traverseAndRevive;\n    Everlive._common = require('./common');\n\n    var persistersModule = require('./offline/offlinePersisters');\n    Everlive.persister = {\n        LocalStorage: persistersModule.LocalStoragePersister,\n        FileSystem: persistersModule.FileSystemPersister\n    };\n\n    module.exports = Everlive;\n}());",
    "var QueryBuilder = require('../query/QueryBuilder');\nvar Query = require('../query/Query');\nvar Request = require('../Request');\nvar constants = require('../constants');\nvar _ = require('../common')._;\nvar Everlive = require('../Everlive');\nvar EverliveError = require('../EverliveError').EverliveError;\n\n(function () {\n    'use strict';\n\n    if (typeof window !== 'undefined' && typeof window.jQuery === 'undefined' || typeof window.kendo === 'undefined' || _.isEmpty(window.kendo.data)) {\n        return;\n    }\n\n    var $ = window.jQuery;\n    var kendo = window.kendo;\n\n    var extend = $.extend;\n\n    var everliveTransport = kendo.data.RemoteTransport.extend({\n        init: function (options) {\n            this.everlive$ = options.dataProvider || Everlive.$;\n            if (!this.everlive$) {\n                throw new Error('An instance of the Backend services sdk must be provided.');\n            }\n\n            if (!options.typeName) {\n                throw new Error('A type name must be provided.');\n            }\n\n            this.headers = options.headers;\n\n            this.dataCollection = this.everlive$.data(options.typeName);\n            kendo.data.RemoteTransport.fn.init.call(this, options);\n        },\n\n        read: function (options) {\n            var methodOption = this.options['read'];\n            if (methodOption && methodOption.url) {\n                return kendo.data.RemoteTransport.fn.read.call(this, options);\n            }\n            var methodHeaders;\n            if (methodOption && methodOption.headers) {\n                methodHeaders = methodOption.headers;\n            }\n            var query = translateKendoQuery(options.data);\n            var everliveQuery = new Query(query.$where, null, query.$sort, query.$skip, query.$take);\n            var id = options.data.Id;\n\n            if (id) {\n                this.dataCollection.withHeaders(this.headers).withHeaders(methodHeaders).getById(id).then(options.success, options.error).catch(options.error);\n            } else {\n                this.dataCollection.withHeaders(this.headers).withHeaders(methodHeaders).get(everliveQuery).then(options.success, options.error).catch(options.error);\n            }\n        },\n\n        update: function (options) {\n            var methodOption = this.options['update'];\n            if (methodOption && methodOption.url) {\n                return kendo.data.RemoteTransport.fn.read.call(this, options);\n            }\n            var methodHeaders;\n            if (methodOption && methodOption.headers) {\n                methodHeaders = methodOption.headers;\n            }\n            var isMultiple = _.isArray(options.data.models);\n            if (isMultiple) {\n                throw new Error('Batch update is not supported.');\n            } else {\n                var itemForUpdate = options.data;\n                return this.dataCollection.withHeaders(this.headers).withHeaders(methodHeaders).updateSingle(itemForUpdate)\n                    .then(options.success.bind(this, itemForUpdate), options.error).catch(options.error);\n            }\n        },\n\n        create: function (options) {\n            var methodOption = this.options['create'];\n            if (methodOption && methodOption.url) {\n                return kendo.data.RemoteTransport.fn.read.call(this, options);\n            }\n            var methodHeaders;\n            if (methodOption && methodOption.headers) {\n                methodHeaders = methodOption.headers;\n            }\n            var isMultiple = _.isArray(options.data.models);\n            var createData = isMultiple ? options.data.models : options.data;\n\n            return this.dataCollection.withHeaders(this.headers).withHeaders(methodHeaders).create(createData)\n                .then(options.success.bind(this, createData), options.error).catch(options.error);\n        },\n\n        destroy: function (options) {\n            var methodOption = this.options['destroy'];\n            if (methodOption && methodOption.url) {\n                return kendo.data.RemoteTransport.fn.read.call(this, options);\n            }\n            var methodHeaders;\n            if (methodOption && methodOption.headers) {\n                methodHeaders = methodOption.headers;\n            }\n            var isMultiple = _.isArray(options.data.models);\n            if (isMultiple) {\n                throw new Error('Batch destroy is not supported.');\n            }\n            return this.dataCollection.withHeaders(this.headers).withHeaders(methodHeaders).destroy(options.data)\n                .then(options.success, options.error).catch(options.error);\n        }\n    });\n\n    $.extend(true, kendo.data, {\n        transports: {\n            everlive: everliveTransport\n        },\n        schemas: {\n            everlive: {\n                type: 'json',\n                total: function (data) {\n                    return data.hasOwnProperty('count') ? data.count : data.Count;\n                },\n                data: function (data) {\n                    return data.result || Everlive._traverseAndRevive(data.Result) || data;\n                },\n                model: {\n                    id: constants.idField\n                }\n            }\n        }\n    });\n\n    function translateKendoQuery(data) {\n        var result = {};\n        if (data) {\n            if (data.skip) {\n                result.$skip = data.skip;\n                delete data.skip;\n            }\n            if (data.take) {\n                result.$take = data.take;\n                delete data.take;\n            }\n            if (data.sort) {\n                var sortExpressions = data.sort;\n                var sort = {};\n                if (!$.isArray(sortExpressions)) {\n                    sortExpressions = [sortExpressions];\n                }\n                $.each(sortExpressions, function (idx, value) {\n                    sort[value.field] = value.dir === 'asc' ? 1 : -1;\n                });\n                result.$sort = sort;\n                delete data.sort;\n            }\n            if (data.filter) {\n                var filter = filterBuilder.build(data.filter);\n                result.$where = filter;\n                delete data.filter;\n            }\n        }\n        return result;\n    }\n\n    var regexOperations = ['startswith', 'startsWith', 'endswith', 'endsWith', 'contains'];\n\n    var filterBuilder = {\n        build: function (filter) {\n            return filterBuilder._build(filter);\n        },\n        _build: function (filter) {\n            if (filterBuilder._isRaw(filter)) {\n                return filterBuilder._raw(filter);\n            }\n            else if (filterBuilder._isSimple(filter)) {\n                return filterBuilder._simple(filter);\n            }\n            else if (filterBuilder._isRegex(filter)) {\n                return filterBuilder._regex(filter);\n            }\n            else if (filterBuilder._isAnd(filter)) {\n                return filterBuilder._and(filter);\n            }\n            else if (filterBuilder._isOr(filter)) {\n                return filterBuilder._or(filter);\n            }\n        },\n        _isRaw: function (filter) {\n            return filter.operator === '_raw';\n        },\n        _raw: function (filter) {\n            var fieldTerm = {};\n            fieldTerm[filter.field] = filter.value;\n            return fieldTerm;\n        },\n        _isSimple: function (filter) {\n            return typeof filter.logic === 'undefined' && !filterBuilder._isRegex(filter);\n        },\n        _simple: function (filter) {\n            var term = {}, fieldTerm = {};\n            var operator = filterBuilder._translateoperator(filter.operator);\n            if (operator) {\n                term[operator] = filter.value;\n            }\n            else {\n                term = filter.value;\n            }\n            fieldTerm[filter.field] = term;\n            return fieldTerm;\n        },\n        _isRegex: function (filter) {\n            return $.inArray(filter.operator, regexOperations) !== -1;\n        },\n        _regex: function (filter) {\n            var fieldTerm = {};\n            var regex = filterBuilder._getRegex(filter);\n            fieldTerm[filter.field] = filterBuilder._getRegexValue(regex);\n            return fieldTerm;\n        },\n        _getRegex: function (filter) {\n            var pattern = filter.value;\n            var filterOperator = filter.operator;\n            switch (filterOperator) {\n                case 'contains':\n                    return new RegExp(\".*\" + pattern + \".*\", \"i\");\n                case 'startsWith': // removing the camel case operators will be a breaking change\n                case 'startswith': // the Kendo UI operators are in lower case\n                    return new RegExp(\"^\" + pattern, \"i\");\n                case 'endsWith':\n                case 'endswith':\n                    return new RegExp(pattern + \"$\", \"i\");\n            }\n            throw new Error(\"Unknown operator type.\");\n        },\n        _getRegexValue: function (regex) {\n            return QueryBuilder.prototype._getRegexValue.call(this, regex);\n        },\n        _isAnd: function (filter) {\n            return filter.logic === 'and';\n        },\n        _and: function (filter) {\n            var i, l, term, result = {};\n            var operands = filter.filters;\n            for (i = 0, l = operands.length; i < l; i++) {\n                term = filterBuilder._build(operands[i]);\n                result = filterBuilder._andAppend(result, term);\n            }\n            return result;\n        },\n        _andAppend: function (andObj, newObj) {\n            return QueryBuilder.prototype._andAppend.call(this, andObj, newObj);\n        },\n        _isOr: function (filter) {\n            return filter.logic === 'or';\n        },\n        _or: function (filter) {\n            var i, l, term, result = [];\n            var operands = filter.filters;\n            for (i = 0, l = operands.length; i < l; i++) {\n                term = filterBuilder._build(operands[i]);\n                result.push(term);\n            }\n            return {$or: result};\n        },\n        _translateoperator: function (operator) {\n            switch (operator) {\n                case 'eq':\n                    return null;\n                case 'neq':\n                    return \"$ne\";\n                case 'gt':\n                    return \"$gt\";\n                case 'lt':\n                    return \"$lt\";\n                case 'gte':\n                    return \"$gte\";\n                case 'lte':\n                    return \"$lte\";\n            }\n            throw new Error(\"Unknown operator type.\");\n        }\n    };\n\n    /**\n     * Creates a new Kendo UI [DataSource](http://docs.telerik.com/kendo-ui/api/javascript/data/datasource) that manages a certain Backend Services content type.\n     * Kendo UI [DataSource](http://docs.telerik.com/kendo-ui/api/javascript/data/datasource) is used in conjunction with other Kendo UI widgets (such as [ListView](http://docs.telerik.com/kendo-ui/web/listview/overview) and [Grid](http://docs.telerik.com/kendo-ui/web/grid/overview)) to provide an easy way to render data from Backend Services.\n     * *including Kendo UI scripts is required*.\n     * @param options data source options. See the Kendo UI documentation for [DataSource](http://docs.telerik.com/kendo-ui/api/javascript/data/datasource) for more information.\n     * @param options.transport.typeName The content type name in Backend Services that will be managed.\n     * @returns {DataSource} A new instance of Kendo UI DataSource. See the Kendo UI documentation for [DataSource](http://docs.telerik.com/kendo-ui/api/javascript/data/datasource) for more information.\n     * @example ```js\n     * var booksDataSource = Everlive.createDataSource({\n     *   transport: {\n     *     typeName: 'Books'\n     *   }\n     * });\n     * ```\n     */\n    var createDataSource = function (options) {\n        options = options || {};\n        var typeName = options.typeName;\n        var everlive$ = options.dataProvider || Everlive.$;\n        if (!everlive$) {\n            throw new Error(\"You need to instantiate an Everlive instance in order to create a Kendo UI DataSource.\");\n        }\n\n        if (!typeName) {\n            throw new Error(\"You need to specify a 'typeName' in order to create a Kendo UI DataSource.\");\n        }\n\n        return everlive$.getKendoDataSource(typeName, options);\n    };\n\n    /**\n     * Creates a new Kendo UI [HierarchicalDataSource](http://docs.telerik.com/kendo-ui/api/javascript/data/hierarchicaldatasource) that manages a certain Backend Services content type and can expand a chain of relations.\n     * Kendo UI [HierarchicalDataSource](http://docs.telerik.com/kendo-ui/api/javascript/data/hierarchicaldatasource) is used in conjunction with other Kendo UI widgets (such as [TreeView](http://docs.telerik.com/kendo-ui/web/treeview/overview)) to render data from Backend Services in a structured way.\n     * The chain of relations is defined by specifying the field names that contain the relation on each level. For example a generic hierarchy chain is a content type 'Continents' with relation to 'Countries', which in turn contains a relation to 'Towns'.\n     * *including Kendo UI scripts is required*.\n     * @param options data source Options for [HierarchicalDataSource](http://docs.telerik.com/kendo-ui/api/javascript/data/hierarchicaldatasource).\n     * @param options.typeName Name of the main content type for the data source.\n     * @param {ExpandDefinition[]} options.expand An array of expand definitions. It defines the levels of hierarchy by specifying the relation fields. An expand definition can either be the field name as a **string**, or an **object** that allows additional options.\n     * @param {string} ExpandDefinition - The field name of the relation that will be expanded. Only supported in online mode.\n     * @param {string} ExpandDefinition.relation - *Required*. The field name of the relation that will be expanded.\n     * @param {string} ExpandDefinition.typeName - *Required in offline mode*. The type name of the relation that will be expanded.\n     * @param {object} ExpandDefinition.filter - An object specifying the filter expression.\n     * @param {object} ExpandDefinition.sort - An object specifying the sort expression.\n     * @param {object} ExpandDefinition.skip - A number specifying the skip value.\n     * @param {object} ExpandDefinition.take - A number specifying the take value.\n     * @param {object} ExpandDefinition.fields - An object specifying the fields expression.\n     * @returns {HierarchicalDataSource} A new instance of Kendo UI HierarchicalDataSource. See the Kendo UI documentation for [HierarchicalDataSource](http://docs.telerik.com/kendo-ui/api/javascript/data/hierarchicaldatasource).\n     * @example ```js\n     * var el = new Everlive('your-api-key-here');\n     * var continents = Everlive.createHierarchicalDataSource({\n     *   \"typeName\": \"Continents\",\n     *   \"expand\": [\"Countries\", \"Towns\"]\n     * });\n     *\n     * ...\n     * (\"#treeview\").kendoTreeView({\n     *   dataSource: continents,\n     *   dataTextField: [\"ContinentName\", \"CountryName\", \"TownName\"]\n     * });\n     * ```\n     */\n    var createHierarchicalDataSource = function (options) {\n        var typeName = options.typeName;\n        var everlive$ = options.dataProvider || Everlive.$;\n        if (!everlive$) {\n            throw new Error(\"You need to instantiate an Everlive instance in order to create a Kendo UI DataSource.\");\n        }\n        if (!typeName) {\n            throw new Error(\"You need to specify a 'typeName' in order to create a Kendo UI DataSource.\");\n        }\n        return everlive$.getHierarchicalDataSource(typeName, options);\n\n    };\n\n    /**\n     * Get a Kendo UI DataSource that is attached to the current instance of the SDK with default options.\n     * @method getKendoDataSource\n     * @memberOf Everlive.prototype\n     * @param {String} typeName The corresponding type name for the DataSource.\n     * @param {Object} [datasourceOptions] Additional DataSource options.\n     * @returns {DataSource}\n     */\n    Everlive.prototype.getKendoDataSource = function (typeName, datasourceOptions) {\n        datasourceOptions = _.extend({}, datasourceOptions);\n        if (datasourceOptions.hasOwnProperty('serverGrouping') && datasourceOptions.serverGrouping === true) {\n            throw new EverliveError('Server Grouping is not supported.');\n        }\n\n        var defaultEverliveOptions = {\n            type: 'everlive',\n            transport: {\n                typeName: typeName,\n                dataProvider: this\n            }\n        };\n\n        var options = _.defaults(defaultEverliveOptions, datasourceOptions);\n        return new kendo.data.DataSource(options);\n    };\n\n\n    var getUrlGeneratorForNode = function (baseUrl, expandArray) {\n        var expandField = getRelationFieldForExpandNode(expandArray[expandArray.length - 1]);\n        var pathArray = expandArray.slice(0, expandArray.length - 1);\n        var pathUrl = '/_expand';\n        for (var i = 0; i < pathArray.length; i++) {\n            pathUrl += '/' + getRelationFieldForExpandNode(pathArray[i]);\n        }\n        return (function (pathUrl, expandField) {\n            return function (options) {\n                var url = baseUrl + '';\n                if (options.Id && expandField) {//if we are expanding\n                    url += pathUrl + '/' + options.Id + '/' + expandField;\n                }\n                return url;\n            }\n        }(pathUrl, expandField));\n    };\n\n    var getHeadersForExpandNode = function (expandNode) {\n        if (typeof expandNode === \"string\") {\n            return {};\n        } else {\n            return {\n                'X-Everlive-Filter': JSON.stringify(expandNode.filter),\n                'X-Everlive-Sort': JSON.stringify(expandNode.sort),\n                'X-Everlive-Single-Field': expandNode.singleField,\n                'X-Everlive-Skip': expandNode.skip,\n                'X-Everlive-Take': expandNode.take,\n                'X-Everlive-Fields': JSON.stringify(expandNode.fields)\n            }\n        }\n    };\n\n    var getRelationFieldForExpandNode = function (expandNode) {\n        if (typeof expandNode === \"string\") {\n            return expandNode;\n        } else {\n            if (expandNode.relation) {\n                return expandNode.relation;\n            } else {\n                throw new Error(\"You need to specify a 'relation' for an expand node when using the object notation\");\n            }\n        }\n    };\n\n    /**\n     * Get a Kendo UI HierarchicalDataSource that is attached to the current instance of the SDK with default options.\n     * @method getHierarchicalDataSource\n     * @memberOf Everlive.prototype\n     * @param {String} typeName The corresponding type name for the DataSource.\n     * @param {Object} dataSourceOptions Additional DataSource options that describe the hierarchical structure.\n     * @returns {HierarchicalDataSource}\n     */\n    Everlive.prototype.getHierarchicalDataSource = function (typeName, dataSourceOptions) {\n        dataSourceOptions = dataSourceOptions || {};\n        if (dataSourceOptions.hasOwnProperty('serverGrouping') && dataSourceOptions.serverGrouping === true) {\n            throw new EverliveError('Server Grouping is not supported.');\n        }\n        var expand = dataSourceOptions.expand || dataSourceOptions;\n        delete dataSourceOptions.expand;\n        if (!typeName) {\n            throw new Error(\"You need to specify a 'typeName' in order to create a Kendo UI HierarchicalDataSource.\");\n        }\n        if (!$.isArray(expand)) {\n            throw new Error(\"You need to set 'expand' array option in order to create a Kendo UI HierarchicalDataSource\");\n        }\n        var baseUrl = this.buildUrl() + typeName;\n\n        var expandSchema;\n        var isOfflineStorageEnabled = this._isOfflineStorageEnabled();\n        for (var i = expand.length - 1; i >= 0; i--) { //recursively build the hierarchical data source\n            var expandNode = expand[i];\n            if (isOfflineStorageEnabled) {\n                if (!$.isPlainObject(expandNode)) {\n                    throw new Error(\"When offline is enabled, each member of the expand array option must be an object. (Expand node index: \" + i + \")\");\n                }\n                if (!expandNode.relation) {\n                    throw new Error(\"When offline is enabled, each member of the expand array option must have a `relation` option set.  (Expand node index: \" + i + \")\");\n                }\n                if (!expandNode.typeName) {\n                    throw new Error(\"When offline is enabled, each member of the expand array option must have a `typeName` option set.  (Expand node index: \" + i + \")\");\n                }\n\n                var headers;\n                var expandExpression = {};\n                expandExpression[expandNode.relation] = {\n                    TargetTypeName: expandNode.typeName,\n                    Filter: expandNode.filter,\n                    Sort: expandNode.sort,\n                    Take: expandNode.take,\n                    Skip: expandNode.skip,\n                    Fields: expandNode.fields,\n                    SingleField: expandNode.singleField\n                };\n                headers = {\n                    'X-Everlive-Expand': JSON.stringify(expandExpression),\n                    'X-Everlive-Single-Field': expandNode.relation\n                };\n                var parentType;\n                if (i === 0) {\n                    parentType = typeName;\n                } else {\n                    parentType = expand[i - 1].typeName;\n                }\n                expandSchema = {\n                    model: {\n                        hasChildren: expandNode.relation,\n                        children: {\n                            type: \"everlive\",\n                            transport: {\n                                typeName: parentType,\n                                read: {\n                                    headers: headers\n                                }\n                            },\n                            schema: expandSchema\n                        }\n                    }\n                };\n            } else {\n                expandSchema = {\n                    model: {\n                        hasChildren: getRelationFieldForExpandNode(expandNode),\n                        children: {\n                            type: \"everlive\",\n                            transport: {\n                                read: {\n                                    url: getUrlGeneratorForNode(baseUrl, expand.slice(0, i + 1)),\n                                    headers: getHeadersForExpandNode(expandNode)\n                                }\n                            },\n                            schema: expandSchema\n                        }\n                    }\n                }\n            }\n        }\n        var options = {};\n        options.type = 'everlive';\n        options.transport = {\n            typeName: typeName,\n            dataProvider: this\n        };\n        options.schema = expandSchema;\n        if ($.isPlainObject(dataSourceOptions)) {\n            extend(true, options, dataSourceOptions);\n        }\n        return new kendo.data.HierarchicalDataSource(options);\n    };\n\n\n    module.exports = {\n        createDataSource: createDataSource,\n        createHierarchicalDataSource: createHierarchicalDataSource\n    };\n}());",
    "var _ = require('../common')._;\n\nvar deepExtend = require('./underscoreDeepExtends');\nvar compactObject = require('./underscoreCompactObject');\nvar isObjectEmpty = require('./underscoreIsObjectEmpty');\n\n_.mixin({'deepExtend': deepExtend});\n_.mixin({'compactObject': compactObject});\n_.mixin({'isEmptyObject': isObjectEmpty});",
    "var _ = require('underscore');\n\n//http://stackoverflow.com/questions/14058193/remove-empty-properties-falsy-values-from-object-with-underscore-js\nmodule.exports = function compactObject(o) {\n    var newObject = {};\n    _.each(o, function(v, k) {\n        if(v !== null && v !== undefined) {\n            newObject[k] = v\n        }\n    });\n\n    return newObject;\n};\n",
    "/*  Copyright (C) 2012-2014  Kurt Milam - http://xioup.com | Source: https://gist.github.com/1868955\n *   \n *  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n *  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n **/\n\n// Based conceptually on the _.extend() function in underscore.js ( see http://documentcloud.github.com/underscore/#extend for more details )\n\nvar _ = require('../common')._;\n\nmodule.exports = function deepExtend(obj) {\n    var parentRE = /#{\\s*?_\\s*?}/,\n        slice = Array.prototype.slice;\n\n    _.each(slice.call(arguments, 1), function (source) {\n        for (var prop in source) {\n            if (_.isUndefined(obj[prop]) || _.isFunction(obj[prop]) || _.isNull(source[prop]) || _.isDate(source[prop])) {\n                obj[prop] = source[prop];\n            }\n            else if (_.isString(source[prop]) && parentRE.test(source[prop])) {\n                if (_.isString(obj[prop])) {\n                    obj[prop] = source[prop].replace(parentRE, obj[prop]);\n                }\n            }\n            else if (_.isArray(obj[prop]) || _.isArray(source[prop])) {\n                if (!_.isArray(obj[prop]) || !_.isArray(source[prop])) {\n                    throw new Error('Trying to combine an array with a non-array (' + prop + ')');\n                } else {\n                    obj[prop] = _.reject(_.deepExtend(_.clone(obj[prop]), source[prop]), function (item) {\n                        return _.isNull(item);\n                    });\n                }\n            }\n            else if (_.isObject(obj[prop]) || _.isObject(source[prop])) {\n                if (!_.isObject(obj[prop]) || !_.isObject(source[prop])) {\n                    throw new Error('Trying to combine an object with a non-object (' + prop + ')');\n                } else {\n                    obj[prop] = _.deepExtend(_.clone(obj[prop]), source[prop]);\n                }\n            } else {\n                obj[prop] = source[prop];\n            }\n        }\n    });\n    return obj;\n};\n\n/**\n * Dependency: underscore.js ( http://documentcloud.github.com/underscore/ )\n *\n * Mix it in with underscore.js:\n * _.mixin({deepExtend: deepExtend});\n *\n * Call it like this:\n * var myObj = _.deepExtend(grandparent, child, grandchild, greatgrandchild)\n *\n * Notes:\n * Keep it DRY.\n * This function is especially useful if you're working with JSON config documents. It allows you to create a default\n * config document with the most common settings, then override those settings for specific cases. It accepts any\n * number of objects as arguments, giving you fine-grained control over your config document hierarchy.\n *\n * Special Features and Considerations:\n * - parentRE allows you to concatenate strings. example:\n *   var obj = _.deepExtend({url: \"www.example.com\"}, {url: \"http://#{_}/path/to/file.html\"});\n *   console.log(obj.url);\n *   output: \"http://www.example.com/path/to/file.html\"\n *\n * - parentRE also acts as a placeholder, which can be useful when you need to change one value in an array, while\n *   leaving the others untouched. example:\n *   var arr = _.deepExtend([100,    {id: 1234}, true,  \"foo\",  [250, 500]],\n *                          [\"#{_}\", \"#{_}\",     false, \"#{_}\", \"#{_}\"]);\n *   console.log(arr);\n *   output: [100, {id: 1234}, false, \"foo\", [250, 500]]\n *\n * - The previous example can also be written like this:\n *   var arr = _.deepExtend([100,    {id:1234},   true,  \"foo\",  [250, 500]],\n *                          [\"#{_}\", {},          false, \"#{_}\", []]);\n *   console.log(arr);\n *   output: [100, {id: 1234}, false, \"foo\", [250, 500]]\n *\n * - And also like this:\n *   var arr = _.deepExtend([100,    {id:1234},   true,  \"foo\",  [250, 500]],\n *                          [\"#{_}\", {},          false]);\n *   console.log(arr);\n *   output: [100, {id: 1234}, false, \"foo\", [250, 500]]\n *\n * - Array order is important. example:\n *   var arr = _.deepExtend([1, 2, 3, 4], [1, 4, 3, 2]);\n *   console.log(arr);\n *   output: [1, 4, 3, 2]\n *\n * - You can remove an array element set in a parent object by setting the same index value to null in a child object.\n *   example:\n *   var obj = _.deepExtend({arr: [1, 2, 3, 4]}, {arr: [\"#{_}\", null]});\n *   console.log(obj.arr);\n *   output: [1, 3, 4]\n *\n **/",
    "// http://stackoverflow.com/questions/4994201/is-object-empty\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isEmpty(obj) {\n\n    // null and undefined are \"empty\"\n    if (obj == null) return true;\n\n    // Assume if it has a length property with a non-zero value\n    // that that property is correct.\n    if (obj.length > 0)    return false;\n    if (obj.length === 0)  return true;\n\n    // Otherwise, does it have any properties of its own?\n    // Note that this doesn't handle\n    // toString and valueOf enumeration bugs in IE < 9\n    for (var key in obj) {\n        if (hasOwnProperty.call(obj, key)) return false;\n    }\n\n    return true;\n}\n\nmodule.exports = isEmpty;",
    "'use strict';\n\nvar utils = require('../utils');\nvar buildPromise = utils.buildPromise;\nvar Request = require('../Request');\nvar common = require('../common');\nvar rsvp = common.rsvp;\nvar _ = common._;\nvar reqwest = common.reqwest;\nvar uuid = common.uuid;\nvar path = require('path');\nvar CryptoJS = require('node-cryptojs-aes').CryptoJS;\nvar errors = require('../EverliveError');\nvar EverliveErrors = errors.EverliveErrors;\nvar EverliveError = errors.EverliveError;\nvar AutoQueue = require('../AutoQueue');\n\nvar OfflineFilesModule = function (offlineFilesProcessor, everlive, downloadsConcurrency) {\n    this._offlineFilesProcessor = offlineFilesProcessor;\n    this._everlive = everlive;\n    this._downloadsQueue = new AutoQueue(downloadsConcurrency);\n};\n\n/**\n * @class OfflineFilesModule\n * @classdesc A class that provides the means to operate with files in offline mode.\n * @protected\n */\nOfflineFilesModule.prototype = {\n    _getFilenameMetadata: function (location, offlineFileInfo) {\n        return new rsvp.Promise(function (resolve, reject) {\n            reqwest({\n                url: location,\n                method: 'HEAD',\n                async: true,\n                crossDomain: true\n            }).then(function (xmlResponse) {\n                var contentDispositionHeader = xmlResponse.getResponseHeader('Content-Disposition');\n                if (contentDispositionHeader) {\n                    var matches = /filename=\"?([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"?/i.exec(contentDispositionHeader);\n                    if (_.isArray(matches)) {\n                        offlineFileInfo.filename = matches[1];\n                    }\n                } else {\n                    offlineFileInfo.filename = path.basename(xmlResponse.responseURL);\n                }\n\n                resolve(xmlResponse.responseURL);\n            }).catch(reject);\n        });\n    },\n\n    /**\n     * Updates a file's content.\n     * @memberof OfflineFilesModule.prototype\n     * @method downloadOffline\n     * @param {string} location A file location or the id of a file stored in Backend Services.\n     * @param {boolean} overwrite Boolean option that indicates whether the file should be overwritten if it already exists offline.\n     * @returns {Promise} The promise for the request\n     */\n    /**\n     * Updates a file's content.\n     * @memberof OfflineFilesModule.prototype\n     * @method downloadOffline\n     * @param {string} location A file location or the id of a file stored in Backend Services.\n     * @param {boolean} overwrite Boolean option that indicates whether the file should be overwritten if it already exists offline.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    downloadOffline: function (location, overwrite, success, error) {\n        var self = this;\n\n        return buildPromise(function (success, error) {\n            self._downloadsQueue.enqueue(function (cb) {\n                var offlineFileInfo;\n                return self._getOfflineFileInfo(location)\n                    .then(function (_offlineFileInfo) {\n                        offlineFileInfo = _offlineFileInfo;\n                        if (overwrite) {\n                            return false;\n                        }\n\n                        return self.existsOffline(location);\n                    })\n                    .then(function (exists) {\n                        if (!exists) {\n                            if (self._everlive.isOnline()) {\n                                return utils.successfulPromise()\n                                    .then(function () {\n                                        if (!offlineFileInfo.filename) {\n                                            return self._getFilenameMetadata(location, offlineFileInfo);\n                                        }\n                                    })\n                                    .then(function (locationAfterRedirect) {\n                                        var location = locationAfterRedirect || offlineFileInfo.location;\n                                        return self._saveFile(location, offlineFileInfo.filename, null, offlineFileInfo.location);\n                                    });\n                            }\n\n                            error(new EverliveError(EverliveErrors.cannotDownloadOffline));\n                        } else {\n                            return self._getOfflineFileInfo(location)\n                                .then(function (fileInfo) {\n                                    return self._getOfflineLocation(fileInfo);\n                                });\n                        }\n                    })\n                    .then(function (result) {\n                        cb(null, result);\n                    })\n                    .catch(cb);\n            }, success, error);\n        }, success, error);\n    },\n\n    _saveFile: function (location, filename, id, cacheKey) {\n        var self = this;\n        var actualLocation;\n\n        return self._downloadFile(location, filename)\n            .then(function (_actualLocation) {\n                actualLocation = _actualLocation;\n                return self._offlineFilesProcessor.getOfflineFilesData();\n            })\n            .then(function (offlineFilesData) {\n                offlineFilesData.push({\n                    offlineLocation: actualLocation,\n                    onlineLocation: cacheKey || location,\n                    id: id\n                });\n\n                return self._offlineFilesProcessor.saveOfflineFilesData();\n            })\n            .then(function () {\n                return actualLocation;\n            });\n    },\n\n    /**\n     * Physically deletes the offline copies of all files.\n     * @memberof OfflineFilesModule.prototype\n     * @method purgeAll\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Physically deletes the offline copies of all files.\n     * @memberof OfflineFilesModule.prototype\n     * @method purgeAll\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    purgeAll: function (success, error) {\n        var self = this;\n\n        return utils.buildPromise(function (success, error) {\n            self._offlineFilesProcessor.fileStore.removeFilesDirectory()\n                .then(function () {\n                    return self._offlineFilesProcessor.filesMetaStore.removeFilesDirectory();\n                })\n                .then(function () {\n                    self._offlineFilesProcessor._offlineFilesData = null;\n                })\n                .then(success)\n                .catch(error);\n        }, success, error);\n    },\n\n    _getOfflineLocation: function (fileInfo) {\n        var self = this;\n        var url = fileInfo.location;\n        var filename = fileInfo.filename;\n        var id = fileInfo.Id;\n\n        return self._offlineFilesProcessor.getOfflineLocation(url, id)\n            .then(function (offlineUrl) {\n                if (offlineUrl) {\n                    return offlineUrl;\n                }\n\n                // if no url is provided this means that the file exists only offline\n                // the Uri field has not been populated by the server\n                if (id && !url) {\n                    return self._getFileUrlForId(id, filename);\n                }\n\n                return null;\n            });\n    },\n\n    _downloadFile: function (url, name) {\n        var self = this;\n\n        // TODO: [offline] this will not work in NativeScript at the moment\n        return new rsvp.Promise(function (resolve, reject) {\n            var fileTransfer = new FileTransfer();\n            var sanitizedUrl = self._sanitizeUrl(url);\n            var fileId = path.basename(sanitizedUrl);\n            var extension = path.extname(name);\n            var filename = fileId;\n            if (path.extname(sanitizedUrl) !== extension) {\n                filename += extension;\n            }\n\n            var fileParentDirectory = '';\n            if (!utils.isGuid(url)) {\n                var fileIdIndex = url.lastIndexOf(fileId);\n                var baseUrl = url.substr(0, fileIdIndex);\n                fileParentDirectory = CryptoJS.MD5(baseUrl).toString();\n            }\n\n            return self._offlineFilesProcessor.fileStore.getDataDirectory()\n                .then(function (dataDir) {\n                    return utils.joinPath(dataDir.nativeURL, self._offlineFilesProcessor.fileStore.filesDirectoryPath,\n                        fileParentDirectory, filename);\n                })\n                .then(function (location) {\n                    fileTransfer.download(url, location, function () {\n                        resolve(location);\n                    }, reject, true, {\n                        headers: self._everlive.buildAuthHeader()\n                    });\n                })\n                .catch(reject);\n        });\n    },\n\n    _sanitizeUrl: function (url) {\n        if (!url) {\n            return url;\n        }\n\n        var sanitizedUrl = encodeURI(url);\n        var questionMarkIndex = sanitizedUrl.lastIndexOf('?');\n        if (questionMarkIndex !== -1) {\n            sanitizedUrl = sanitizedUrl.substr(0, questionMarkIndex); //linux does not allow question marks in its filenames\n        }\n\n        return sanitizedUrl;\n    },\n\n    _getFileUrlForId: function (fileId, filename) {\n        var self = this;\n\n        return this._offlineFilesProcessor.fileStore.getDataDirectory()\n            .then(function (dataDirectory) {\n                var fileExtension = path.extname(filename);\n                return utils.joinPath(dataDirectory.nativeURL, self._offlineFilesProcessor.fileStore.filesDirectoryPath, fileId + fileExtension);\n            });\n    },\n\n    /**\n     * Checks if a file exists offline.\n     * @memberof OfflineFilesModule.prototype\n     * @method exists\n     * @param {String} location The location or file id to check.\n     * @returns {Promise} The promise for the request\n     */\n    /**\n     * Checks if a file exists offline.\n     * @memberof OfflineFilesModule.prototype\n     * @method exists\n     * @param {String} location The location or file id to check.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    existsOffline: function (location, success, error) {\n        var self = this;\n\n        return buildPromise(function (success, error) {\n            self._getOfflineFileInfo(location)\n                .then(function (fileInfo) {\n                    return self._getOfflineLocation(fileInfo);\n                })\n                .then(function (offlineUrl) {\n                    if (offlineUrl) {\n                        return self._offlineFilesProcessor.fileStore.getFileByAbsolutePath(offlineUrl);\n                    }\n                })\n                .then(function (offlineFile) {\n                    return !!offlineFile;\n                })\n                .then(success)\n                .catch(function (err) {\n                    if (err.code === EverliveErrors.itemNotFound.code) {\n                        return success(false);\n                    }\n\n                    return error.apply(this, arguments);\n                });\n        }, success, error);\n    },\n\n\n    /**\n     * Physically deletes the offline copy of a file.\n     * @memberof OfflineFilesModule.prototype\n     * @method purge\n     * @param {String} location The location or file id to remove.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Physically deletes the offline copy of a file.\n     * @memberof OfflineFilesModule.prototype\n     * @method purge\n     * @param {String} location The location or file id to check.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    purge: function (location, success, error) {\n        var self = this;\n\n        return buildPromise(function (success, error) {\n            self._getOfflineFileInfo(location)\n                .then(function (fileInfo) {\n                    return self._getOfflineLocation(fileInfo);\n                })\n                .then(function (location) {\n                    if (location) {\n                        return self._offlineFilesProcessor.purge(location);\n                    }\n                })\n                .then(success)\n                .catch(error);\n        }, success, error);\n    },\n\n    /**\n     * Gets the native URL for a file that is stored offline.\n     * @memberof OfflineFilesModule.prototype\n     * @method getOfflineLocation\n     * @param {String} location The location or file id to process.\n     * @returns {Promise} The promise for the request\n     */\n    /**\n     * Gets the native URL for a file that is stored offline.\n     * @memberof OfflineFilesModule.prototype\n     * @method getOfflineLocation\n     * @param {String} location The location or file id to process.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    getOfflineLocation: function (location, success, error) {\n        var self = this;\n\n        return buildPromise(function (success, error) {\n            self._getOfflineFileInfo(location)\n                .then(self._getOfflineLocation.bind(self))\n                .then(function (offlineLocation) {\n                    if (offlineLocation) {\n                        return self.existsOffline(offlineLocation)\n                            .then(function (exists) {\n                                if (exists) {\n                                    return offlineLocation;\n                                }\n\n                                return null;\n                            });\n                    }\n\n                    return null;\n                })\n                .then(success)\n                .catch(error);\n        }, success, error);\n    },\n\n    _getOfflineFileInfo: function (location) {\n        var self = this;\n        var sanitizedUrl = this._sanitizeUrl(location);\n\n        return new rsvp.Promise(function (resolve, reject) {\n            self._everlive.Files\n                .isSync(true)\n                .useOffline(true)\n                .getById(sanitizedUrl)\n                .then(function (response) {\n                    var file = response.result;\n                    resolve({\n                        location: file.Uri,\n                        filename: file.Filename,\n                        Id: sanitizedUrl\n                    });\n                })\n                .catch(function (err) {\n                    if (err && err.code === EverliveErrors.itemNotFound.code) {\n                        resolve({\n                            location: location\n                        });\n                    } else {\n                        reject(err);\n                    }\n                });\n        });\n    },\n\n    changeFileExtensionById: function (id, extension) {\n        var self = this;\n\n        if (typeof extension !== 'string') {\n            return new rsvp.Promise(function (resolve) {\n                resolve();\n            });\n        }\n\n        return self._changeExtension(id, extension);\n    },\n\n    _changeExtension: function (id, newExtension) {\n        var self = this;\n\n        var dataDir;\n\n        var fileStore = self._offlineFilesProcessor.fileStore;\n        var fileName = id + newExtension;\n        return fileStore.getFilesDirectory()\n            .then(function (directoryEntry) {\n                dataDir = directoryEntry;\n                return self.getOfflineLocation(id);\n            })\n            .then(function (localPath) {\n\n                var existingFileName = path.basename(localPath);\n                if (existingFileName !== fileName) {\n                    return fileStore.getFileByAbsolutePath(localPath)\n                        .then(function (fileEntry) {\n                            return fileStore.renameFile(dataDir, fileEntry, fileName);\n                        })\n                        .then(function () {\n                            return self._offlineFilesProcessor.getOfflineFilesData();\n                        })\n                        .then(function (offlineFilesData) {\n                            var mappedEntry = _.findWhere(offlineFilesData, {offlineLocation: localPath});\n                            if (!mappedEntry) {\n                                throw new EverliveError('Could not find a cached location for the specified file.');\n                            }\n\n                            var previousLocation = mappedEntry.offlineLocation;\n                            var previousExtension = path.extname(previousLocation);\n                            var actualLocation = previousLocation.slice(0, previousLocation.length - previousExtension.length) + newExtension;\n                            mappedEntry.offlineLocation = actualLocation;\n\n                            return self._offlineFilesProcessor.saveOfflineFilesData();\n                        });\n                }\n            });\n    }\n};\n\nmodule.exports = OfflineFilesModule;",
    "'use strict';\n\nvar EverliveErrorModule = require('../EverliveError');\nvar EverliveError = EverliveErrorModule.EverliveError;\nvar EverliveErrors = EverliveErrorModule.EverliveErrors;\nvar FileStore = require('../storages/FileStore');\nvar platform = require('../everlive.platform');\nvar constants = require('../constants');\nvar common = require('../common');\nvar rsvp = common.rsvp;\nvar utils = require('../utils');\nvar _ = common._;\nvar path = require('path');\n\nvar FILES_METADATA_FILE_NAME = 'filesMetadataMap';\n\nvar OfflineFilesProcessor = function (setup, everlive) {\n    this.fileStore = new FileStore(setup.files.storagePath, setup);\n    this.filesMetaStore = new FileStore(setup.files.metaPath, setup);\n    this._everlive = everlive;\n};\n\nOfflineFilesProcessor.prototype = {\n    validateFileCreateObject: function (obj, isSync) {\n        return new rsvp.Promise(function (resolve, reject) {\n            if (!obj.base64 && !isSync) {\n                return reject(new EverliveError(EverliveErrors.missingOrInvalidFileContent));\n            } else if (!obj.ContentType) {\n                return reject(new EverliveError(EverliveErrors.missingContentType));\n            } else if (!obj.Filename) {\n                //TODO: [offline] add an appropriate error\n                return reject(new EverliveError(EverliveErrors.invalidRequest));\n            }\n\n            resolve();\n        });\n    },\n\n    getOfflineFilesData: function () {\n        var self = this;\n\n        return new rsvp.Promise(function (resolve, reject) {\n            if (!self._offlineFilesData) {\n                return self.filesMetaStore.getFile(FILES_METADATA_FILE_NAME)\n                    .then(function (metadataFileHandle) {\n                        return self.filesMetaStore.readFileAsText(metadataFileHandle);\n                    })\n                    .then(function (metadataText) {\n                        if (!metadataText) {\n                            metadataText = '[]';\n                        }\n\n                        self._offlineFilesData = JSON.parse(metadataText);\n                        resolve(self._offlineFilesData);\n                    }).catch(reject);\n            } else {\n                resolve(self._offlineFilesData);\n            }\n        });\n    },\n\n    saveOfflineFilesData: function () {\n        var self = this;\n\n        return self.getOfflineFilesData()\n            .then(function (offlineFilesData) {\n                return self.filesMetaStore.writeText(FILES_METADATA_FILE_NAME, JSON.stringify(offlineFilesData));\n            });\n    },\n\n    upsertFileFromObject: function (obj, isCreate, isSync) {\n        var self = this;\n\n        if (!isSync) {\n            if (isCreate) {\n                if (!obj.base64) {\n                    return utils.rejectedPromise(new EverliveError(EverliveErrors.missingOrInvalidFileContent));\n                }\n\n                if (!obj.ContentType) {\n                    return utils.rejectedPromise(new EverliveError(EverliveErrors.missingContentType));\n                }\n            } else {\n                if (!obj.base64) {\n                    return utils.successfulPromise();\n                }\n            }\n        }\n\n        if (!obj.base64) {\n            var id = utils.getId(obj);\n            var uri;\n            var downloadFilePromise = obj.Uri ? utils.successfulPromise(obj.Uri) :\n                self._everlive.files\n                    .isSync(isSync)\n                    .applyOffline(false)\n                    .getDownloadUrlById(id);\n\n            return downloadFilePromise.then(function (_uri) {\n                uri = _uri;\n                return self._everlive.offlineStorage.files.existsOffline(id);\n            }).then(function (exists) {\n                if (!exists) {\n                    return self._everlive.offlineStorage.files._saveFile(uri, obj.Filename);\n                }\n            });\n        }\n\n        obj.Storage = 'internal';\n        return utils.successfulPromise().then(function () {\n            if (!isSync) {\n                return self.validateFileCreateObject(obj, isSync);\n            }\n        }).then(function () {\n            var onlineLocation = obj.Uri;\n            var filename = self.getFilenameForObject(obj);\n\n            var offlineFileInfo;\n            var base64Contents = obj.base64;\n            delete obj.base64;\n\n            var contents = utils.b64toBlob(base64Contents, obj.ContentType);\n\n            return self.writeFile(filename, contents)\n                .then(function (fileInfo) {\n                    offlineFileInfo = fileInfo;\n                    return self.getOfflineFilesData();\n                })\n                .then(function (offlineFilesData) {\n                    offlineFilesData.push({\n                        offlineLocation: offlineFileInfo.offlineLocation,\n                        onlineLocation: onlineLocation,\n                        id: obj._id\n                    });\n\n                    obj.Length = offlineFileInfo.size;\n                    return self.saveOfflineFilesData();\n                });\n        });\n    },\n\n    purge: function (localLocation) {\n        var self = this;\n\n        return this.getOfflineFilesData()\n            .then(function (offlineFilesData) {\n                var offlineFile = _.where(offlineFilesData, {offlineLocation: localLocation});\n\n                // TODO: [offline] check if the length of offlineFile === 0\n                var offlineInfoIndex = offlineFilesData.indexOf(offlineFile[0]);\n                if (offlineInfoIndex !== -1) {\n                    offlineFilesData.splice(offlineInfoIndex, 1);\n                }\n\n                return self.saveOfflineFilesData();\n            })\n            .then(function () {\n                return self.fileStore.getFileByAbsolutePath(localLocation);\n            }).then(function (file) {\n                if (file) {\n                    return self.fileStore.removeFile(file);\n                }\n            });\n    },\n\n    writeFile: function (filename, contents, folder) {\n        var self = this;\n        var offlineLocation;\n\n        return self.fileStore.writeText(filename, contents, folder)\n            .then(function (locationOnDisk) {\n                offlineLocation = locationOnDisk;\n                return self.saveOfflineFilesData();\n            })\n            .then(function () {\n                return self.fileStore.getFileSize(filename, folder);\n            })\n            .then(function (size) {\n                return {\n                    size: size,\n                    offlineLocation: offlineLocation\n                };\n            });\n    },\n\n    getFilenameForObject: function (obj) {\n        var extension = path.extname(obj.Filename);\n        return obj._id + extension;\n    },\n\n    getOfflineLocation: function (url, id) {\n        return this.getOfflineFilesData()\n            .then(function (offlineFilesData) {\n                if (!url && !id) {\n                    return;\n                }\n\n                for (var i = 0; i < offlineFilesData.length; i++) {\n                    var fileEntry = offlineFilesData[i];\n                    var urlMatches = (url && (fileEntry.offlineLocation === url || fileEntry.onlineLocation === url));\n                    var idMatches = (id && fileEntry.id === id);\n                    if (urlMatches || idMatches) {\n                        return fileEntry.offlineLocation;\n                    }\n                }\n            });\n    }\n};\n\nmodule.exports = OfflineFilesProcessor;",
    "'use strict';\n\nvar DataQuery = require('../query/DataQuery');\nvar utils = require('../utils');\nvar offlineTransformations = require('./offlineTransformations');\nvar expandProcessor = require('../ExpandProcessor');\nvar platform = require('../everlive.platform');\n\nvar everliveErrorModule = require('../EverliveError');\nvar EverliveError = everliveErrorModule.EverliveError;\nvar EverliveErrors = everliveErrorModule.EverliveErrors;\n\nvar buildPromise = require('../utils').buildPromise;\nvar common = require('../common');\nvar _ = common._;\nvar rsvp = common.rsvp;\nvar mingo = common.Mingo;\nvar mongoQuery = common.mongoQuery;\nvar Query = require('../query/Query');\n\nvar path = require('path');\n\nvar constants = require('../constants');\nvar Headers = constants.Headers;\nvar offlineItemStates = constants.offlineItemStates;\n\nvar unsupportedOfflineHeaders = [Headers.powerFields];\n\nvar unsupportedUsersOperations = {};\nunsupportedUsersOperations[DataQuery.operations.create] = true;\nunsupportedUsersOperations[DataQuery.operations.update] = true;\nunsupportedUsersOperations[DataQuery.operations.remove] = true;\nunsupportedUsersOperations[DataQuery.operations.removeSingle] = true;\nunsupportedUsersOperations[DataQuery.operations.rawUpdate] = true;\nunsupportedUsersOperations[DataQuery.operations.setAcl] = true;\nunsupportedUsersOperations[DataQuery.operations.setOwner] = true;\nunsupportedUsersOperations[DataQuery.operations.userLoginWithProvider] = true;\nunsupportedUsersOperations[DataQuery.operations.userLinkWithProvider] = true;\nunsupportedUsersOperations[DataQuery.operations.userUnlinkFromProvider] = true;\nunsupportedUsersOperations[DataQuery.operations.userLogin] = true;\nunsupportedUsersOperations[DataQuery.operations.userLogout] = true;\nunsupportedUsersOperations[DataQuery.operations.userChangePassword] = true;\nunsupportedUsersOperations[DataQuery.operations.userResetPassword] = true;\n\nfunction buildUsersErrorMessage(dataQuery) {\n    var unsupportedUserSocialProviderOperations = [\n        DataQuery.operations.userLoginWithProvider,\n        DataQuery.operations.userLinkWithProvider,\n        DataQuery.operations.userUnlinkFromProvider\n    ];\n\n    var operation = dataQuery.operation;\n    if (unsupportedUserSocialProviderOperations.indexOf(operation) !== -1) {\n        operation += dataQuery.data.Provider || dataQuery.data.Identity.Provider;\n    }\n\n    return 'The Users operation ' + operation + ' is not supported in offline mode';\n}\n\nfunction buildFilesErrorMessage(dataQuery) {\n    return 'The Files operation ' + dataQuery.operation + ' is not supported in offline mode';\n}\n\nfunction OfflineQueryProcessor(persister, encryptionProvider, offlineFilesProcessor, everlive, setup) {\n    this._collectionCache = {};\n    this.offlineFilesProcessor = offlineFilesProcessor;\n    this._persister = persister;\n    this._encryptionProvider = encryptionProvider;\n    this.everlive = everlive;\n    this.setup = setup;\n}\n\nOfflineQueryProcessor.prototype = {\n    processQuery: function (dataQuery) {\n        if (utils.isContentType.files(dataQuery.collectionName) && platform.isDesktop) {\n            if (this.everlive.isOnline()) {\n                return utils.successfulPromise();\n            } else {\n                return utils.rejectedPromise(new EverliveError(EverliveErrors.filesNotSupportedInBrowser));\n            }\n        }\n\n        var unsupportedClientOpMessage = this.getUnsupportedClientOpMessage(dataQuery);\n        if (unsupportedClientOpMessage && !dataQuery.isSync) {\n            return new rsvp.Promise(function (resolve, reject) {\n                reject(new EverliveError(unsupportedClientOpMessage));\n            });\n        }\n\n        var queryParams = dataQuery.getQueryParameters();\n        var unsupportedOperators = utils.getUnsupportedOperators(queryParams.filter);\n        var unsupportedOperatorCount = unsupportedOperators.length;\n        if (unsupportedOperatorCount) {\n            return new rsvp.Promise(function (resolve, reject) {\n                var errorMessage;\n                if (unsupportedOperatorCount === 1) {\n                    errorMessage = 'The operator ' + unsupportedOperators[0] + ' is not supported in offline mode.';\n                } else {\n                    errorMessage = 'The operators ' + unsupportedOperators.join(',') + 'are not supported in offline mode.';\n                }\n\n                reject(new EverliveError(errorMessage, EverliveErrors.operationNotSupportedOffline.code));\n            });\n        }\n\n        offlineTransformations.traverseAndTransformFilterId(queryParams.filter);\n\n        switch (dataQuery.operation) {\n            case DataQuery.operations.read:\n                return this.read(dataQuery, queryParams.filter, queryParams.sort, queryParams.skip, queryParams.limit, queryParams.select, queryParams.expand);\n            case DataQuery.operations.readById:\n                return this.readById(dataQuery, queryParams.expand);\n            case DataQuery.operations.filesGetDownloadUrlById:\n                return this.getDownloadUrlById(dataQuery);\n            case DataQuery.operations.count:\n                return this.count(dataQuery, queryParams.filter);\n            case DataQuery.operations.create:\n                return this.create(dataQuery);\n            case DataQuery.operations.rawUpdate:\n            case DataQuery.operations.update:\n                return this.update(dataQuery, queryParams.filter);\n            case DataQuery.operations.filesUpdateContent:\n                return this.updateFileContent(dataQuery, queryParams.filter);\n            case DataQuery.operations.remove:\n                return this.remove(dataQuery, queryParams.filter);\n            case DataQuery.operations.removeSingle:\n                queryParams.filter._id = dataQuery.additionalOptions.id;\n                return this.remove(dataQuery, queryParams.filter);\n            default:\n                return new rsvp.Promise(function (resolve, reject) {\n                    if (dataQuery.isSync) {\n                        resolve();\n                    } else {\n                        reject(new EverliveError(dataQuery.operation + ' is not supported in offline mode'));\n                    }\n                });\n        }\n    },\n\n    getDownloadUrlById: function (dataQuery) {\n        var self = this;\n        var id = dataQuery.additionalOptions.id;\n        var offlineFilePath;\n\n        return self.everlive\n            .files\n            .useOffline(true)\n            .isSync(dataQuery.isSync)\n            .getById(id)\n            .then(function (res) {\n                var file = res.result;\n                return self.everlive.offlineStorage.files._getFileUrlForId(file.Id, file.Filename);\n            })\n            .then(function (filePath) {\n                offlineFilePath = filePath;\n                return self.everlive.offlineStorage._offlineFilesProcessor.fileStore.getFileByAbsolutePath(filePath);\n            })\n            .then(function (fileEntry) {\n                if (fileEntry) {\n                    return {\n                        result: {\n                            Uri: offlineFilePath\n                        }\n                    }\n                }\n\n                return {\n                    result: {}\n                }\n            });\n    },\n\n    getUnsupportedClientOpMessage: function (dataQuery) {\n        for (var i = 0; i < unsupportedOfflineHeaders.length; i++) {\n            var header = unsupportedOfflineHeaders[i];\n            if (dataQuery.getHeader(header)) {\n                return 'The header ' + header + ' is not supported in offline mode';\n            }\n        }\n\n        if (utils.isContentType.users(dataQuery.collectionName) && unsupportedUsersOperations[dataQuery.operation]) {\n            return buildUsersErrorMessage(dataQuery);\n        }\n\n        var isSingle = dataQuery.additionalOptions && dataQuery.additionalOptions.id;\n        var isUpdateByFilter = dataQuery.operation === DataQuery.operations.update && !isSingle;\n        var isRawUpdate = dataQuery.operation === DataQuery.operations.rawUpdate;\n        if (utils.isContentType.files(dataQuery.collectionName) && (isRawUpdate || isUpdateByFilter)) {\n            return buildFilesErrorMessage(dataQuery);\n        }\n    },\n\n    _getCreateResult: function (createdItems, returnFullItem) {\n        if (createdItems.length === 1) {\n            var result;\n            if (returnFullItem) {\n                var item = _.extend({}, createdItems[0]);\n                result = offlineTransformations.idTransform(item);\n            } else {\n                result = {\n                    CreatedAt: utils.cloneDate(createdItems[0].CreatedAt),\n                    Id: createdItems[0]._id\n                }\n            }\n\n            return {\n                result: result\n            };\n        } else {\n            var multipleCreateResult = [];\n            _.each(createdItems, function (createdItem) {\n                var item;\n                if (returnFullItem) {\n                    var itemCopy = _.extend({}, createdItem);\n                    item = offlineTransformations.idTransform(itemCopy);\n                } else {\n                    item = {\n                        CreatedAt: utils.cloneDate(createdItem.CreatedAt),\n                        Id: createdItem._id\n                    };\n                }\n                multipleCreateResult.push(item);\n            });\n\n            return {\n                result: multipleCreateResult\n            };\n        }\n    },\n\n    create: function (dataQuery) {\n        var self = this;\n\n        return self._createItems(dataQuery.collectionName, dataQuery.data, dataQuery.isSync, dataQuery.preserveState)\n            .then(function (createdItems) {\n                var isFilesQuery = utils.isContentType.files(dataQuery.collectionName);\n                return self._getCreateResult(createdItems, isFilesQuery);\n            });\n    },\n\n    read: function (dataQuery, filter, sort, skip, limit, select, expand) {\n        var self = this;\n        var expandResult;\n\n        return new rsvp.Promise(function (resolve, reject) {\n            var collectionLength;\n\n            self._prepareExpand(expand, dataQuery, true)\n                .then(function (prepareExpandResult) {\n                    expandResult = prepareExpandResult;\n                    if (prepareExpandResult) {\n                        select = prepareExpandResult.mainQueryFieldsExpression;\n                    }\n\n                    return self._getCollection(dataQuery.collectionName);\n                })\n                .then(function (collection) {\n                    var result = self._readInternal(collection, filter, sort, skip, limit, select);\n\n                    if (skip || limit) {\n                        var all = self._readInternal(collection);\n                        collectionLength = all.length;\n                    }\n\n                    if (!self._shouldAutogenerateIdForContentType(dataQuery.collectionName)) {\n                        result = offlineTransformations.removeIdTransform(result, true);\n                    } else {\n                        result = offlineTransformations.idTransform(result);\n                    }\n\n                    return self._expandResult(expandResult, result);\n                })\n                .then(function (result) {\n                    var response = self._transformOfflineResult(result, collectionLength, dataQuery);\n                    resolve(response);\n                })\n                .catch(reject);\n        });\n    },\n\n    _readInternal: function (collection, filter, sort, skip, limit, select) {\n        var filterCopy = _.extend({}, filter);\n        var actualFilter = this._getWithoutDeletedFilter(filterCopy);\n        offlineTransformations.traverseAndTransformFilterId(actualFilter);\n        var query = mingo.Query(actualFilter);\n        var cursor = mingo.Cursor(collection, query, select);\n        if (sort) {\n            cursor = cursor.sort(sort);\n        }\n\n        if (skip) {\n            cursor.skip(skip);\n        }\n\n        if (limit) {\n            cursor.limit(limit);\n        }\n\n        return _.map(cursor.all(), function (item) {\n            return _.extend({}, item);\n        });\n    },\n\n    readById: function (dataQuery, expand) {\n        var self = this;\n        var expandResult;\n        return self._prepareExpand(expand, dataQuery, false)\n            .then(function (prepareExpandResult) {\n                expandResult = prepareExpandResult;\n                return self._getCollection(dataQuery.collectionName);\n            })\n            .then(function (collection) {\n                return new rsvp.Promise(function (resolve, reject) {\n                    var item = self._getById(collection, dataQuery.additionalOptions.id);\n\n                    if (!item) {\n                        return reject(new EverliveError(EverliveErrors.itemNotFound));\n                    }\n\n                    item = offlineTransformations.idTransform(item);\n                    return self._expandResult(expandResult, item).then(resolve).catch(reject);\n                });\n            })\n            .then(function (result) {\n                return self._transformOfflineResult(result, null, dataQuery);\n            });\n    },\n\n    _getById: function (collection, id) {\n        if (!id) {\n            throw new EverliveError('Id field is mandatory when using offline storage');\n        }\n\n        if (collection[id]) {\n            var item = _.extend({}, collection[id]);\n            var isDeleted = item && item[constants.offlineItemsStateMarker] === offlineItemStates.deleted;\n\n            return isDeleted ? undefined : item;\n        }\n    },\n\n    _prepareExpand: function (expand, dataQuery, isArray) {\n        return new rsvp.Promise(function (resolve, reject) {\n            if (expand) {\n                expandProcessor.prepare(expand, dataQuery.collectionName, isArray, dataQuery.fields, null, null, function (err, prepareResult) {\n                    if (err) {\n                        if (err.name === 'ExpandError') {\n                            err.code = EverliveErrors.invalidExpandExpression.code;\n                        }\n                        return reject(err);\n                    }\n                    resolve(prepareResult);\n                });\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    _expandResult: function (prepareExpandResult, result) {\n        var self = this;\n        return new rsvp.Promise(function (resolve, reject) {\n            if (prepareExpandResult) {\n                expandProcessor.expand(prepareExpandResult.relationsTree, result, {\n                    offlineModule: self\n                }, function (err, result) {\n                    if (err) {\n                        if (err.name === 'ExpandError') {\n                            err.code = EverliveErrors.invalidExpandExpression.code;\n                        }\n                        return reject(err);\n                    }\n                    resolve(result);\n                });\n            } else {\n                resolve(result);\n            }\n        });\n    },\n\n    _getWithoutDeletedFilter: function (filter) {\n        var withoutDeletedFilter = {\n            $and: []\n        };\n        withoutDeletedFilter.$and.push(filter);\n        var deleteOfflineFilter = {};\n        deleteOfflineFilter[constants.offlineItemsStateMarker] = {$ne: offlineItemStates.deleted};\n        withoutDeletedFilter.$and.push(deleteOfflineFilter);\n        return withoutDeletedFilter;\n    },\n\n    _getUpdateItemsResult: function (updateItems) {\n        var updatedItemCount = updateItems.length;\n        var modifiedAtResult = updatedItemCount ? updateItems[0].ModifiedAt : new Date();\n\n        return {\n            ModifiedAt: modifiedAtResult,\n            result: updatedItemCount\n        };\n    },\n\n    update: function (dataQuery, filter) {\n        var self = this;\n\n        return this._updateItems(dataQuery, dataQuery.data, filter, dataQuery.isSync).then(function (updateItems) {\n            return self._getUpdateItemsResult(updateItems);\n        });\n    },\n\n    remove: function (dataQuery, filter) {\n        return this._removeItems(dataQuery, filter, dataQuery.isSync);\n    },\n\n    count: function (dataQuery, filter) {\n        var self = this;\n\n        return new rsvp.Promise(function (resolve, reject) {\n            self._getCollection(dataQuery.collectionName)\n                .then(function (collection) {\n                    var filterResult = self._readInternal(collection, filter);\n                    resolve({result: filterResult.length});\n                }).catch(reject);\n        });\n    },\n\n    _setItemDates: function (currentItem, itemToCreate, contentType) {\n        // we need to manually clone the dates in order to dereference them from the original object as\n        // _.extends will pass a reference to the original date instead of creating a new instance\n        if (currentItem.CreatedAt && currentItem.CreatedAt instanceof Date) {\n            itemToCreate.CreatedAt = utils.cloneDate(currentItem.CreatedAt);\n        } else {\n            itemToCreate.CreatedAt = new Date();\n        }\n\n        if (currentItem.ModifiedAt && currentItem.ModifiedAt instanceof Date) {\n            itemToCreate.ModifiedAt = utils.cloneDate(currentItem.ModifiedAt);\n        } else {\n            itemToCreate.ModifiedAt = utils.cloneDate(itemToCreate.CreatedAt);\n        }\n\n        itemToCreate.CreatedBy = itemToCreate.CreatedBy || this.everlive.setup.principalId || constants.guidEmpty;\n        itemToCreate.ModifiedBy = itemToCreate.ModifiedBy || itemToCreate.CreatedBy;\n        if (contentType === 'Users') {\n            itemToCreate.Owner = itemToCreate._id;\n        } else {\n            itemToCreate.Owner = itemToCreate.CreatedBy || constants.guidEmpty;\n        }\n    },\n\n    _mapCreateItem: function (currentItem, collection, isSync, preserveState, contentType) {\n        var self = this;\n\n        var itemToCreate = _.extend({}, currentItem);\n        itemToCreate._id = itemToCreate.Id || utils.uuid();\n        delete itemToCreate.Id;\n\n        var existingItem = self._getById(collection, itemToCreate._id);\n        var itemExists = !!existingItem;\n        var state;\n        if (itemExists && (!isSync && !preserveState)) {\n            // TODO: [offline] return the same error as the server does\n            throw new EverliveError('An item with the specified id already exists');\n        } else {\n            if (isSync && preserveState && itemExists) {\n                state = existingItem[constants.offlineItemsStateMarker];\n            } else {\n                state = isSync ? undefined : offlineItemStates.created; // set the state to created only if not syncing\n            }\n        }\n\n        function processItemResult() {\n            self._setItemDates(currentItem, itemToCreate, contentType);\n            self._setItem(collection, _.extend({}, itemToCreate), state);\n            return itemToCreate;\n        }\n\n        if (utils.isContentType.files(contentType)) {\n            return self.offlineFilesProcessor.upsertFileFromObject(itemToCreate, true, isSync).then(processItemResult);\n        } else {\n            return processItemResult();\n        }\n    },\n\n    _createItems: function (contentType, items, isSync, preserveState) {\n        var self = this;\n        return this._getCollection(contentType)\n            .then(function (collection) {\n                var itemsForCreate = _.isArray(items) ? items : [items];\n                var createdItems = _.map(itemsForCreate, function (currentItem) {\n                    return self._mapCreateItem(currentItem, collection, isSync, preserveState, contentType);\n                });\n\n                return rsvp.all(createdItems)\n                    .then(function (items) {\n                        return self._persistData(contentType)\n                            .then(function () {\n                                // Ids are generated regardless of the autoGenerateId option. However the Id's are omitted when returning\n                                // the items to the client if autoGenerateId is false\n                                if (!self._shouldAutogenerateIdForContentType(contentType) && !isSync) {\n                                    createdItems = offlineTransformations.removeIdTransform(items);\n                                }\n\n                                return items;\n                            });\n                    });\n            });\n    },\n\n    _applyUpdateOperation: function (originalUpdateExpression, itemToUpdate, collection, isSync, modifiedAt) {\n        var dbOperators = utils.getDbOperators(originalUpdateExpression, true);\n        var hasDbOperator = dbOperators.length !== 0;\n\n        var updateExpression;\n        if (hasDbOperator) {\n            updateExpression = originalUpdateExpression;\n        } else {\n            updateExpression = {\n                $set: originalUpdateExpression\n            };\n        }\n        var updateExpressionForUser = {\n            ModifiedBy: this.everlive.setup.principalId || constants.guidEmpty\n        };\n        updateExpression.$set = _.extend(updateExpressionForUser, updateExpression.$set);\n\n        if (isSync) {\n            updateExpression.$set.ModifiedAt = utils.cloneDate(originalUpdateExpression.ModifiedAt || modifiedAt);\n        }\n\n        mongoQuery(itemToUpdate, {}, updateExpression, {strict: true}); // Setting strict to true so only exact matches would be updated\n\n        itemToUpdate._id = itemToUpdate._id || updateExpression._id || updateExpression.Id;\n        delete itemToUpdate.Id;\n\n        var newState;\n        if (isSync) {\n            newState = undefined;\n        } else if (itemToUpdate[constants.offlineItemsStateMarker] === offlineItemStates.created) {\n            newState = offlineItemStates.created;\n        } else {\n            newState = offlineItemStates.modified;\n        }\n\n        this._setItem(collection, itemToUpdate, newState);\n    },\n\n    updateFileContent: function (dataQuery) {\n        var isSync = dataQuery.isSync;\n        var updateExpression = dataQuery.data;\n        var self = this;\n        var itemId = dataQuery.additionalOptions.id;\n        var updateItems;\n        var typeName = dataQuery.collectionName;\n        return this._getCollection(typeName)\n            .then(function (collection) {\n                var singleItemForUpdate = self._getById(collection, itemId);\n                updateItems = [singleItemForUpdate];\n                singleItemForUpdate.base64 = updateExpression.base64;\n                singleItemForUpdate.Filename = updateExpression.Filename;\n                singleItemForUpdate.ContentType = updateExpression.ContentType;\n                delete singleItemForUpdate.Uri;\n\n                return self._overwriteFile(itemId, singleItemForUpdate, isSync)\n                    .then(function () {\n                        self._applyUpdateOperation(updateExpression, singleItemForUpdate, collection);\n                        self._setItem(collection, singleItemForUpdate, constants.offlineItemStates.modified);\n                        return self._persistData(typeName);\n                    })\n                    .then(function () {\n                        return self._getUpdateItemsResult(updateItems);\n                    })\n            });\n    },\n\n    _overwriteFile: function (itemId, itemForUpdate, isSync) {\n        var self = this;\n\n        return self.everlive.offlineStorage.files.purge(itemId)\n            .then(function () {\n                return self.offlineFilesProcessor.upsertFileFromObject(itemForUpdate, true, isSync);\n            })\n    },\n\n    _updateItems: function (dataQuery, updateExpression, filter, isSync) {\n        var self = this;\n        var collectionName = dataQuery.collectionName;\n\n        return self._getCollection(collectionName)\n            .then(function (collection) {\n                var updateItems;\n\n                if (dataQuery.additionalOptions && dataQuery.additionalOptions.id) {\n                    var itemId = dataQuery.additionalOptions.id;\n                    var singleItemForUpdate = self._getById(collection, itemId);\n                    updateItems = [singleItemForUpdate];\n\n                    if (utils.isContentType.files(collectionName) && updateExpression.$set && updateExpression.$set.Filename || updateExpression.Filename) {\n                        var filename = updateExpression.Filename || updateExpression.$set.Filename;\n                        var extension = path.extname(filename);\n                        return self.everlive.offlineStorage.files.changeFileExtensionById(itemId, extension)\n                            .then(function () {\n                                self._applyUpdateOperation(updateExpression, singleItemForUpdate, collection, isSync, dataQuery.ModifiedAt);\n                                return self._persistData(collectionName);\n                            })\n                            .then(function () {\n                                return updateItems;\n                            });\n                    } else {\n                        self._applyUpdateOperation(updateExpression, singleItemForUpdate, collection, isSync, dataQuery.ModifiedAt);\n                    }\n                } else {\n                    updateItems = self._readInternal(collection, filter);\n                    for (var i = 0; i < updateItems.length; i++) {\n                        var itemToUpdate = updateItems[i];\n                        var itemExists = !!self._getById(collection, itemToUpdate._id.toString());\n\n                        if (!itemExists && !isSync) {\n                            // TODO: [offline] return the correct error\n                            throw new EverliveError(EverliveErrors.itemNotFound);\n                        }\n\n                        self._applyUpdateOperation(updateExpression, itemToUpdate, collection, isSync, dataQuery.ModifiedAt);\n                    }\n                }\n\n                return self._persistData(collectionName)\n                    .then(function () {\n                        return updateItems;\n                    });\n            });\n    },\n\n    _getAllCollections: function () {\n        var self = this;\n        return new rsvp.Promise(function (resolve, reject) {\n            self._persister.getAllData(function (allData) {\n                _.each(allData, function (value, key) {\n                    var decryptedData = self._encryptionProvider.decrypt(value);\n                    allData[key] = JSON.parse(decryptedData || '{}', utils.parseUtilities.getReviver());\n                });\n\n                resolve(allData);\n            }, reject);\n        });\n    },\n\n    _getCollection: function (contentType) {\n        var self = this;\n\n        return new rsvp.Promise(function (resolve, reject) {\n            // check the persister if there is no data in the collection cache for this content type\n            if (!self._collectionCache[contentType]) {\n                self._persister.getData(contentType, function (data) {\n                    var decryptedDataRaw = self._encryptionProvider.decrypt(data);\n                    var decryptedData = JSON.parse(decryptedDataRaw || '{}', utils.parseUtilities.getReviver());\n                    self._collectionCache[contentType] = decryptedData;\n\n                    resolve(self._collectionCache[contentType]);\n                }, reject);\n            } else {\n                resolve(self._collectionCache[contentType]);\n            }\n        });\n    },\n\n    _setItem: function (collection, item, state) {\n        if (!state) {\n            delete item[constants.offlineItemsStateMarker];\n        } else {\n            item[constants.offlineItemsStateMarker] = state;\n        }\n\n        collection[item._id] = item;\n    },\n\n\n    _getDirtyItems: function (collection) {\n        var filter = {};\n        filter[constants.offlineItemsStateMarker] = {$exists: true};\n        var query = mingo.Query(filter);\n        var cursor = mingo.Cursor(collection, query);\n        return cursor.all();\n    },\n\n    _persistData: function (contentType) {\n        var self = this;\n\n        return new rsvp.Promise(function (resolve, reject) {\n            var contentTypeData = self._collectionCache[contentType] || {};\n            self._transformPersistedData(contentType, contentTypeData);\n            var contentTypeDataRaw = JSON.stringify(contentTypeData);\n            var contentTypeDataRawEncrypted = self._encryptionProvider.encrypt(contentTypeDataRaw);\n            self._persister.saveData(contentType, contentTypeDataRawEncrypted, resolve, reject);\n        });\n    },\n\n    _shouldAutogenerateIdForContentType: function (contentType) {\n        return !(this.setup && this.setup.typeSettings && this.setup.typeSettings[contentType] && this.setup.typeSettings[contentType].autoGenerateId === false);\n    },\n\n    _clearItem: function (collection, item) {\n        delete collection[item._id];\n    },\n\n    _mapRemoveItem: function (itemToRemove, collection, isSync, collectionName) {\n        var self = this;\n\n        return new rsvp.Promise(function (resolve, reject) {\n            if (utils.isContentType.files(collectionName)) {\n                return self.everlive.offlineStorage.files.purge(itemToRemove._id).then(resolve, reject);\n            } else {\n                return resolve();\n            }\n        }).then(function () {\n                itemToRemove._id = itemToRemove._id || itemToRemove.Id;\n\n                var itemExists = !!self._getById(collection, itemToRemove._id.toString());\n                if (!itemExists && !isSync) {\n                    throw new EverliveError('Cannot delete item - item with id ' + itemToRemove._id + ' does not exist.');\n                }\n\n                // if the item has existed only offline or the data is syncing\n                // and the item was deleted by the conflict resolution strategy\n                var removeFromMemory = itemToRemove[constants.offlineItemsStateMarker] === offlineItemStates.created || isSync;\n                if (removeFromMemory) {\n                    self._clearItem(collection, itemToRemove);\n                } else {\n                    self._setItem(collection, itemToRemove, offlineItemStates.deleted);\n                }\n            });\n    },\n\n    _removeItems: function (dataQuery, filter, isSync) {\n        var self = this;\n        var collectionName = dataQuery.collectionName;\n\n        return self._getCollection(collectionName)\n            .then(function (collection) {\n                var itemsToRemove = self._readInternal(collection, filter);\n\n                var removedItemsPromises = _.map(itemsToRemove, function (itemToRemove) {\n                    return self._mapRemoveItem(itemToRemove, collection, isSync, collectionName);\n                });\n\n                return rsvp.all(removedItemsPromises);\n            })\n            .then(function (itemsToRemove) {\n                return self._persistData(collectionName)\n                    .then(function () {\n                        return itemsToRemove;\n                    });\n            })\n            .then(function (itemsToRemove) {\n                return self._transformOfflineResult(itemsToRemove.length);\n            });\n    },\n\n    _applyTransformations: function (transformedResult, transformations) {\n        if (Array.isArray(transformedResult.result)) {\n            _.each(transformations, function (transformation) {\n                transformedResult.result.map(function (value, key) {\n                    transformedResult.result[key] = transformation(value);\n                });\n            });\n        } else {\n            _.each(transformations, function (transformation) {\n                transformedResult.result = transformation(transformedResult.result);\n            });\n        }\n    },\n\n    _transformOfflineResult: function (resultSet, count, dataQuery, additionalTransformations) {\n        var transformedResult = {\n            result: resultSet,\n            count: count || (resultSet || []).length\n        };\n\n        if ((count !== undefined && count !== null) || Array.isArray(resultSet)) {\n            transformedResult.count = count || resultSet.length;\n        }\n\n        var transformations = [];\n\n        transformations.push(offlineTransformations.idTransform);\n        transformations.push(offlineTransformations.removeMarkersTransform);\n\n        if (dataQuery) {\n            var includeCount = dataQuery.getHeader(Headers.includeCount);\n            if (includeCount === false) {\n                delete transformedResult.count;\n            }\n\n            var singleFieldExpression = dataQuery.getHeader(Headers.singleField);\n            if (typeof singleFieldExpression === 'string') {\n                transformations.push(offlineTransformations.singleFieldTransform.bind(this, singleFieldExpression));\n            }\n        }\n\n        if (additionalTransformations) {\n            transformations = transformations.concat(additionalTransformations);\n        }\n\n        this._applyTransformations(transformedResult, transformations);\n\n        if (transformedResult.count === undefined) {\n            delete transformedResult.count;\n        }\n\n        return transformedResult;\n    },\n\n    _transformPersistedData: function (contentType, contentTypeData) {\n        var transformFields = [];\n\n        if (contentType === 'Users') {\n            transformFields = transformFields.concat(['Password', 'SecretQuestionId', 'SecretAnswer']);\n        }\n\n        if (transformFields.length) {\n            _.each(contentTypeData, function (contentTypeObject) {\n                offlineTransformations.removeFieldsTransform(contentTypeObject, transformFields);\n            });\n        }\n    },\n\n    purgeAll: function (success, error) {\n        var self = this;\n        this._collectionCache = {};\n        return buildPromise(function (success, error) {\n            self._collectionCache = {};\n\n            self._persister.purgeAll(function () {\n                if (self.everlive.setup.caching) {\n                    self.everlive.cache.clearAll(success, error);\n                } else {\n                    success();\n                }\n            }, error);\n        }, success, error);\n    },\n\n    purge: function (contentType, success, error) {\n        var self = this;\n        return buildPromise(function (success, error) {\n            delete self._collectionCache[contentType];\n\n            self._persister.purge(contentType, function () {\n                if (self.everlive.setup.caching) {\n                    self.everlive.cache.clear(contentType, success, error);\n                } else {\n                    success();\n                }\n            }, error);\n        }, success, error);\n    }\n};\n\nmodule.exports = OfflineQueryProcessor;",
    "var DataQuery = require('../query/DataQuery');\nvar everliveErrorModule = require('../EverliveError');\nvar EverliveError = everliveErrorModule.EverliveError;\nvar EverliveErrors = everliveErrorModule.EverliveErrors;\nvar constants = require('../constants');\nvar offlineItemStates = constants.offlineItemStates;\nvar RequestOptionsBuilder = require('../query/RequestOptionsBuilder');\nvar common = require('../common');\nvar _ = common._;\nvar rsvp = common.rsvp;\nvar utils = require('../utils');\nvar Request = require('../Request');\nvar offlineTransformations = require('./offlineTransformations');\nvar buildPromise = require('../utils').buildPromise;\nvar OfflineQueryProcessor = require('./OfflineQueryProcessor');\nvar OfflineFilesProcessor = require('./OfflineFilesProcessor');\nvar OfflineFilesModule = require('./OfflineFilesModule');\nvar path = require('path');\n\nvar syncLocation = {\n    server: 'server',\n    client: 'client'\n};\n\n/**\n * @class OfflineModule\n * @classDesc A class providing access to the various offline storage features.\n */\n\n/**\n * Represents the {@link OfflineModule} class.\n * @memberOf Everlive.prototype\n * @member {OfflineModule} offlineStorage\n */\n\nmodule.exports = (function () {\n    function OfflineModule(everlive, options, persister, encryptionProvider) {\n        this._everlive = everlive;\n        this.setup = options;\n        this._isSynchronizing = false;\n        this._encryptionProvider = encryptionProvider;\n\n        this._offlineFilesProcessor = new OfflineFilesProcessor(this.setup, this._everlive);\n        this._queryProcessor = new OfflineQueryProcessor(persister, encryptionProvider,\n            this._offlineFilesProcessor, this._everlive, this.setup);\n\n        /**\n         * @memberOf OfflineModule.prototype\n         * @instance\n         * @description An instance of the [OfflineFilesModule]{@link OfflineFilesModule} class for working with files in offline mode.\n         * @member {OfflineFilesModule} files\n         */\n        this.files = new OfflineFilesModule(this._offlineFilesProcessor,\n            this._everlive, this.setup.files.maxConcurrentDownloads);\n    }\n\n    var getSyncFilterForItem = function (item) {\n        var filter = getSyncFilterNoModifiedAt(item);\n        filter.ModifiedAt = item.ModifiedAt;\n        return filter;\n    };\n\n    var getSyncFilterNoModifiedAt = function (item) {\n        return {\n            Id: item.Id\n        }\n    };\n\n\n    OfflineModule.prototype = {\n        /**\n         * Removes all data from the offline storage. If caching is enabled clears the entire cache as well.\n         * @method purgeAll\n         * @name purgeAll\n         * @memberOf OfflineModule.prototype\n         * @param {function} [success] A success callback.\n         * @param {function} [error] An error callback.\n         */\n        /**\n         * Removes all data from the offline storage. If caching is enabled clears the entire cache as well.\n         * @method purgeAll\n         * @name purgeAll\n         * @memberOf OfflineModule.prototype\n         * @returns {Promise}\n         */\n        purgeAll: function (success, error) {\n            return this._queryProcessor.purgeAll(success, error);\n        },\n\n        /**\n         * Removes all data for a specific content type from the offline storage. If caching is enabled clears the cache\n         * for the specified content type as well.\n         * @method purge\n         * @name purge\n         * @memberOf OfflineModule.prototype\n         * @param {string} contentType The content type to purge.\n         * @param {function} [success] A success callback.\n         * @param {function} [error] An error callback.\n         */\n        /**\n         * Removes all data for a specific content type from the offline storage. If caching is enabled clears the cache\n         * for the specified content type as well.\n         * @method purge\n         * @name purge\n         * @memberOf OfflineModule.prototype\n         * @param {string} contentType The content type to purge.\n         * @returns {Promise}\n         */\n        purge: function (contentType, success, error) {\n            return this._queryProcessor.purge(contentType, success, error);\n        },\n\n        processQuery: function (query) {\n            return this._queryProcessor.processQuery(query);\n        },\n\n        _setOffline: function (offline) {\n            this.setup.offline = offline;\n        },\n\n        isOnline: function () {\n            return !this.setup.offline;\n        },\n\n        _prepareSyncData: function (contentTypesForSync) {\n            var self = this;\n\n            var contentTypesSyncData = {};\n            var conflicts = [];\n            _.each(contentTypesForSync, function (contentType, typeName) {\n                var syncItems = offlineTransformations.idTransform(contentType.offlineItemsToSync);\n                var syncData = self._getSyncItemStates(typeName, syncItems, contentType.serverItems);\n                conflicts.push(syncData.conflicts);\n                contentTypesSyncData[typeName] = syncData.itemsForSync;\n            });\n\n            return {\n                conflicts: conflicts,\n                contentTypesSyncData: contentTypesSyncData\n            };\n        },\n\n        _resolveConflicts: function (syncData) {\n            var self = this;\n            return this._applyResolutionStrategy(syncData.conflicts)\n                .then(function () {\n                    return self._mergeResolvedConflicts(syncData.conflicts, syncData.contentTypesSyncData);\n                })\n                .then(function () {\n                    return syncData.contentTypesSyncData;\n                });\n        },\n\n        isSynchronizing: function () {\n            return this._isSynchronizing;\n        },\n\n        _fireSyncStart: function () {\n            var self = this;\n\n            return new rsvp.Promise(function (resolve) {\n                if (!self._isSynchronizing) {\n                    self._isSynchronizing = true;\n                    self._everlive._emitter.emit('syncStart');\n                    resolve();\n                } else {\n                    resolve();\n                }\n            });\n        },\n\n        _fireSyncEnd: function () {\n            this._isSynchronizing = false;\n            this._everlive._emitter.emit('syncEnd', this._syncResultInfo);\n            delete this._syncResultInfo;\n        },\n\n        _eachSyncItem: function (items, getFilterFunction, contentTypeName, operation) {\n            var self = this;\n\n            _.each(items, function (item) {\n                var itemFilter = getFilterFunction(item.remoteItem);\n                // if we already have an error for this item we do not want to try and sync it again\n                var resultItem = item.resultingItem;\n                var isCustom = item.isCustom;\n                var resolutionType = item.resolutionType;\n                if (_.some(self._syncResultInfo.failedItems[contentTypeName], {itemId: resultItem.Id})) {\n                    return;\n                }\n\n                operation(resultItem, itemFilter, isCustom, resolutionType);\n            });\n        },\n\n        _shouldAutogenerateIdForContentType: function (collectionName) {\n            return this._queryProcessor._shouldAutogenerateIdForContentType(collectionName);\n        },\n\n        _addCreatedFileToSyncPromises: function (resultingItemsForCreate, syncPromises, collectionName) {\n            var self = this;\n\n            _.each(resultingItemsForCreate, function (item) {\n                var filesCollection = self._everlive.files;\n                syncPromises[item.Id] = new rsvp.Promise(function (resolve, reject) {\n                    self.files.getOfflineLocation(item.Id)\n                        .then(function (location) {\n                            if (location) {\n                                return self._transferFile(false, item, location);\n                            }\n                        }, function (err) {\n                            reject({\n                                type: offlineItemStates.created,\n                                items: item,\n                                contentType: collectionName,\n                                error: err,\n                                storage: syncLocation.server\n                            });\n                        })\n                        .then(function (res) {\n                            var mergedWithServerResponseItem = _.extend({}, item, res.result);\n                            self._onItemProcessed(mergedWithServerResponseItem, collectionName, syncLocation.server, offlineItemStates.created);\n                            return filesCollection\n                                .isSync(true)\n                                .useOffline(true)\n                                .updateSingle(mergedWithServerResponseItem);\n                        }, function (err) {\n                            reject({\n                                type: offlineItemStates.created,\n                                items: item,\n                                contentType: collectionName,\n                                error: err,\n                                storage: syncLocation.server\n                            });\n                        })\n                        .then(resolve, function (err) {\n                            reject({\n                                type: offlineItemStates.modified,\n                                items: item,\n                                contentType: collectionName,\n                                error: err,\n                                storage: syncLocation.client\n                            });\n                        });\n                });\n            });\n        },\n\n        _transferFile: function (isUpdate, item, location) {\n            var sdk = this._everlive;\n\n            return new rsvp.Promise(function (resolve, reject) {\n                var self = this;\n                var uploadUrl = sdk.files.getUploadUrl();\n                var fileExistsPromise = utils.successfulPromise();\n\n                if (isUpdate) {\n                    fileExistsPromise = new rsvp.Promise(function (resolve) {\n                        sdk.files\n                            .isSync(true)\n                            .applyOffline(false)\n                            .getById(item.Id)\n                            .then(function () {\n                                resolve(true);\n                            }).catch(function () {\n                                resolve(false);\n                            });\n                    });\n                }\n\n                fileExistsPromise.then(function (fileExistsOnServer) {\n                    var canUpdate = isUpdate && fileExistsOnServer;\n                    if (canUpdate) {\n                        uploadUrl += '/' + item.Id + '/Content';\n                    }\n\n                    var fileTransfer = new FileTransfer();\n                    var fileKey = constants.fileUploadKey;\n                    var options = {\n                        fileKey: fileKey,\n                        httpMethod: canUpdate ? 'PUT' : 'POST',\n                        mimeType: item.ContentType,\n                        fileName: item.Filename,\n                        headers: sdk.buildAuthHeader()\n                    };\n\n                    options.params = {};\n\n                    _.each(item, function (value, key) {\n                        if (key.toLowerCase() !== 'base64') {\n                            var prefixedKey = constants.fileUploadKey + constants.fileUploadDelimiter + key;\n                            options.params[prefixedKey] = value;\n                        }\n                    });\n\n                    fileTransfer.upload(location, uploadUrl, function (result) {\n                        var parsedResult = utils.parseUtilities.parseJSON(result.response);\n                        if (parsedResult.Result === false) {\n                            reject.apply(self, arguments);\n                        } else if (_.isArray(parsedResult.Result)) {\n                            resolve({\n                                result: parsedResult.Result[0]\n                            })\n                        } else {\n                            resolve(parsedResult);\n                        }\n                    }, reject, options, true);\n                });\n            });\n        },\n\n        _addCreatedObjectToSyncPromises: function (syncPromises, dataCollection, resultingItemsForCreate, contentTypeData, collectionName, ids) {\n            var self = this;\n\n            var promise = new rsvp.Promise(function (resolve, reject) {\n                dataCollection\n                    .isSync(true)\n                    .applyOffline(false)\n                    .create(resultingItemsForCreate)\n                    .then(function (res) {\n                        resultingItemsForCreate = _.map(resultingItemsForCreate, function (item, index) {\n                            item.Id = res.result[index].Id;\n                            item.CreatedAt = item.ModifiedAt = res.result[index].CreatedAt;\n                            var resultingItem = _.find(contentTypeData.createdItems, function (createdItem) {\n                                return createdItem.resultingItem.Id === item.Id;\n                            });\n\n                            if (resultingItem.isCustom) {\n                                self._onItemProcessed(item, collectionName, syncLocation.client, offlineItemStates.modified);\n                            }\n\n                            return item;\n                        });\n                    }, function (err) {\n                        throw {\n                            type: offlineItemStates.created,\n                            items: resultingItemsForCreate,\n                            contentType: collectionName,\n                            error: err,\n                            storage: syncLocation.server\n                        };\n                    })\n                    .then(function () {\n                        return dataCollection\n                            .isSync(true)\n                            .useOffline(true)\n                            .create(resultingItemsForCreate)\n                            .then(function () {\n                                _.each(resultingItemsForCreate, function (createdItem) {\n                                    self._onItemProcessed(createdItem, collectionName, syncLocation.server,\n                                        offlineItemStates.created);\n                                });\n                            }, function (err) {\n                                throw {\n                                    type: offlineItemStates.created,\n                                    items: resultingItemsForCreate,\n                                    contentType: collectionName,\n                                    error: err,\n                                    storage: syncLocation.client\n                                };\n                            });\n                    })\n                    .then(function () {\n                        if (ids && ids.length) {\n                            var filter = {Id: {$in: ids}};\n                            return dataCollection\n                                .isSync(true)\n                                .useOffline(true)\n                                .destroy(filter)\n                                .catch(function (err) {\n                                    throw {\n                                        type: offlineItemStates.created,\n                                        items: resultingItemsForCreate,\n                                        contentType: collectionName,\n                                        error: err,\n                                        storage: syncLocation.client\n                                    };\n                                });\n                        }\n                    })\n                    .then(resolve)\n                    .catch(function (err) {\n                        reject(err);\n                    });\n            });\n\n            _.each(resultingItemsForCreate, function (item) {\n                syncPromises[item.Id] = promise;\n            });\n\n            return resultingItemsForCreate;\n        },\n\n        _addCreatedItemsForSync: function (contentTypeData, syncPromises, dataCollection) {\n            var collectionName = dataCollection.collectionName;\n\n            var resultingItemsForCreate = _.pluck(contentTypeData.createdItems, 'resultingItem');\n            var ids;\n            if (!this._shouldAutogenerateIdForContentType(collectionName)) {\n                ids = _.pluck(resultingItemsForCreate, 'Id');\n                resultingItemsForCreate = offlineTransformations.removeIdTransform(resultingItemsForCreate);\n            }\n\n            if (utils.isContentType.files(collectionName)) {\n                return this._addCreatedFileToSyncPromises(resultingItemsForCreate, syncPromises, collectionName);\n            } else {\n                return this._addCreatedObjectToSyncPromises(syncPromises, dataCollection, resultingItemsForCreate, contentTypeData, collectionName, ids);\n            }\n        },\n\n        _addUpdatedItemsForSync: function (contentTypeData, getFilterOperation, syncPromises, dataCollection, itemUpdateOperation) {\n            var self = this;\n            var collectionName = dataCollection.collectionName;\n            self._eachSyncItem(contentTypeData.modifiedItems, getFilterOperation, collectionName, itemUpdateOperation);\n        },\n\n        _addDeletedItemsForSync: function (contentTypeData, getFilterOperation, syncPromises, dataCollection, itemDeleteOperation) {\n            var self = this;\n\n            var collectionName = dataCollection.collectionName;\n            self._eachSyncItem(contentTypeData.deletedItems, getFilterOperation, collectionName, itemDeleteOperation);\n        },\n\n        _onSyncResponse: function (res, item, collectionName, operation, isCustomItem) {\n            var self = this;\n\n            if (res.result !== 1) {\n                return new rsvp.Promise(function (resolve, reject) {\n                    reject(_.extend({}, EverliveErrors.syncConflict, {\n                        contentType: collectionName\n                    }));\n                });\n            } else {\n                if (operation === DataQuery.operations.update) {\n                    self._onItemProcessed(item, collectionName, syncLocation.server, offlineItemStates.modified);\n                    var updatedItem = _.extend({}, item, {\n                        ModifiedAt: res.ModifiedAt\n                    });\n\n                    var updateQuery = new DataQuery({\n                        operation: operation,\n                        data: updatedItem,\n                        additionalOptions: {\n                            id: item.Id\n                        },\n                        collectionName: collectionName,\n                        isSync: true\n                    });\n\n                    return this.processQuery(updateQuery)\n                        .then(function () {\n                            if (isCustomItem) {\n                                var existingItem = _.find(self._syncResultInfo.syncedItems[collectionName], function (syncedItem) {\n                                    return syncedItem.itemId === item.Id;\n                                });\n\n                                if (!existingItem) {\n                                    self._onItemProcessed(item, collectionName, syncLocation.client, offlineItemStates.modified);\n                                }\n                            }\n                        });\n                } else if (operation === DataQuery.operations.remove) {\n                    self._onItemProcessed(item, collectionName, syncLocation.server, offlineItemStates.deleted);\n                    return this._purgeById(collectionName, item.Id)\n                        .then(function () {\n                            if (isCustomItem) {\n                                self._onItemProcessed(item, collectionName, syncLocation.client, offlineItemStates.deleted);\n                            }\n                        });\n                }\n            }\n        },\n\n        _purgeById: function (contentType, itemId) {\n            var self = this;\n\n            return this._queryProcessor._getCollection(contentType)\n                .then(function (collection) {\n                    delete collection[itemId];\n                    return self._queryProcessor._persistData(contentType);\n                });\n        },\n\n        sync: function () {\n            var self = this;\n            self._syncResultInfo = self._syncResultInfo || {\n                syncedItems: {},\n                syncedToServer: 0,\n                syncedToClient: 0,\n                failedItems: {},\n                error: undefined // added for visibility\n            };\n\n            if (!this.isOnline()) {\n                throw new EverliveError('Cannot synchronize while offline');\n            }\n\n            self._fireSyncStart()\n                .then(function () {\n                    return self._applySync();\n                })\n                .then(function (syncResults) {\n                    var conflictsWhileSync = [];\n                    _.each(syncResults, function (syncResult, itemId) {\n                        if (syncResult && syncResult.state === 'rejected') {\n                            if (syncResult.reason && syncResult.reason.code === EverliveErrors.syncConflict.code) {\n                                conflictsWhileSync.push(syncResult);\n                            } else {\n                                // to save time and traffic we are using a single create request for all items\n                                // this is why if there is an error we need to split the items we tried to create\n                                // and set the same error for all items.\n                                self._onItemFailed(syncResult, itemId);\n                            }\n                        }\n                    });\n\n                    if (conflictsWhileSync.length) {\n                        return self.sync();\n                    } else {\n                        self._fireSyncEnd();\n                    }\n                })\n                .catch(function (err) {\n                    self._syncResultInfo.error = err;\n                    self._fireSyncEnd();\n                });\n        },\n\n        _handleKeepServer: function (typeName, conflictingItem, offlineSyncOperations, contentTypeSyncData) {\n            var self = this;\n\n            var serverItem = conflictingItem.serverItem;\n            var clientItem = conflictingItem.clientItem;\n            var syncQuery;\n            if (serverItem && clientItem) {\n                // update the item offline\n                syncQuery = new DataQuery({\n                    collectionName: typeName,\n                    operation: DataQuery.operations.update,\n                    additionalOptions: {\n                        id: serverItem.Id\n                    },\n                    data: serverItem\n                });\n            } else if (serverItem && !clientItem) {\n                // create item offline\n                syncQuery = new DataQuery({\n                    collectionName: typeName,\n                    operation: DataQuery.operations.create,\n                    data: serverItem\n                });\n            } else if (!serverItem && clientItem) {\n                // delete item offline\n                syncQuery = new DataQuery({\n                    collectionName: typeName,\n                    operation: DataQuery.operations.removeSingle,\n                    additionalOptions: {\n                        id: clientItem.Id\n                    }\n                });\n            } else {\n                throw new EverliveError('Both serverItem and clientItem are not set when syncing data with \"KeepServer\" resolution strategy.');\n            }\n\n            syncQuery.isSync = true;\n            offlineSyncOperations.push(new rsvp.Promise(function (resolve, reject) {\n                self.processQuery(syncQuery)\n                    .then(function () {\n                        switch (syncQuery.operation) {\n                            case DataQuery.operations.update:\n                                self._onItemProcessed(serverItem, typeName, syncLocation.client, offlineItemStates.modified);\n                                // the files content type is special and needs to enable the file contents offline, so we cannot only\n                                // update the data\n                                if (utils.isContentType.files(typeName)) {\n                                    contentTypeSyncData.modifiedItems.push({\n                                        remoteItem: conflictingItem.serverItem,\n                                        resultingItem: serverItem,\n                                        resolutionType: constants.ConflictResolution.KeepServer\n                                    });\n                                }\n                                break;\n                            case DataQuery.operations.create:\n                                self._onItemProcessed(serverItem, typeName, syncLocation.client, offlineItemStates.created);\n                                break;\n                            case DataQuery.operations.removeSingle:\n                                self._onItemProcessed(clientItem, typeName, syncLocation.client, offlineItemStates.deleted);\n                                break;\n                        }\n                        resolve();\n                    }, function (err) {\n                        var itemId;\n                        var operation;\n                        switch (syncQuery.operation) {\n                            case DataQuery.operations.update:\n                                itemId = serverItem.Id;\n                                operation = offlineItemStates.modified;\n                                break;\n                            case DataQuery.operations.create:\n                                itemId = serverItem.Id;\n                                operation = offlineItemStates.created;\n                                break;\n                            case DataQuery.operations.removeSingle:\n                                itemId = clientItem.Id;\n                                operation = offlineItemStates.deleted;\n                                break;\n                        }\n\n                        reject({\n                            itemId: itemId,\n                            type: operation,\n                            contentType: syncQuery.collectionName,\n                            error: err,\n                            storage: syncLocation.client\n                        })\n                    })\n            }));\n        },\n\n        _handleKeepClient: function (conflictingItem, contentTypeSyncData) {\n            var serverItem = conflictingItem.serverItem;\n            var clientItem = conflictingItem.clientItem;\n            var resultingItem;\n            var collection;\n\n            if (serverItem && clientItem) {\n                resultingItem = _.extend(clientItem, {ModifiedAt: new Date(serverItem.ModifiedAt)});\n                collection = contentTypeSyncData.modifiedItems;\n            } else if (serverItem && !clientItem) {\n                resultingItem = serverItem;\n                collection = contentTypeSyncData.deletedItems;\n            } else if (!serverItem && clientItem) {\n                resultingItem = clientItem;\n                collection = contentTypeSyncData.createdItems;\n            } else {\n                throw new EverliveError('Both serverItem and clientItem are not set when syncing data with \"KeepClient\" resolution strategy.');\n            }\n\n            collection.push({\n                remoteItem: conflictingItem.serverItem,\n                resultingItem: resultingItem,\n                resolutionType: constants.ConflictResolution.KeepClient\n            });\n        },\n\n        _handleCustom: function (conflictingItem, typeName, offlineSyncOperations, contentTypeSyncData) {\n            var serverItem = conflictingItem.serverItem;\n            var clientItem = conflictingItem.clientItem;\n            var customItem = _.omit(conflictingItem.result.item, 'CreatedAt', 'ModifiedAt');\n            if (serverItem && customItem) {\n                var createItemOfflineQuery = new DataQuery({\n                    collectionName: typeName,\n                    operation: DataQuery.operations.create,\n                    data: serverItem // create the server item offline and it will be updated when sync finishes\n                });\n\n                createItemOfflineQuery.preserveState = true;\n                createItemOfflineQuery.isSync = true;\n\n                offlineSyncOperations.push(this.processQuery(createItemOfflineQuery));\n\n                this._onItemProcessed(serverItem, typeName, syncLocation.client, offlineItemStates.created);\n            }\n\n            if (serverItem && customItem && !clientItem) {\n                customItem.Id = serverItem.Id;\n                contentTypeSyncData.modifiedItems.push({\n                    remoteItem: serverItem,\n                    resultingItem: customItem,\n                    isCustom: true\n                });\n            } else if (serverItem && !customItem) {\n                contentTypeSyncData.deletedItems.push({\n                    remoteItem: conflictingItem.serverItem,\n                    resultingItem: serverItem,\n                    isCustom: true\n                });\n            } else if (!serverItem && customItem && clientItem) {\n                var updateItemOfflineQuery = new DataQuery({\n                    collectionName: typeName,\n                    operation: DataQuery.operations.update,\n                    data: customItem,\n                    additionalOptions: {\n                        id: clientItem.Id\n                    }\n                });\n\n                offlineSyncOperations.push(this.processQuery(updateItemOfflineQuery));\n                customItem.Id = clientItem.Id;\n\n                contentTypeSyncData.createdItems.push({\n                    remoteItem: serverItem,\n                    resultingItem: customItem,\n                    isCustom: true\n                });\n            } else {\n                customItem.Id = serverItem.Id;\n                contentTypeSyncData.modifiedItems.push({\n                    remoteItem: serverItem,\n                    resultingItem: customItem,\n                    isCustom: true\n                });\n            }\n        },\n\n        _mergeResolvedConflicts: function (conflicts, syncData) {\n            var self = this;\n\n            var offlineSyncOperations = [];\n            _.each(conflicts, function (conflict) {\n                var typeName = conflict.contentTypeName;\n                _.each(conflict.conflictingItems, function (conflictingItem) {\n                    var contentTypeSyncData = syncData[typeName];\n                    switch (conflictingItem.result.resolutionType) {\n                        case constants.ConflictResolution.KeepServer:\n                            self._handleKeepServer(typeName, conflictingItem, offlineSyncOperations, contentTypeSyncData);\n                            break;\n                        case constants.ConflictResolution.KeepClient:\n                            self._handleKeepClient(conflictingItem, contentTypeSyncData);\n                            break;\n                        case constants.ConflictResolution.Custom:\n                            if (utils.isContentType.files(typeName)) {\n                                var err = EverliveErrors.customFileSyncNotSupported;\n                                throw new EverliveError(err.message, err.code);\n                            }\n\n                            self._handleCustom(conflictingItem, typeName, offlineSyncOperations, contentTypeSyncData);\n                            break;\n                        case constants.ConflictResolution.Skip:\n                            break;\n                    }\n                });\n            });\n\n            return rsvp.all(offlineSyncOperations);\n        },\n\n        _getSyncItemStates: function (contentType, offlineItems, serverItems) {\n            var self = this;\n\n            var contentTypeSyncData = {\n                itemsForSync: {\n                    createdItems: [],\n                    modifiedItems: [],\n                    deletedItems: []\n                },\n                conflicts: {\n                    contentTypeName: contentType,\n                    conflictingItems: []\n                }\n            };\n\n            _.each(offlineItems, function (offlineItem) {\n                var serverItem = _.findWhere(serverItems, {Id: offlineItem.Id});\n                if (serverItem) {\n                    if (serverItem.Id === offlineItem.Id && offlineItem[constants.offlineItemsStateMarker] === offlineItemStates.created) {\n                        if (self.setup.conflicts.strategy === constants.ConflictResolutionStrategy.Custom) {\n                            self._onItemFailed({\n                                type: offlineItemStates.modified,\n                                storage: syncLocation.client,\n                                error: new EverliveError(EverliveErrors.syncError),\n                                contentType: contentType\n                            }, offlineItem.Id);\n\n                            return self._onItemFailed({\n                                type: offlineItemStates.modified,\n                                storage: syncLocation.server,\n                                error: new EverliveError(EverliveErrors.syncError),\n                                contentType: contentType\n                            }, serverItem.Id);\n                        } else {\n                            return self._onItemFailed({\n                                type: offlineItemStates.created,\n                                storage: syncLocation.client,\n                                error: new EverliveError(EverliveErrors.syncError),\n                                contentType: contentType\n                            }, serverItem.Id);\n                        }\n                    }\n\n                    var clientItemChanged = !!offlineItem[constants.offlineItemsStateMarker];\n                    var hasUpdateConflict = false;\n\n                    if (clientItemChanged) {\n                        hasUpdateConflict = serverItem.ModifiedAt.getTime() !== offlineItem.ModifiedAt.getTime()\n                        || offlineItem[constants.offlineItemsStateMarker] === offlineItemStates.deleted;\n                        //TODO: when an item is removed offline its ModifiedAt field is not set, check if it needs to be set or we can use this\n                    }\n\n                    if (hasUpdateConflict) {\n                        contentTypeSyncData.conflicts.conflictingItems.push({\n                            // if the item was modified on the server and deleted locally we have a conflict and set the client item to null\n                            // otherwise it is a simple modification conflict\n                            clientItem: offlineItem[constants.offlineItemsStateMarker] === offlineItemStates.deleted ? null : offlineItem,\n                            serverItem: serverItem,\n                            result: {}\n                        });\n                    } else {\n                        if (offlineItem[constants.offlineItemsStateMarker] === offlineItemStates.deleted) {\n                            contentTypeSyncData.itemsForSync.deletedItems.push({\n                                remoteItem: serverItem,\n                                resultingItem: offlineItem\n                            });\n                        } else {\n                            contentTypeSyncData.itemsForSync.modifiedItems.push({\n                                remoteItem: serverItem,\n                                resultingItem: offlineItem\n                            });\n                        }\n                    }\n                } else {\n                    // if the item in memory has been modified, but the item on the server has been deleted\n                    if (offlineItem[constants.offlineItemsStateMarker] === offlineItemStates.modified) {\n                        contentTypeSyncData.conflicts.conflictingItems.push({\n                            clientItem: offlineItem,\n                            serverItem: null,\n                            result: {}\n                        });\n                    } else {\n                        contentTypeSyncData.itemsForSync.createdItems.push({\n                            remoteItem: serverItem,\n                            resultingItem: offlineItem\n                        });\n                    }\n                }\n\n                delete offlineItem[constants.offlineItemsStateMarker];\n            });\n\n            return contentTypeSyncData;\n        },\n\n        _setResolutionTypeForItem: function (resolutionType, conflictingItem) {\n            conflictingItem.result = {\n                resolutionType: resolutionType\n            };\n        },\n\n        _applyResolutionStrategy: function (conflicts) {\n            var self = this;\n            var conflictResolutionStrategy = self.setup.conflicts.strategy;\n            return new rsvp.Promise(function (resolve, reject) {\n                var conflictResolutionPromises = [];\n\n                for (var i = 0; i < conflicts.length; i++) {\n                    var conflict = conflicts[i];\n                    if (conflict.conflictingItems.length) {\n                        switch (conflictResolutionStrategy) {\n                            case constants.ConflictResolutionStrategy.ServerWins:\n                                _.each(conflict.conflictingItems,\n                                    self._setResolutionTypeForItem.bind(self, constants.ConflictResolution.KeepServer));\n                                break;\n                            case constants.ConflictResolutionStrategy.Custom:\n                                var customStrategy = self.setup.conflicts.implementation;\n                                if (!customStrategy) {\n                                    return reject(new EverliveError('Implementation of the conflict resolution strategy ' +\n                                    'must be provided when set to Custom'));\n                                }\n\n                                conflictResolutionPromises.push(new rsvp.Promise(function (resolve) {\n                                    customStrategy(conflicts, resolve)\n                                }));\n                                break;\n                            default:\n                                return reject(new EverliveError('Invalid resolution strategy provided'));\n                        }\n                    }\n                }\n\n                rsvp.all(conflictResolutionPromises)\n                    .then(function () {\n                        resolve();\n                    });\n            });\n        },\n\n        _getSyncPromiseBatch: function (contentType, batchIds) {\n            var self = this;\n\n            return new rsvp.Promise(function (resolve, reject) {\n                var dataQuery = new DataQuery({\n                    collectionName: contentType,\n                    filter: {\n                        'Id': {\n                            '$in': batchIds\n                        }\n                    },\n                    operation: DataQuery.operations.read,\n                    onSuccess: function (res) {\n                        resolve(res.result);\n                    },\n                    applyOffline: false,\n                    onError: reject\n                });\n\n                var getRequestOptionsFromQuery = RequestOptionsBuilder[dataQuery.operation];\n                var requestOptions = getRequestOptionsFromQuery(dataQuery);\n                var request = new Request(self._everlive.setup, requestOptions);\n                request.send();\n            });\n        },\n\n        _getDirtyItems: function (collection) {\n            return this._queryProcessor._getDirtyItems(collection);\n        },\n\n        _getSyncPromiseForCollection: function (collection, contentType) {\n            var self = this;\n\n            var batches = [];\n            var batchSize = constants.syncBatchSize;\n\n            var offlineItemsToSync = self._getDirtyItems(collection);\n\n            var allIdsForSync;\n            if (this._shouldAutogenerateIdForContentType(contentType)) {\n                allIdsForSync = _.pluck(offlineItemsToSync, '_id');\n            } else {\n                allIdsForSync = _.pluck(_.reject(offlineItemsToSync, function (offlineItem) {\n                    return offlineItem[constants.offlineItemsStateMarker] === offlineItemStates.created;\n                }), '_id');\n            }\n\n            var batchCount = Math.ceil(allIdsForSync.length / batchSize);\n\n            for (var i = 0; i < batchCount; i++) {\n                var batchSkipSize = i * batchSize;\n                var batchIds = allIdsForSync.slice(batchSkipSize, batchSkipSize + batchSize);\n                var syncGetServerItemsPromise = this._getSyncPromiseBatch(contentType, batchIds);\n                batches.push(syncGetServerItemsPromise);\n            }\n\n            return rsvp.all(batches)\n                .then(function (serverItemsSyncResponses) {\n                    var result = {\n                        serverItems: []\n                    };\n\n                    _.each(serverItemsSyncResponses, function (serverItems) {\n                        result.serverItems = _.union(result.serverItems, serverItems);\n                    });\n\n                    result.offlineItemsToSync = offlineItemsToSync;\n                    return result;\n                });\n        },\n\n        _onItemFailed: function (syncResult, itemId) {\n            var self = this;\n\n            var results = syncResult.reason ? syncResult.reason : syncResult;\n            var targetType = results.contentType;\n\n            var getFailedItem = function (id) {\n                var pickedObject = _.pick(results, 'storage', 'type', 'error');\n                return _.extend({\n                    itemId: id,\n                    contentType: targetType\n                }, pickedObject);\n            };\n\n            var failedItems = [];\n            if (results.type === offlineItemStates.created && results.items) {\n                failedItems = _.map(results.items, function (item) {\n                    return getFailedItem(item.Id);\n                });\n            } else {\n                failedItems.push(getFailedItem(itemId));\n            }\n\n            self._syncResultInfo.failedItems[targetType] = self._syncResultInfo.failedItems[targetType] || [];\n            _.each(failedItems, function (failedItem) {\n                self._syncResultInfo.failedItems[targetType].push(failedItem);\n                self._fireItemProcessed(failedItem);\n            });\n        },\n\n        _onItemProcessed: function (item, contentType, syncStorage, syncType) {\n            var syncInfo = {\n                itemId: item.Id,\n                type: syncType,\n                storage: syncStorage,\n                contentType: contentType\n            };\n\n            this._syncResultInfo.syncedItems[contentType] = this._syncResultInfo.syncedItems[contentType] || [];\n            this._syncResultInfo.syncedItems[contentType].push(syncInfo);\n\n            if (syncInfo.storage == syncLocation.server) {\n                this._syncResultInfo.syncedToServer++;\n            } else {\n                this._syncResultInfo.syncedToClient++;\n            }\n\n            this._fireItemProcessed(syncInfo);\n        },\n\n        _fireItemProcessed: function (syncInfo) {\n            this._everlive._emitter.emit('itemProcessed', syncInfo);\n        },\n\n        _getClientWinsSyncData: function (collections) {\n            var self = this;\n            var syncData = {};\n            _.each(collections, function (collection, typeName) {\n                if (!syncData[typeName]) {\n                    syncData[typeName] = {\n                        createdItems: [],\n                        modifiedItems: [],\n                        deletedItems: []\n                    };\n                }\n\n                var dirtyItems = self._getDirtyItems(collection);\n                var itemsForSync = offlineTransformations.idTransform(dirtyItems);\n\n                _.each(itemsForSync, function (itemForSync) {\n                    switch (itemForSync[constants.offlineItemsStateMarker]) {\n                        case offlineItemStates.created:\n                            syncData[typeName].createdItems.push({\n                                remoteItem: itemForSync,\n                                resultingItem: itemForSync\n                            });\n                            break;\n                        case offlineItemStates.modified:\n                            syncData[typeName].modifiedItems.push({\n                                remoteItem: itemForSync,\n                                resultingItem: itemForSync\n                            });\n                            break;\n                        case offlineItemStates.deleted:\n                            syncData[typeName].deletedItems.push({\n                                remoteItem: itemForSync,\n                                resultingItem: itemForSync\n                            });\n                            break;\n                    }\n\n                    delete itemForSync[constants.offlineItemsStateMarker];\n                });\n            });\n\n            return syncData;\n        },\n\n        _getModifiedFilesForSyncClientWins: function (itemId, item, collectionName) {\n            var self = this;\n            var sdk = self._everlive;\n\n            return new rsvp.Promise(function (resolve, reject) {\n                var offlineFiles = self.files;\n                offlineFiles.getOfflineLocation(itemId)\n                    .then(function (location) {\n                        if (location) {\n                            return self._transferFile(true, item, location)\n                                .then(function (result) {\n                                    if (result.Result === false) {\n                                        reject({\n                                            type: offlineItemStates.modified,\n                                            itemId: item.Id,\n                                            contentType: collectionName,\n                                            error: result,\n                                            storage: syncLocation.server\n                                        });\n                                    } else {\n                                        return {\n                                            result: result\n                                        };\n                                    }\n                                }, function (err) {\n                                    reject({\n                                        type: offlineItemStates.modified,\n                                        itemId: item.Id,\n                                        contentType: collectionName,\n                                        error: err,\n                                        storage: syncLocation.server\n                                    });\n                                });\n                        } else {\n                            return sdk.files\n                                .isSync(true)\n                                .applyOffline(false)\n                                .updateSingle(item)\n                                .then(function (response) {\n                                    return response;\n                                }, function (err) {\n                                    reject({\n                                        type: offlineItemStates.modified,\n                                        itemId: item.Id,\n                                        contentType: collectionName,\n                                        error: err,\n                                        storage: syncLocation.server\n                                    });\n                                });\n                        }\n                    })\n                    .then(function (onlineResponse) {\n                        var onlineResult = onlineResponse.result;\n                        item.ModifiedAt = onlineResult.ModifiedAt;\n                        self._onItemProcessed(item, collectionName, syncLocation.server, offlineItemStates.modified);\n                        return sdk.files\n                            .isSync(true)\n                            .useOffline(true)\n                            .updateSingle(item);\n                    })\n                    .then(resolve)\n                    .catch(function (err) {\n                        reject({\n                            type: offlineItemStates.modified,\n                            itemId: item.Id,\n                            contentType: collectionName,\n                            error: err,\n                            storage: syncLocation.server\n                        });\n                    });\n            });\n        },\n\n        _getModifiedItemForSyncClientWins: function (dataCollection, item, collectionName) {\n            var self = this;\n\n            return new rsvp.Promise(function (resolve, reject) {\n                return dataCollection\n                    .isSync(true)\n                    .applyOffline(false)\n                    .updateSingle(item)\n                    .then(function (res) {\n                        self._onItemProcessed(item, collectionName, syncLocation.server, offlineItemStates.modified);\n                        var updatedItem = _.extend({}, item, {\n                            ModifiedAt: res.ModifiedAt\n                        });\n\n                        var updateQuery = new DataQuery({\n                            operation: DataQuery.operations.update,\n                            data: updatedItem,\n                            additionalOptions: {\n                                id: item.Id\n                            },\n                            collectionName: collectionName,\n                            isSync: true\n                        });\n\n                        return self.processQuery(updateQuery);\n                    }, function (res) {\n                        reject({\n                            storage: syncLocation.server,\n                            type: offlineItemStates.modified,\n                            itemId: item.Id,\n                            contentType: collectionName,\n                            error: res\n                        });\n                    })\n                    .then(resolve, function (err) {\n                        reject({\n                            storage: syncLocation.client,\n                            type: offlineItemStates.modified,\n                            itemId: item.Id,\n                            contentType: collectionName,\n                            error: err\n                        });\n                    });\n            });\n        },\n\n        _addModifiedItemsForSyncClientWins: function (contentTypeData, syncPromises, dataCollection) {\n            var self = this;\n\n            this._addUpdatedItemsForSync(contentTypeData, getSyncFilterNoModifiedAt, syncPromises, dataCollection, function (item) {\n                var itemId = item.Id;\n                if (!itemId) {\n                    throw new EverliveError('When updating an item it must have an Id field.');\n                }\n                var collectionName = dataCollection.collectionName;\n\n                if (utils.isContentType.files(collectionName)) {\n                    syncPromises[itemId] = self._getModifiedFilesForSyncClientWins(itemId, item, collectionName);\n                } else {\n                    syncPromises[itemId] = self._getModifiedItemForSyncClientWins(dataCollection, item, collectionName);\n                }\n            });\n        },\n\n        _addDeletedItemsForSyncClientWins: function (contentTypeData, syncPromises, dataCollection) {\n            var self = this;\n\n            this._addDeletedItemsForSync(contentTypeData, getSyncFilterNoModifiedAt, syncPromises, dataCollection,\n                function (item, itemFilter) {\n                    var collectionName = dataCollection.collectionName;\n                    syncPromises[item.Id] = new rsvp.Promise(function (resolve, reject) {\n                        var itemId = item.Id;\n                        if (!itemId) {\n                            throw new EverliveError('When deleting an item it must have an Id field.');\n                        }\n\n                        return dataCollection\n                            .isSync(true)\n                            .applyOffline(false)\n                            .destroySingle(itemFilter)\n                            .then(function () {\n                                self._onItemProcessed(item, collectionName, syncLocation.server, offlineItemStates.deleted);\n                                return self._purgeById(collectionName, item.Id).then(function () {\n                                    resolve();\n                                }, function (err) {\n                                    reject(_.extend({}, {\n                                        storage: syncLocation.client,\n                                        type: offlineItemStates.deleted,\n                                        contentType: collectionName,\n                                        itemId: itemId,\n                                        error: err\n                                    }));\n                                });\n                            }, function (err) {\n                                reject(_.extend({}, {\n                                    storage: syncLocation.server,\n                                    type: offlineItemStates.deleted,\n                                    contentType: collectionName,\n                                    error: err,\n                                    itemId: itemId\n                                }));\n                            });\n                    });\n                });\n        },\n\n        _applyClientWins: function (collections) {\n            var self = this;\n            var syncData = this._getClientWinsSyncData(collections);\n            var syncPromises = {};\n\n            _.each(syncData, function (contentTypeData, typeName) {\n                var dataCollection = self._everlive.data(typeName);\n                if (contentTypeData.createdItems.length) {\n                    self._addCreatedItemsForSync(contentTypeData, syncPromises, dataCollection);\n                }\n\n                if (contentTypeData.modifiedItems.length) {\n                    self._addModifiedItemsForSyncClientWins(contentTypeData, syncPromises, dataCollection);\n                }\n\n                if (contentTypeData.deletedItems.length) {\n                    self._addDeletedItemsForSyncClientWins(contentTypeData, syncPromises, dataCollection);\n                }\n            });\n\n            return rsvp.hashSettled(syncPromises);\n        },\n\n        _modifyFileStandardSync: function (syncPromises, itemId, item, collectionName, resolutionType) {\n            var self = this;\n\n            var filesCollection = self._everlive.files;\n            syncPromises[itemId] = new rsvp.Promise(function (resolve, reject) {\n                var offlineLocation;\n                self.files.getOfflineLocation(itemId)\n                    .then(function (locationOnDisk) {\n                        offlineLocation = locationOnDisk;\n                    })\n                    .then(function () {\n                        return filesCollection\n                            .isSync(true)\n                            .applyOffline(false)\n                            .getById(itemId);\n                    })\n                    .then(function (response) {\n                        var file = response.result;\n                        if (file.ModifiedAt.getTime() !== item.ModifiedAt.getTime()) {\n                            reject(_.extend({}, new EverliveError(EverliveErrors.syncConflict), {\n                                contentType: collectionName\n                            }));\n                        } else {\n                            if (offlineLocation) {\n                                if (resolutionType === constants.ConflictResolution.KeepServer) {\n                                    return self.files._saveFile(item.Uri, item.Filename, item.Id)\n                                        .then(function () {\n                                            return self._offlineFilesProcessor.purge(offlineLocation);\n                                        })\n                                        .then(function () {\n                                            return response;\n                                        });\n                                } else if (resolutionType === constants.ConflictResolution.KeepClient) {\n                                    return self._transferFile(true, item, offlineLocation);\n                                }\n                            }\n                        }\n                    })\n                    .then(function () {\n                        return self._everlive.files\n                            .isSync(true)\n                            .useOffline(true)\n                            .updateSingle(item);\n                    })\n                    .then(resolve)\n                    .catch(reject);\n            });\n        },\n\n        _modifyContentTypeStandardSync: function (syncPromises, itemId, dataCollection, item, itemFilter, collectionName, isCustom) {\n            var self = this;\n\n            syncPromises[itemId] = dataCollection\n                .isSync(true)\n                .applyOffline(false)\n                .update(item, itemFilter)\n                .then(function (res) {\n                    return self._onSyncResponse(res, item, collectionName, DataQuery.operations.update, isCustom);\n                }, function (err) {\n                    return new rsvp.Promise(function (resolve, reject) {\n                        reject({\n                            type: offlineItemStates.modified,\n                            itemId: item.Id,\n                            contentType: collectionName,\n                            error: err,\n                            storage: syncLocation.server\n                        });\n                    });\n                });\n        },\n\n        _applyStandardSync: function (collections) {\n            var self = this;\n\n            var promises = {};\n            _.each(collections, function (collection, contentType) {\n                promises[contentType] = self._getSyncPromiseForCollection(collection, contentType);\n            });\n\n            return rsvp.hash(promises)\n                .then(function (contentTypes) {\n                    return self._prepareSyncData(contentTypes);\n                })\n                .then(function (syncData) {\n                    return self._resolveConflicts(syncData);\n                })\n                .then(function (contentTypeSyncData) {\n                    var syncPromises = {};\n                    _.each(contentTypeSyncData, function (contentTypeData, collectionName) {\n                        var dataCollection = self._everlive.data(collectionName);\n                        if (contentTypeData.createdItems.length) {\n                            self._addCreatedItemsForSync(contentTypeData, syncPromises, dataCollection);\n                        }\n\n                        if (contentTypeData.modifiedItems.length) {\n                            self._addUpdatedItemsForSync(contentTypeData, getSyncFilterForItem, syncPromises, dataCollection, function (item, itemFilter, isCustom, resolutionType) {\n                                var itemId = item.Id;\n\n                                if (utils.isContentType.files(collectionName)) {\n                                    self._modifyFileStandardSync(syncPromises, itemId, item, collectionName, resolutionType, isCustom);\n                                } else {\n                                    self._modifyContentTypeStandardSync(syncPromises, itemId, dataCollection, item, itemFilter, collectionName, isCustom);\n                                }\n                            });\n                        }\n\n                        if (contentTypeData.deletedItems.length) {\n                            self._addDeletedItemsForSync(contentTypeData, getSyncFilterForItem, syncPromises, dataCollection, function (item, itemFilter, isCustom) {\n                                syncPromises[item.Id] = dataCollection\n                                    .isSync(true)\n                                    .applyOffline(false)\n                                    .destroy(itemFilter)\n                                    .then(function (res) {\n                                        return self._onSyncResponse(res, item, collectionName, DataQuery.operations.remove, isCustom);\n                                    }, function (err) {\n                                        return new rsvp.Promise(function (resolve, reject) {\n                                            reject({\n                                                type: offlineItemStates.deleted,\n                                                itemId: item.Id,\n                                                contentType: collectionName,\n                                                error: err,\n                                                storage: syncLocation.server\n                                            });\n                                        });\n                                    });\n                            });\n                        }\n                    });\n\n                    return rsvp.hashSettled(syncPromises);\n                });\n        },\n\n        _applySync: function () {\n            var self = this;\n\n            return this._queryProcessor._getAllCollections()\n                .then(function (collections) {\n                    if (self.setup.conflicts.strategy === constants.ConflictResolutionStrategy.ClientWins) {\n                        return self._applyClientWins(collections);\n                    } else {\n                        return self._applyStandardSync(collections);\n                    }\n                });\n        },\n\n        /**\n         * Get all the offline items that have not been synced online.\n         * @method getItemsForSync\n         * @name getItemsForSync\n         * @memberOf OfflineModule.prototype\n         * @param {function} [success] A success callback.\n         * @param {function} [error] An error callback.\n         */\n        /**\n         * Get all the offline items that have not been synced online.\n         * @method getItemsForSync\n         * @name getItemsForSync\n         * @memberOf OfflineModule.prototype\n         * @returns {Promise}\n         */\n        getItemsForSync: function (success, error) {\n            var self = this;\n            var dirtyItemsForSync = {};\n            return buildPromise(function (successCb, errorCb) {\n                self._queryProcessor._getAllCollections()\n                    .then(function (collections) {\n                        _.each(collections, function (collection, collectionName) {\n                            var dirtyItems = self._getDirtyItems(collection);\n                            dirtyItemsForSync[collectionName] = _.map(dirtyItems, function (item) {\n                                var itemForSync = {\n                                    item: _.extend({}, item),\n                                    action: item[constants.offlineItemsStateMarker]\n                                };\n\n                                delete itemForSync.item[constants.offlineItemsStateMarker];\n                                return itemForSync;\n                            });\n                        });\n\n                        successCb(dirtyItemsForSync);\n                    }).catch(errorCb);\n            }, success, error);\n        }\n    };\n\n    return OfflineModule;\n})();\n",
    "var constants = require('../constants');\nvar persisters = require('./offlinePersisters');\nvar LocalStoragePersister = persisters.LocalStoragePersister;\nvar FileSystemPersister = persisters.FileSystemPersister;\nvar OfflineStorageModule = require('./OfflineStorageModule');\nvar EverliveError = require('../EverliveError').EverliveError;\nvar isNativeScript = require('../everlive.platform').isNativeScript;\nvar common = require('../common');\nvar _ = common._;\nvar rsvp = common.rsvp;\nvar CryptographicProvider = require('../encryption/CryptographicProvider');\n\nvar defaultOfflineStorageOptions = {\n    autoSync: true,\n    enabled: true,\n    conflicts: {\n        strategy: constants.ConflictResolutionStrategy.ClientWins,\n        implementation: null\n    },\n    offline: false,\n    storage: {\n        name: '',\n        provider: isNativeScript ? constants.StorageProvider.FileSystem : constants.StorageProvider.LocalStorage,\n        implementation: null,\n        storagePath: constants.DefaultStoragePath\n    },\n    typeSettings: {},\n    encryption: {\n        provider: constants.EncryptionProvider.Default,\n        implementation: null,\n        key: ''\n    },\n    files: {\n        storagePath: constants.DefaultFilesStoragePath,\n        metaPath: constants.DefaultFilesMetadataPath,\n        maxConcurrentDownloads: constants.MaxConcurrentDownloadTasks\n    }\n};\n\nmodule.exports = (function () {\n\n    var conflictResolutionStrategies = {};\n\n    conflictResolutionStrategies[constants.ConflictResolutionStrategy.ClientWins] = function (collection, local, server) {\n        return new rsvp.Promise(function (resolve) {\n            resolve(local);\n        });\n    };\n\n    conflictResolutionStrategies[constants.ConflictResolutionStrategy.ServerWins] = function (collection, local, server) {\n        return new rsvp.Promise(function (resolve) {\n            resolve(server);\n        });\n    };\n\n    var initStoragePersister = function initStoragePersister(options) {\n        var storageKey = options.storage.name || 'everliveOfflineStorage_' + this.setup.apiKey;\n        var persister = persisters.getPersister(storageKey, options);\n        options.storage.implementation = persister;\n        return persister;\n    };\n\n    var initEncryptionProvider = function initEncryptionProvider(options) {\n        var encryptor;\n        var encryptionProvider = options.encryption.provider;\n        var encryptionImplementation = options.encryption.implementation;\n        if (_.isObject(encryptionImplementation) && encryptionProvider === constants.EncryptionProvider.Custom) {\n            encryptor = encryptionImplementation;\n        } else {\n            switch (encryptionProvider) {\n                case constants.EncryptionProvider.Default:\n                    encryptor = new CryptographicProvider(options);\n                    break;\n                case constants.EncryptionProvider.Custom:\n                    throw new EverliveError('Custom encryption provider requires an implementation object');\n                default:\n                    throw new EverliveError('Unsupported encryption provider ' + encryptionProvider);\n            }\n        }\n\n        options.encryption.implementation = encryptor;\n        return encryptor;\n    };\n\n    function buildOfflineStorageOptions(sdkOptions) {\n        var storageOptions = sdkOptions.offline || sdkOptions.offlineStorage;\n        var options;\n        if (storageOptions === true) { // explicit check for shorthand initialization\n            options = _.defaults({}, defaultOfflineStorageOptions);\n        } else if (_.isObject(storageOptions)) {\n            options = _.defaults(storageOptions, defaultOfflineStorageOptions);\n            options.storage = _.defaults(storageOptions.storage, defaultOfflineStorageOptions.storage);\n            options.encryption = _.defaults(storageOptions.encryption, defaultOfflineStorageOptions.encryption);\n            options.conflicts = _.defaults(storageOptions.conflicts, defaultOfflineStorageOptions.conflicts);\n            options.files = _.defaults(storageOptions.files, defaultOfflineStorageOptions.files);\n        } else {\n            options = _.defaults({}, defaultOfflineStorageOptions);\n            options.enabled = false;\n            if (!storageOptions) {\n                sdkOptions.offlineStorage = options;\n            }\n        }\n\n        options.cacheEnabled = sdkOptions.caching && sdkOptions.caching.enabled;\n        return options;\n    }\n\n    var buildOfflineStorageModule = function buildOfflineStorageModule(sdkOptions) {\n        var options = buildOfflineStorageOptions(sdkOptions);\n        var persister = initStoragePersister.call(this, options);\n        var encryptionProvider = initEncryptionProvider.call(this, options);\n\n        return new OfflineStorageModule(this, options, persister, encryptionProvider);\n    };\n\n    var initOfflineStorage = function (options) {\n        this.offlineStorage = buildOfflineStorageModule.call(this, options);\n    };\n\n    return {\n        initOfflineStorage: initOfflineStorage,\n        buildOfflineStorageOptions: buildOfflineStorageOptions\n    }\n}());",
    "var BasePersister = require('./persisters/BasePersister');\nvar LocalStoragePersister = require('./persisters/LocalStoragePersister');\nvar FileSystemPersister = require('./persisters/FileSystemPersister');\nvar constants = require('../constants');\nvar EverliveError = require('../EverliveError').EverliveError;\nvar _ = require('../common')._;\n\nmodule.exports = {\n    BasePersister: BasePersister,\n    LocalStoragePersister: LocalStoragePersister,\n    FileSystemPersister: FileSystemPersister,\n    getPersister: function (storageKey, options) {\n        var persister;\n\n        var storageProvider = options.storage.provider;\n        var storageProviderImplementation = options.storage.implementation;\n        if (_.isObject(storageProviderImplementation) && storageProvider === constants.StorageProvider.Custom) {\n            persister = storageProviderImplementation;\n        } else {\n            switch (storageProvider) {\n                case constants.StorageProvider.LocalStorage:\n                    persister = new LocalStoragePersister(storageKey, options);\n                    break;\n                case constants.StorageProvider.FileSystem:\n                    persister = new FileSystemPersister(storageKey, options);\n                    break;\n                case constants.StorageProvider.Custom:\n                    throw new EverliveError('Custom storage provider requires an implementation object');\n                default:\n                    throw new EverliveError('Unsupported storage type ' + storageProvider);\n            }\n        }\n\n        return persister;\n    }\n};",
    "'use strict';\n\nvar constants = require('../constants');\nvar _ = require('../common')._;\nvar offlineItemStateMarker = constants.offlineItemsStateMarker;\n\nvar traverseAndApply = function (value, operation, additionalOptions) {\n    if (_.isArray(value)) {\n        return _.map(value, function (item) {\n            return operation(item, additionalOptions);\n        });\n    } else {\n        return operation(value, additionalOptions);\n    }\n};\n\nvar idTransformation = function (value) {\n    if (typeof value === 'object' && value._id && !value.Id) {\n        value.Id = value._id;\n        delete value._id;\n    }\n\n    return value;\n};\n\nvar removeIdTransform = function (value, opts) {\n    var verifyStateCreated = opts.verifyStateCreated;\n    var shouldModifyObject = verifyStateCreated ? value[constants.offlineItemsStateMarker] === constants.offlineItemStates.created : true;\n    if (typeof value === 'object' && (value._id || value.Id) && shouldModifyObject) {\n        delete value._id;\n        delete value.Id;\n    }\n\n    return value;\n};\n\nvar removeMarkerTransform = function (value) {\n    delete value[offlineItemStateMarker];\n    return value;\n};\n\nvar offlineTransformations = {\n    removeIdTransform: function (value, verifyStateCreated) {\n        return traverseAndApply(value, removeIdTransform, {verifyStateCreated: verifyStateCreated});\n    },\n    idTransform: function (value) {\n        return traverseAndApply(value, idTransformation);\n    },\n    singleFieldTransform: function (singleFieldExpression, value) {\n        if (typeof value === 'undefined' || value === null) {\n            return null;\n        } else {\n            return value[singleFieldExpression];\n        }\n    },\n    traverseAndTransformFilterId: function (filterObj) {\n        if (filterObj && filterObj.Id) {\n            filterObj._id = filterObj.Id;\n            delete filterObj.Id;\n        }\n\n        for (var prop in filterObj) {\n            if (filterObj.hasOwnProperty(prop)) {\n                var objectMember = filterObj[prop];\n                if (typeof objectMember === 'object') {\n                    offlineTransformations.traverseAndTransformFilterId(objectMember);\n                }\n            }\n        }\n    },\n    removeMarkersTransform: function (value) {\n        return traverseAndApply(value, removeMarkerTransform);\n    },\n    removeFieldsTransform: function (value, fields) {\n        _.each(fields, function (field) {\n            delete value[field];\n        });\n\n        return value;\n    }\n};\n\nmodule.exports = offlineTransformations;",
    "'use strict';\n\nvar EverliveError = require('../../EverliveError').EverliveError;\nvar utils = require('../../utils');\nvar common = require('../../common');\nvar _ = common._;\nvar rsvp = common.rsvp;\n\nvar BasePersister = (function () {\n\n    /**\n     * @class BasePersister\n     * @classdesc An abstraction layer for all persisters. Every persister can write/read\n     * data to/from a specific place. The data is saved as key-value pairs where the keys are\n     * content types.\n     */\n    function BasePersister(key, options) {\n        this.key = key;\n        this.options = options;\n        this.contentTypesStoreKey = this.key + '@ContentTypes';\n    }\n\n    BasePersister.prototype = {\n        /**\n         * Gets all the saved data.\n         * @method getAllData\n         * @memberof BasePersister\n         * @param {Function} success A success callback.\n         * @param {Function} error An error callback.\n         * @returns {Object} The keys are the content types and the values are the corresponding data items.\n         */\n        getAllData: function (success, error) {\n            var self = this;\n            var promises = {};\n            this._getContentTypes(function (contentTypes) {\n                _.each(contentTypes, function (contentType) {\n                    promises[contentType] = new rsvp.Promise(function (resolve, reject) {\n                        self.getData(contentType, resolve, reject);\n                    });\n                });\n\n                rsvp.hash(promises)\n                    .then(success)\n                    .catch(error);\n            }, error);\n        },\n\n        /**\n         * Returns the saved data for a specific content type.\n         * @method getData\n         * @param {string} contentType The content type for which to retrieve the data.\n         * @param {Function} success A success callback.\n         * @param {Function} error An error callback.\n         * @memberof BasePersister\n         * @returns {string} The retrieved data.\n         */\n        getData: function (contentType, success, error) {\n            throw new EverliveError('The method getData is not implemented');\n        },\n\n        /**\n         * Saves data for a specific content type.\n         * @method saveData\n         * @param {string} contentType The content for which to save the data.\n         * @param {string} data The data corresponding to the specified content type.\n         * @param {Function} success A success callback.\n         * @param {Function} error An error callback.\n         * @memberof BasePersister\n         */\n        saveData: function (contentType, data, success, error) {\n            throw new EverliveError('The method saveData is not implemented');\n        },\n\n        /**\n         * Clears the persisted data for a specific content type.\n         * @method purge\n         * @param {string} contentType The content type for which to clear the data.\n         * @param {Function} success A success callback.\n         * @param {Function} error An error callback.\n         * @memberof BasePersister\n         */\n        purge: function (contentType, success, error) {\n            throw new EverliveError('The method clear is not implemented');\n        },\n\n        /**\n         * Clears all persisted data in the offline store.\n         * @method purgeAll\n         * @memberof BasePersister\n         * @param {Function} success A success callback.\n         * @param {Function} error An error callback.\n         */\n        purgeAll: function (success, error) {\n            throw new EverliveError('The method clearAll is not implemented');\n        },\n\n        _getKey: function (contentType) {\n            return this.key + '_' + contentType;\n        },\n\n        _getContentTypes: function (success, error) {\n            throw new EverliveError('The method _getContentTypes is not implemented');\n        }\n    };\n\n    return BasePersister;\n}());\n\nmodule.exports = BasePersister;",
    "'use strict';\n\nvar FileStore = require('../../storages/FileStore');\nvar BasePersister = require('./BasePersister');\nvar EverliveError = require('../../EverliveError').EverliveError;\nvar common = require('../../common');\nvar _ = common._;\nvar platform = require('../../everlive.platform');\nvar rsvp = common.rsvp;\nvar util = require('util');\nvar path = require('path');\nvar utils = require('../../utils');\n\nvar FileSystemPersister = (function () {\n    /**\n     * @class FileSystemPersister\n     * @protected\n     * @extends BasePersister\n     */\n    function FileSystemPersister(key, options) {\n        BasePersister.apply(this, arguments);\n        this.fileStore = new FileStore(options.storage.storagePath, options);\n    }\n\n    util.inherits(FileSystemPersister, BasePersister);\n\n    FileSystemPersister.prototype.getAllData = function (success, error) {\n        var errorHandler = this._fileSystemErrorHandler(error);\n        FileSystemPersister.super_.prototype.getAllData.call(this, success, errorHandler);\n    };\n\n    FileSystemPersister.prototype.getData = function (contentType, success, error) {\n        var self = this;\n        var errorHandler = this._fileSystemErrorHandler(error);\n        this.getFileHandle(contentType, function (fileEntry) {\n            self._readFileContent(fileEntry, success, errorHandler);\n        }, error);\n    };\n\n    FileSystemPersister.prototype.saveData = function (contentType, data, success, error) {\n        var self = this;\n        var errorHandler = this._fileSystemErrorHandler(error);\n        this.getFileHandle(contentType, function (fileEntry) {\n            self._writeFileContent(fileEntry, data, function () {\n                self._saveContentTypes(contentType, success, errorHandler);\n            }, errorHandler);\n        }, errorHandler);\n    };\n\n    FileSystemPersister.prototype.purge = function (contentType, success, error) {\n        var self = this;\n        var errorHandler = this._fileSystemErrorHandler(error);\n        this.getFileHandle(contentType, function (fileEntry) {\n            self.fileStore.removeFile(fileEntry).then(function () {\n                success();\n            }).catch(error);\n        }, errorHandler);\n    };\n\n    FileSystemPersister.prototype.purgeAll = function (success, error) {\n        var errorHandler = this._fileSystemErrorHandler(error);\n        this.fileStore.removeFilesDirectory()\n            .then(function () {\n                success();\n            })\n            .catch(errorHandler);\n    };\n\n    FileSystemPersister.prototype._getContentTypes = function (success, error) {\n        this.getData(this.contentTypesStoreKey, function (savedContentTypesRaw) {\n            var savedContentTypes = JSON.parse(savedContentTypesRaw || '[]');\n            success(savedContentTypes);\n        }, error);\n    };\n\n    FileSystemPersister.prototype._saveContentTypes = function (contentType, success, error) {\n        var self = this;\n        this._getContentTypes(function (savedContentTypes) {\n            if (!_.contains(savedContentTypes, contentType)) {\n                savedContentTypes.push(contentType);\n            }\n\n            self.getFileHandle(self.contentTypesStoreKey, function (contentTypesFile) {\n                self._writeFileContent(contentTypesFile, JSON.stringify(savedContentTypes), success, error);\n            }, error);\n        });\n    };\n\n    FileSystemPersister.prototype.getFileHandle = function (contentType, success, error) {\n        var self = this;\n        var path = self._getFilePath(contentType);\n        this.fileStore.getFilesDirectory()\n            .then(function () {\n                return self.fileStore.getFile(path);\n            })\n            .then(function (fileHandle) {\n                success(fileHandle);\n            })\n            .catch(error);\n    };\n\n    FileSystemPersister.prototype._readFileContent = function (fileEntry, success, error) {\n        this.fileStore.readFileAsText(fileEntry).then(function (content) {\n            success(content);\n        }).catch(error);\n    };\n\n    FileSystemPersister.prototype._writeFileContent = function (fileEntry, content, success, error) {\n        this.fileStore.writeTextToFile(fileEntry, content)\n            .then(success)\n            .catch(error);\n    };\n\n    FileSystemPersister.prototype._getFilePath = function (contentType) {\n        return this._getKey(contentType);\n        //return utils.joinPath(this.fileStore.filesDirectoryPath, this._getKey(contentType));\n    };\n\n    FileSystemPersister.prototype._fileSystemErrorHandler = function (callback) {\n        return this.fileStore.getErrorHandler(callback);\n    };\n\n    return FileSystemPersister;\n}());\n\nmodule.exports = FileSystemPersister;",
    "'use strict';\n\nvar common = require('../../common');\nvar _ = common._;\nvar rsvp = common.rsvp;\nvar util = require('util');\nvar LocalStore = require('../../storages/LocalStore');\nvar BasePersister = require('./BasePersister');\n\nvar LocalStoragePersister = (function () {\n\n    /**\n     * @class LocalStoragePersister\n     * @extends BasePersister\n     */\n    function LocalStoragePersister(key, options) {\n        BasePersister.apply(this, arguments);\n        this._localStore = new LocalStore(options);\n    }\n\n    util.inherits(LocalStoragePersister, BasePersister);\n\n    LocalStoragePersister.prototype.getData = function (contentType, success, error) {\n        try {\n            var key = this._getKey(contentType);\n            var storedItem = this._getItem(key);\n            success(storedItem);\n        } catch (e) {\n            error(e);\n        }\n    };\n\n    LocalStoragePersister.prototype.saveData = function (contentType, data, success, error) {\n        try {\n            var contentTypeKey = this._getKey(contentType);\n            this._setItem(contentTypeKey, data);\n            success();\n        } catch (e) {\n            error(e);\n        }\n    };\n\n    LocalStoragePersister.prototype.purge = function (contentType, success, error) {\n        var self = this;\n\n        try {\n            var key = this._getKey(contentType);\n            this._removeItem(key);\n            this._getContentTypes(function (contentTypes) {\n                contentTypes = _.without(contentTypes, contentType);\n                self._setContentTypesCollection(contentTypes);\n                success();\n            }, error);\n        } catch (e) {\n            error(e);\n        }\n    };\n\n    LocalStoragePersister.prototype.purgeAll = function (success, error) {\n        try {\n            var self = this;\n\n            this._getContentTypes(function (contentTypes) {\n                _.each(contentTypes, function (contentType) {\n                    var contentTypeKey = self._getKey(contentType);\n                    self._removeItem(contentTypeKey);\n                });\n\n                self._removeItem(self.contentTypesStoreKey);\n                success();\n            }, error);\n        } catch (e) {\n            error(e);\n        }\n    };\n\n    LocalStoragePersister.prototype._getItem = function (key) {\n        return this._localStore.getItem(key);\n    };\n\n    LocalStoragePersister.prototype._setItem = function (key, value) {\n        return this._localStore.setItem(key, value);\n    };\n\n    LocalStoragePersister.prototype._removeItem = function (key) {\n        return this._localStore.removeItem(key);\n    };\n\n    LocalStoragePersister.prototype._getKey = function (contentType) {\n        this._addTypeToCollectionsCache(contentType);\n        return LocalStoragePersister.super_.prototype._getKey.apply(this, arguments);\n    };\n\n    LocalStoragePersister.prototype._getContentTypes = function (success, error) {\n        try {\n            var localStorageString = this._getItem(this.contentTypesStoreKey);\n\n            var data = [];\n            if (localStorageString) {\n                data = JSON.parse(localStorageString);\n            }\n\n            success(data);\n        } catch (e) {\n            error(e);\n        }\n    };\n\n    LocalStoragePersister.prototype._setContentTypesCollection = function (collection) {\n        this._setItem(this.contentTypesStoreKey, JSON.stringify(collection));\n    };\n\n    LocalStoragePersister.prototype._addTypeToCollectionsCache = function (typeName) {\n        var self = this;\n        this._getContentTypes(function (contentTypes) {\n            if (!_.contains(contentTypes, typeName)) {\n                contentTypes.push(typeName);\n                self._setContentTypesCollection(contentTypes);\n            }\n        });\n    };\n\n    return LocalStoragePersister;\n}());\n\nmodule.exports = LocalStoragePersister;",
    "var buildPromise = require('../utils').buildPromise;\nvar EverliveError = require('../EverliveError').EverliveError;\nvar Platform = require('../constants').Platform;\nvar common = require('../common');\nvar jstz = common.jstz;\nvar _ = common._;\n\nmodule.exports = (function () {\n    /**\n     * @class CurrentDevice\n     * @deprecated\n     * @protected\n     * @param pushHandler\n     * @constructor\n     */\n    var CurrentDevice = function (pushHandler) {\n\n        if (!window.cordova) {\n                throw new EverliveError('Error: currentDevice() can only be called from within a hybrid mobile app, after \\'deviceready\\' event has been fired.');\n        }\n\n        this._pushHandler = pushHandler;\n        this._initSuccessCallback = null;\n        this._initErrorCallback = null;\n\n        //Suffix for the global callback functions\n        this._globalFunctionSuffix = null;\n\n        this.pushSettings = null;\n        this.pushToken = null;\n        this.isInitialized = false;\n        this.isInitializing = false;\n\n        this.emulatorMode = false;\n    };\n\n    CurrentDevice.ensurePushIsAvailable = function() {\n        var isPushNotificationPluginAvailable = (typeof window !== 'undefined' && window.plugins && window.plugins.pushNotification);\n\n        if (!isPushNotificationPluginAvailable) {\n            throw new EverliveError(\"The push notification plugin is not available. Ensure that the pushNotification plugin is included \" +\n            \"and use after `deviceready` event has been fired.\");\n        }\n\n    };\n\n    CurrentDevice.prototype = {\n\n        /**\n         * Initializes the current device for push notifications. This method requests a push token from the device vendor and enables the push notification functionality on the device. Once this is done, you can register the device in {{site.TelerikBackendServices}} using the register() method.\n         * @method enableNotifications\n         * @name enableNotifications\n         * @memberOf CurrentDevice.prototype\n         * @param {PushSettings} pushSettings An object specifying various settings for the initialization.\n         * @returns {Object} The promise for the request.\n         */\n        /**\n         * Initializes the current device for push notifications. This method requests a push token from the device vendor and enables the push notification functionality on the device. Once this is done, you can register the device in Everlive using the register() method.\n         * @method enableNotifications\n         * @name enableNotifications\n         * @memberOf CurrentDevice.prototype\n         * @param {PushSettings} pushSettings An object specifying various settings for the initialization.\n         * @param {Function} [success] Callback to invoke on success.\n         * @param {Function} [error] Callback to invoke on error.\n         */\n        enableNotifications: function (pushSettings, success, error) {\n            this.pushSettings = this._cleanPlatformsPushSettings(pushSettings);\n\n            return buildPromise(_.bind(this._initialize, this), success, error);\n        },\n\n        /**\n         * Disables push notifications for the current device. This method invalidates any push tokens that were obtained for the device from the current application.\n         * @method disableNotifications\n         * @name disableNotifications\n         * @memberOf CurrentDevice.prototype\n         * @returns {Object} The promise for the request.\n         */\n        /**\n         * Disables push notifications for the current device. This method invalidates any push tokens that were obtained for the device from the current application.\n         * @method disableNotifications\n         * @name disableNotifications\n         * @memberOf CurrentDevice.prototype\n         * @param {Function} [success] Callback to invoke on success.\n         * @param {Function} [error] Callback to invoke on error.\n         */\n        disableNotifications: function (success, error) {\n            var self = this;\n\n            return this.unregister().then(\n                function () {\n                    return buildPromise(\n                        function (success, error) {\n                            if (self.emulatorMode) {\n                                success();\n                            } else {\n                                var pushNotification = window.plugins.pushNotification;\n                                var unregisterOptions;\n                                var platformType = self._getPlatformType();\n                                if (platformType === Platform.WindowsPhone) {\n                                    unregisterOptions = {'channelName': self.pushSettings.wp8.channelName};\n                                }\n                                pushNotification.unregister(\n                                    function () {\n                                        self.isInitialized = false;\n                                        success();\n                                    },\n                                    error,\n                                    unregisterOptions\n                                );\n                            }\n                        },\n                        success,\n                        error\n                    );\n                },\n                error\n            );\n        },\n\n        /**\n         * Returns the push registration for the current device.\n         * @memberOf CurrentDevice.prototype\n         * @method getRegistration\n         * @name getRegistration\n         * @returns {Object} The promise for the request.\n         */\n        /**\n         * Returns the push registration for the current device.\n         * @memberOf CurrentDevice.prototype\n         * @method getRegistration\n         * @name getRegistration\n         * @param {Function} success Callback to invoke on success.\n         * @param {Function} error Callback to invoke on error.\n         */\n        getRegistration: function (success, error) {\n            var deviceId = encodeURIComponent(this._getDeviceId());\n            return this._pushHandler.devices.getById('HardwareId/' + deviceId, success, error);\n        },\n\n        /**\n         * Registers the current device for push notifications in {{site.TelerikBackendServices}}. This method can be called only after [enableNotifications()]{@link currentDevice.enableNotifications} has completed successfully.\n         * @memberOf CurrentDevice.prototype\n         * @method register\n         * @name register\n         * @param {Object} customParameters Custom parameters for the registration.\n         * @returns {Object} The promise for the request.\n         */\n        /**\n         * Registers the current device for push notifications in {{site.TelerikBackendServices}}. This method can be called only after [enableNotifications()]{@link currentDevice.enableNotifications} has completed successfully.\n         * @memberOf CurrentDevice.prototype\n         * @method register\n         * @name register\n         * @param {Object} customParameters Custom parameters for the registration.\n         * @param {Function} [success] Callback to invoke on success.\n         * @param {Function} [error] Callback to invoke on error.\n         */\n        register: function (customParameters, success, error) {\n            var self = this;\n\n            var deviceRegistration = {};\n            if (customParameters !== undefined) {\n                deviceRegistration.Parameters = customParameters;\n            }\n\n            return this._populateRegistrationObject(deviceRegistration).then(\n                function () {\n                    return self._pushHandler.devices.create(deviceRegistration, success, error);\n                },\n                error\n            );\n        },\n\n        /**\n         * Unregisters the current device from push notifications in {{site.TelerikBackendServices}}. After this call completes successfully, {{site.bs}} will no longer send notifications to this device. Note that this does not prevent the device from receiving notifications and does not invalidate push tokens.\n         * @memberOf CurrentDevice.prototype\n         * @method unregister\n         * @name unregister\n         * @returns {Object} The promise for the request.\n         */\n        /**\n         * Unregisters the current device from push notifications in {{site.TelerikBackendServices}}. After this call completes successfully, {{site.bs}} will no longer send notifications to this device. Note that this does not prevent the device from receiving notifications and does not invalidate push tokens.\n         * @memberOf CurrentDevice.prototype\n         * @method unregister\n         * @name unregister\n         * @param {Function} [success] Callback to invoke on success.\n         * @param {Function} [error] Callback to invoke on error.\n         */\n        unregister: function (success, error) {\n            var deviceId = encodeURIComponent(device.uuid);\n            return this._pushHandler.devices.destroySingle({Id: 'HardwareId/' + deviceId}, success, error);\n        },\n\n        /**\n         * Updates the registration of the current device.\n         * @memberOf CurrentDevice.prototype\n         * @method updateRegistration\n         * @name updateRegistration\n         * @param {Object} customParameters Custom parameters for the registration. If undefined, customParameters are not updated.\n         * @returns {Object} The promise for the request.\n         */\n        /**\n         * Updates the registration for the current device.\n         * @memberOf CurrentDevice.prototype\n         * @method updateRegistration\n         * @name updateRegistration\n         * @param {Object} customParameters Custom parameters for the registration. If undefined, customParameters are not updated.\n         * @param {Function} [success] Callback to invoke on success.\n         * @param {Function} [error] Callback to invoke on error.\n         */\n        updateRegistration: function (customParameters, success, error) {\n            var self = this;\n\n            var deviceRegistration = {};\n            if (customParameters !== undefined) {\n                deviceRegistration.Parameters = customParameters;\n            }\n\n            return this._populateRegistrationObject(deviceRegistration).then(\n                function () {\n                    deviceRegistration.Id = 'HardwareId/' + encodeURIComponent(deviceRegistration.HardwareId);\n                    return self._pushHandler.devices.updateSingle(deviceRegistration, success, error);\n                },\n                error\n            );\n        },\n\n        /**\n         * This method provides a different operation on each supported platform:\n         *\n         * - On iOS: Checks if Notifications is enabled for this application in the device's Notification Center.\n         * - On Windows Phone: Checks if the application has an active open channel for communication with the Microsoft Push Notification Service. The outcome does not depend on the device's notification settings.\n         * - On Android: Checks if the application has established a connection with Google Cloud Messaging. The outcome does not depend on the device's notification settings.\n         * @method areNotificationsEnabled\n         * @name areNotificationsEnabled\n         * @memberOf Push.prototype\n         * @param {Object} options An object passed to the Push Notification plugin's areNotificationsEnabled method\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * iOS: Checks if the Notifications are enabled for this Application in the Device's Notification Center.\n         * Windows Phone: Checks if the Application has an active opened Channel for communication with the Notification Service. Not relying on the device notification settings.\n         * Android: Checks if the Application has established connection with the Notification Service. Not relying on the device notification settings.\n         * @method areNotificationsEnabled\n         * @name areNotificationsEnabled\n         * @memberOf Push.prototype\n         * @param {Object} options an object passed to the Push Notification plugin's areNotificationsEnabled method.\n         * @param {Function} [onSuccess] Callback to invoke on successful check. Passes a single boolean value: true or false.\n         * @param {Function} [onError] Callback to invoke when an error in the push plugin has occurred.\n         */\n        areNotificationsEnabled: function (options, onSuccess, onError) {\n            options = options || {};\n            var pushNotification = window.plugins.pushNotification;\n\n            return buildPromise(function (successCb, errorCb) {\n                pushNotification.areNotificationsEnabled(successCb, errorCb, options);\n            }, onSuccess, onError);\n        },\n\n        _initializeInteractivePush: function (iOSSettings, success, error) {\n            var pushPlugin = window.plugins.pushNotification;\n\n            var interactiveSettings = iOSSettings.interactiveSettings;\n            var notificationTypes = [];\n            if (iOSSettings.alert) {\n                notificationTypes.push(pushPlugin.UserNotificationTypes.Alert);\n            }\n            if (iOSSettings.badge) {\n                notificationTypes.push(pushPlugin.UserNotificationTypes.Badge);\n            }\n            if (iOSSettings.sound) {\n                notificationTypes.push(pushPlugin.UserNotificationTypes.Sound);\n            }\n\n            var getAction = function (actionIdentifier) {\n                var action = _.find(interactiveSettings.actions, function (action) {\n                    return action.identifier === actionIdentifier;\n                });\n\n                return action;\n            };\n            var categories = _.map(interactiveSettings.categories, function (category) {\n                return {\n                    identifier: category.identifier,\n                    actionsForDefaultContext: _.map(category.actionsForDefaultContext, getAction),\n                    actionsForMinimalContext: _.map(category.actionsForMinimalContext, getAction)\n                }\n            });\n\n            pushPlugin.registerUserNotificationSettings(\n                // the success callback which will immediately return (APNs is not contacted for this)\n                success,\n                // called in case the configuration is incorrect\n                error, {\n                    // asking permission for these features\n                    types: notificationTypes,\n                    // register these categories\n                    categories: categories\n                }\n            );\n        },\n\n        //Initializes the push functionality on the device.\n        _initialize: function (success, error) {\n            var self = this;\n\n            if (this.isInitializing) {\n                error(new EverliveError('Push notifications are currently initializing.'));\n                return;\n            }\n\n            if (!this.emulatorMode && (!window.navigator || !window.navigator.globalization)) {\n                error(new EverliveError('The globalization plugin is not initialized.'));\n                return;\n            }\n\n            if (!this.emulatorMode && (!window.plugins || !window.plugins.pushNotification)) {\n                error(new EverliveError('The push notifications plugin is not initialized.'));\n                return;\n            }\n\n            this._initSuccessCallback = success;\n            this._initErrorCallback = error;\n\n            if (this.isInitialized) {\n                this._deviceRegistrationSuccess(this.pushToken);\n                return;\n            }\n\n            if (this.emulatorMode) {\n                setTimeout(\n                    function () {\n                        self._deviceRegistrationSuccess('fake_push_token');\n                    },\n                    1000\n                );\n                return;\n            }\n\n            this.isInitializing = true;\n\n            var suffix = this._globalFunctionSuffix;\n            if (!suffix) {\n                suffix = Date.now().toString();\n                this._globalFunctionSuffix = suffix;\n            }\n\n            var pushNotification = window.plugins.pushNotification;\n\n            var platformType = this._getPlatformType();\n            if (platformType === Platform.iOS) {\n                //Initialize global APN callback\n                var apnCallbackName = 'apnCallback_' + suffix;\n                Everlive.PushCallbacks[apnCallbackName] = _.bind(this._onNotificationAPN, this);\n\n                //Construct registration options object and validate iOS settings\n                var apnRegistrationOptions = this.pushSettings.iOS;\n                apnRegistrationOptions.ecb = 'Everlive.PushCallbacks.' + apnCallbackName;\n\n                //Register for APN\n                pushNotification.register(\n                    _.bind(this._successfulRegistrationAPN, this),\n                    _.bind(this._failedRegistrationAPN, this),\n                    apnRegistrationOptions\n                );\n            } else if (platformType === Platform.Android) {\n                //Initialize global GCM callback\n                var gcmCallbackName = 'gcmCallback_' + suffix;\n                Everlive.PushCallbacks[gcmCallbackName] = _.bind(this._onNotificationGCM, this);\n\n                //Construct registration options object and validate the Android settings\n                var gcmRegistrationOptions = this.pushSettings.android;\n                this._validateAndroidSettings(gcmRegistrationOptions);\n                gcmRegistrationOptions.ecb = 'Everlive.PushCallbacks.' + gcmCallbackName;\n\n                //Register for GCM\n                pushNotification.register(\n                    _.bind(this._successSentRegistrationGCM, this),\n                    _.bind(this._errorSentRegistrationGCM, this),\n                    gcmRegistrationOptions\n                );\n            } else if (platformType === Platform.WindowsPhone) {\n                //Initialize global WP8 callbacks.\n                var wp8CallbackName = 'wp8Callback_' + suffix;\n                var wp8RegistrationSuccessCallbackName = 'wp8RegistrationSuccessCallback_' + suffix;\n                var wp8RegistrationErrorCallbackName = 'wp8RegistrationErrorCallback_' + suffix;\n\n                Everlive.PushCallbacks[wp8CallbackName] = _.bind(this._onNotificationWP8, this);\n                Everlive.PushCallbacks[wp8RegistrationSuccessCallbackName] = _.bind(this._deviceRegistrationSuccessWP, this);\n                Everlive.PushCallbacks[wp8RegistrationErrorCallbackName] = _.bind(this._deviceRegistrationFailed, this);\n\n                //Construct registration options object and validate the WP8  settings\n                var wp8RegistrationOptions = this.pushSettings.wp8;\n                this._validateWP8Settings(wp8RegistrationOptions);\n                wp8RegistrationOptions.ecb = 'Everlive.PushCallbacks.' + wp8CallbackName;\n                wp8RegistrationOptions.uccb = 'Everlive.PushCallbacks.' + wp8RegistrationSuccessCallbackName;\n                wp8RegistrationOptions.errcb = 'Everlive.PushCallbacks.' + wp8RegistrationErrorCallbackName;\n\n\n                pushNotification.register(\n                    _.bind(this._successSentRegistrationWP8, this),\n                    _.bind(this._errorSentRegistrationWP8, this),\n                    wp8RegistrationOptions\n                );\n\n            } else {\n                throw new EverliveError('The current platform is not supported: ' + device.platform);\n            }\n        },\n\n        _deviceRegistrationSuccessWP: function (result) {\n            this._deviceRegistrationSuccess(result.uri);\n        },\n\n        _validateAndroidSettings: function (androidSettings) {\n            if (!androidSettings.senderID) {\n                throw new EverliveError('Sender ID (project number) is not set in the android settings.');\n            }\n        },\n\n        _validateWP8Settings: function (settings) {\n            if (!settings.channelName) {\n                throw new EverliveError('channelName is not set in the WP8 settings.');\n            }\n        },\n\n        _cleanPlatformsPushSettings: function (pushSettings) {\n            var cleanSettings = {};\n            pushSettings = pushSettings || {};\n\n            var addSettingsForPlatform = function addSettingsForPlatform(newSettingsObject, platform, allowedFields) {\n                if (!pushSettings[platform]) {\n                    return;\n                }\n\n                newSettingsObject[platform] = newSettingsObject[platform] || {};\n                var newPlatformSettings = pushSettings[platform];\n                var settings = newSettingsObject[platform];\n                _.each(allowedFields, function (allowedField) {\n                    if (newPlatformSettings.hasOwnProperty(allowedField)) {\n                        settings[allowedField] = newPlatformSettings[allowedField];\n                    }\n                });\n            };\n\n            addSettingsForPlatform(cleanSettings, 'iOS', ['badge', 'sound', 'alert', 'interactiveSettings']);\n            addSettingsForPlatform(cleanSettings, 'android', ['senderID', 'projectNumber']);\n            addSettingsForPlatform(cleanSettings, 'wp8', ['channelName']);\n\n            var callbackFields = ['notificationCallbackAndroid', 'notificationCallbackIOS', 'notificationCallbackWP8'];\n            _.each(callbackFields, function (callbackField) {\n                var callback = pushSettings[callbackField];\n                if (callback) {\n                    if (typeof callback !== 'function') {\n                        throw new EverliveError('The \"' + callbackField + '\" of the push settings should be a function');\n                    }\n\n                    cleanSettings[callbackField] = pushSettings[callbackField];\n                }\n            });\n\n            if (pushSettings.customParameters) {\n                cleanSettings.customParameters = pushSettings.customParameters;\n            }\n\n            return cleanSettings;\n        },\n\n        _populateRegistrationObject: function (deviceRegistration, success, error) {\n            var self = this;\n\n            return buildPromise(\n                function (success, error) {\n                    if (!self.pushToken) {\n                        throw new EverliveError('Push token is not available.');\n                    }\n\n                    self._getLocaleName(\n                        function (locale) {\n                            var deviceId = self._getDeviceId();\n                            var hardwareModel = device.model;\n                            var platformType = self._getPlatformType();\n                            var timeZone = jstz.determine().name();\n                            var pushToken = self.pushToken;\n                            var language = locale.value;\n                            var platformVersion = device.version;\n\n                            deviceRegistration.HardwareId = deviceId;\n                            deviceRegistration.HardwareModel = hardwareModel;\n                            deviceRegistration.PlatformType = platformType;\n                            deviceRegistration.PlatformVersion = platformVersion;\n                            deviceRegistration.TimeZone = timeZone;\n                            deviceRegistration.PushToken = pushToken;\n                            deviceRegistration.Locale = language;\n\n                            success();\n                        },\n                        error\n                    );\n                },\n                success,\n                error\n            );\n        },\n\n        _getLocaleName: function (success, error) {\n            if (this.emulatorMode) {\n                success({value: 'en_US'});\n            } else {\n                navigator.globalization.getLocaleName(\n                    function (locale) {\n                        success(locale);\n                    },\n                    error\n                );\n                navigator.globalization.getLocaleName(\n                    function (locale) {\n                    },\n                    error\n                );\n            }\n        },\n\n        _getDeviceId: function () {\n            return device.uuid;\n        },\n\n        //Returns the Everlive device platform constant given a value aquired from cordova's device.platform.\n        _getPlatformType: function () {\n            var psLower = device.platform.toLowerCase();\n            switch (psLower) {\n                case 'ios':\n                case 'iphone':\n                case 'ipad':\n                    return Platform.iOS;\n                case 'android':\n                    return Platform.Android;\n                case 'wince':\n                    return Platform.WindowsPhone;\n                case 'win32nt': // real wp8 devices return this string as platform identifier.\n                    return Platform.WindowsPhone;\n                default:\n                    return Platform.Unknown;\n            }\n        },\n\n        _deviceRegistrationFailed: function (error) {\n            this.pushToken = null;\n            this.isInitializing = false;\n            this.isInitialized = false;\n\n            if (this._initErrorCallback) {\n                this._initErrorCallback({error: error});\n            }\n        },\n\n        _deviceRegistrationSuccess: function (token) {\n            this.pushToken = token;\n            this.isInitializing = false;\n            this.isInitialized = true;\n\n            if (this._initSuccessCallback) {\n                this._initSuccessCallback({token: token});\n            }\n        },\n\n        //Occurs when the device registration in APN succeeds\n        _successfulRegistrationAPN: function (token) {\n            var self = this;\n            if (this.pushSettings.iOS && this.pushSettings.iOS.interactiveSettings) {\n                this._initializeInteractivePush(\n                    this.pushSettings.iOS,\n                    function () {\n                        self._deviceRegistrationSuccess(token);\n                    },\n                    function (err) {\n                        throw new EverliveError('The interactive push configuration is incorrect: ' + err);\n                    }\n                );\n            } else {\n                this._deviceRegistrationSuccess(token);\n            }\n        },\n\n        //Occurs if the device registration in APN fails\n        _failedRegistrationAPN: function (error) {\n            this._deviceRegistrationFailed(error);\n        },\n\n        //Occurs when device registration has been successfully sent to GCM\n        _successSentRegistrationGCM: function (id) {\n            //console.log(\"Successfully sent request for registering with GCM.\");\n        },\n        //Occurs when device registration has been successfully sent for WP8\n        _successSentRegistrationWP8: function (id) {\n            //console.log(\"Successfully sent request for registering WP8 .\");\n        },\n        //Occurs when an error occured when sending registration request for WP8\n        _errorSentRegistrationWP8: function (error) {\n            this._deviceRegistrationFailed(error);\n        },\n\n        //Occurs when an error occured when sending registration request to GCM\n        _errorSentRegistrationGCM: function (error) {\n            this._deviceRegistrationFailed(error);\n        },\n\n        //This function receives all notification events from APN\n        _onNotificationAPN: function (e) {\n            this._raiseNotificationEventIOS(e);\n        },\n        //This function receives all notification events for WP8\n        _onNotificationWP8: function (e) {\n            this._raiseNotificationEventWP8(e);\n        },\n\n        //This function receives all notification events from GCM\n        _onNotificationGCM: function onNotificationGCM(e) {\n            switch (e.event) {\n                case 'registered':\n                    if (e.regid.length > 0) {\n                        this._deviceRegistrationSuccess(e.regid);\n                    }\n                    break;\n                case 'message':\n                    this._raiseNotificationEventAndroid(e);\n                    break;\n                case 'error':\n                    if (!this.pushToken) {\n                        this._deviceRegistrationFailed(e);\n                    } else {\n                        this._raiseNotificationEventAndroid(e);\n                    }\n                    break;\n                default:\n                    this._raiseNotificationEventAndroid(e);\n                    break;\n            }\n        },\n\n        _raiseNotificationEventAndroid: function (e) {\n            if (this.pushSettings.notificationCallbackAndroid) {\n                this.pushSettings.notificationCallbackAndroid(e);\n            }\n        },\n        _raiseNotificationEventIOS: function (e) {\n            if (this.pushSettings.notificationCallbackIOS) {\n                this.pushSettings.notificationCallbackIOS(e);\n            }\n        },\n        _raiseNotificationEventWP8: function (e) {\n            if (this.pushSettings.notificationCallbackWP8) {\n                this.pushSettings.notificationCallbackWP8(e);\n            }\n        }\n    };\n\n    return CurrentDevice;\n}());\n",
    "var platform = require('../everlive.platform');\nvar _ = require('../common')._;\n\n'use strict';\n\nif (platform.isNativeScript) {\n\tvar NativeScriptCurrentDevice = require('./NativeScriptCurrentDevice');\n    module.exports = NativeScriptCurrentDevice;\n} else if (platform.isCordova || platform.isDesktop) {\n\tvar CordovaCurrentDevice = require('./CordovaCurrentDevice');\n    module.exports = CordovaCurrentDevice;\n} else {\n    module.exports = _.noop;\n}",
    "var buildPromise = require('../utils').buildPromise;\nvar EverliveError = require('../EverliveError').EverliveError;\nvar Platform = require('../constants').Platform;\nvar common = require('../common');\nvar utils = require('../utils');\nvar jstz = common.jstz;\nvar _ = common._;\nvar tnsPushPluginLazy = utils.lazyRequire('nativescript-push-notifications', 'tnsPushPlugin');\nvar tnsPlatform = require('platform');\n\nmodule.exports = (function () {\n    /**\n     * @class CurrentDevice\n     * @deprecated\n     * @protected\n     * @param pushHandler\n     * @constructor\n     */\n    var CurrentDevice = function (pushHandler) {\n        this._pushHandler = pushHandler;\n        this._initSuccessCallback = null;\n        this._initErrorCallback = null;\n\n        //Suffix for the global callback functions\n        this._globalFunctionSuffix = null;\n\n        this.pushSettings = null;\n        this.pushToken = null;\n        this.isInitialized = false;\n        this.isInitializing = false;\n\n        this.emulatorMode = false;\n    };\n\n    CurrentDevice.ensurePushIsAvailable = function() {\n        // NativeScript will throw an error when the TNS Push Plugin cannot be required. So this is actually unreachable.\n    };\n\n    CurrentDevice.prototype = {\n\n        /**\n         * Initializes the current device for push notifications. This method requests a push token from the device vendor and enables the push notification functionality on the device. Once this is done, you can register the device in {{site.TelerikBackendServices}} using the register() method.\n         * @method enableNotifications\n         * @name enableNotifications\n         * @memberOf CurrentDevice.prototype\n         * @param {PushSettings} pushSettings An object specifying various settings for the initialization.\n         * @returns {Object} The promise for the request.\n         */\n        /**\n         * Initializes the current device for push notifications. This method requests a push token from the device vendor and enables the push notification functionality on the device. Once this is done, you can register the device in Everlive using the register() method.\n         * @method enableNotifications\n         * @name enableNotifications\n         * @memberOf CurrentDevice.prototype\n         * @param {PushSettings} pushSettings An object specifying various settings for the initialization.\n         * @param {Function} [success] Callback to invoke on success.\n         * @param {Function} [error] Callback to invoke on error.\n         */\n        enableNotifications: function (pushSettings, success, error) {\n            this.pushSettings = this._cleanPlatformsPushSettings(pushSettings);\n\n            return buildPromise(_.bind(this._initialize, this), success, error);\n        },\n\n        /**\n         * Disables push notifications for the current device. This method invalidates any push tokens that were obtained for the device from the current application.\n         * @method disableNotifications\n         * @name disableNotifications\n         * @memberOf CurrentDevice.prototype\n         * @returns {Object} The promise for the request.\n         */\n        /**\n         * Disables push notifications for the current device. This method invalidates any push tokens that were obtained for the device from the current application.\n         * @method disableNotifications\n         * @name disableNotifications\n         * @memberOf CurrentDevice.prototype\n         * @param {Function} [success] Callback to invoke on success.\n         * @param {Function} [error] Callback to invoke on error.\n         */\n        disableNotifications: function (successCb, errorCb) {\n            var self = this;\n\n            return this.unregister().then(\n                function () {\n                    return buildPromise(\n                        function (success, error) {\n                            var successCallback = function successCallback() {\n                                    self.isInitialized = false;\n                                    success();\n                                };\n\n\n                            var platformType = self._getPlatformType();\n                            if(platformType === Platform.Android) {\n                                return tnsPushPluginLazy.tnsPushPlugin.unregister(successCallback, error, self.pushSettings.android);\n                            }\n\n                            tnsPushPluginLazy.tnsPushPlugin.unregister(successCallback, error);\n                        },\n                        successCb,\n                        errorCb\n                    );\n                },\n                errorCb\n            );\n        },\n\n        /**\n         * Returns the push registration for the current device.\n         * @memberOf CurrentDevice.prototype\n         * @method getRegistration\n         * @name getRegistration\n         * @returns {Object} The promise for the request.\n         */\n        /**\n         * Returns the push registration for the current device.\n         * @memberOf CurrentDevice.prototype\n         * @method getRegistration\n         * @name getRegistration\n         * @param {Function} success Callback to invoke on success.\n         * @param {Function} error Callback to invoke on error.\n         */\n        getRegistration: function (success, error) {\n            var deviceId = encodeURIComponent(this._getDeviceId());\n            return this._pushHandler.devices.getById('HardwareId/' + deviceId, success, error);\n        },\n\n        /**\n         * Registers the current device for push notifications in {{site.TelerikBackendServices}}. This method can be called only after [enableNotifications()]{@link currentDevice.enableNotifications} has completed successfully.\n         * @memberOf CurrentDevice.prototype\n         * @method register\n         * @name register\n         * @param {Object} customParameters Custom parameters for the registration.\n         * @returns {Object} The promise for the request.\n         */\n        /**\n         * Registers the current device for push notifications in {{site.TelerikBackendServices}}. This method can be called only after [enableNotifications()]{@link currentDevice.enableNotifications} has completed successfully.\n         * @memberOf CurrentDevice.prototype\n         * @method register\n         * @name register\n         * @param {Object} customParameters Custom parameters for the registration.\n         * @param {Function} [success] Callback to invoke on success.\n         * @param {Function} [error] Callback to invoke on error.\n         */\n        register: function (customParameters, success, error) {\n            var self = this;\n\n            var deviceRegistration = {};\n            if (customParameters !== undefined) {\n                deviceRegistration.Parameters = customParameters;\n            }\n\n            return this._populateRegistrationObject(deviceRegistration).then(\n                function () {\n                    return self._pushHandler.devices.create(deviceRegistration, success, error);\n                },\n                error\n            );\n        },\n\n        /**\n         * Unregisters the current device from push notifications in {{site.TelerikBackendServices}}. After this call completes successfully, {{site.bs}} will no longer send notifications to this device. Note that this does not prevent the device from receiving notifications and does not invalidate push tokens.\n         * @memberOf CurrentDevice.prototype\n         * @method unregister\n         * @name unregister\n         * @returns {Object} The promise for the request.\n         */\n        /**\n         * Unregisters the current device from push notifications in {{site.TelerikBackendServices}}. After this call completes successfully, {{site.bs}} will no longer send notifications to this device. Note that this does not prevent the device from receiving notifications and does not invalidate push tokens.\n         * @memberOf CurrentDevice.prototype\n         * @method unregister\n         * @name unregister\n         * @param {Function} [success] Callback to invoke on success.\n         * @param {Function} [error] Callback to invoke on error.\n         */\n        unregister: function (success, error) {\n            var deviceId = encodeURIComponent(this._getDeviceId());\n            return this._pushHandler.devices.destroySingle({Id: 'HardwareId/' + deviceId}, success, error);\n        },\n\n        /**\n         * Updates the registration of the current device.\n         * @memberOf CurrentDevice.prototype\n         * @method updateRegistration\n         * @name updateRegistration\n         * @param {Object} customParameters Custom parameters for the registration. If undefined, customParameters are not updated.\n         * @returns {Object} The promise for the request.\n         */\n        /**\n         * Updates the registration for the current device.\n         * @memberOf CurrentDevice.prototype\n         * @method updateRegistration\n         * @name updateRegistration\n         * @param {Object} customParameters Custom parameters for the registration. If undefined, customParameters are not updated.\n         * @param {Function} [success] Callback to invoke on success.\n         * @param {Function} [error] Callback to invoke on error.\n         */\n        updateRegistration: function (customParameters, success, error) {\n            var self = this;\n\n            var deviceRegistration = {};\n            if (customParameters !== undefined) {\n                deviceRegistration.Parameters = customParameters;\n            }\n\n            return this._populateRegistrationObject(deviceRegistration).then(\n                function () {\n                    deviceRegistration.Id = 'HardwareId/' + encodeURIComponent(deviceRegistration.HardwareId);\n                    return self._pushHandler.devices.updateSingle(deviceRegistration, success, error);\n                },\n                error\n            );\n        },\n\n        /**\n         * This method provides a different operation on each supported platform:\n         *\n         * - On iOS: Checks if Notifications is enabled for this application in the device's Notification Center.\n         * - On Windows Phone: Checks if the application has an active open channel for communication with the Microsoft Push Notification Service. The outcome does not depend on the device's notification settings.\n         * - On Android: Checks if the application has established a connection with Google Cloud Messaging. The outcome does not depend on the device's notification settings.\n         * @method areNotificationsEnabled\n         * @name areNotificationsEnabled\n         * @memberOf Push.prototype\n         * @param {Object} options An object passed to the Push Notification plugin's areNotificationsEnabled method\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * iOS: Checks if the Notifications are enabled for this Application in the Device's Notification Center.\n         * Windows Phone: Checks if the Application has an active opened Channel for communication with the Notification Service. Not relying on the device notification settings.\n         * Android: Checks if the Application has established connection with the Notification Service. Not relying on the device notification settings.\n         * @method areNotificationsEnabled\n         * @name areNotificationsEnabled\n         * @memberOf Push.prototype\n         * @param {Object} options an object passed to the Push Notification plugin's areNotificationsEnabled method.\n         * @param {Function} [onSuccess] Callback to invoke on successful check. Passes a single boolean value: true or false.\n         * @param {Function} [onError] Callback to invoke when an error in the push plugin has occurred.\n         */\n        areNotificationsEnabled: function (options, onSuccess, onError) {\n            options = options || {};\n            \n            return buildPromise(function (successCb, errorCb) {\n                tnsPushPluginLazy.tnsPushPlugin.areNotificationsEnabled(successCb, errorCb, options);\n            }, onSuccess, onError);\n        },\n\n        _initializeInteractivePush: function (iOSSettings, success, error) {\n            tnsPushPluginLazy.tnsPushPlugin.registerUserNotificationSettings(\n                // the success callback which will immediately return (APNs is not contacted for this)\n                success,\n                // called in case the configuration is incorrect\n                error\n            );\n        },\n\n        //Initializes the push functionality on the device.\n        _initialize: function (success, error) {\n            if (this.isInitializing) {\n                error(new EverliveError('Push notifications are currently initializing.'));\n                return;\n            }\n\n            this._initSuccessCallback = success;\n            this._initErrorCallback = error;\n\n            if (this.isInitialized) {\n                this._deviceRegistrationSuccess(this.pushToken);\n                return;\n            }\n\n            this.isInitializing = true;\n\n            var suffix = this._globalFunctionSuffix;\n            if (!suffix) {\n                suffix = Date.now().toString();\n                this._globalFunctionSuffix = suffix;\n            }\n\n            var platformType = this._getPlatformType();\n            if (platformType === Platform.iOS) {\n                //Construct registration options object and validate iOS settings\n                var apnRegistrationOptions = this.pushSettings.iOS;\n\n                apnRegistrationOptions.notificationCallbackIOS = this.pushSettings.notificationCallbackIOS;\n                //Register for APN\n                tnsPushPluginLazy.tnsPushPlugin.register(\n                    apnRegistrationOptions,\n                    _.bind(this._successfulRegistrationAPN, this),\n                    _.bind(this._failedRegistrationAPN, this)                    \n                );\n            } else if (platformType === Platform.Android) {\n                // Ensure the required fields are present in the Android Settings\n                var gcmRegistrationOptions = this.pushSettings.android;\n                this._validateAndroidSettings(gcmRegistrationOptions);\n\n                gcmRegistrationOptions.notificationCallbackAndroid = this.pushSettings.notificationCallbackAndroid;\n\n                //Register for GCM\n                tnsPushPluginLazy.tnsPushPlugin.register(\n                    gcmRegistrationOptions,\n                    _.bind(this._successSentRegistrationGCM, this),\n                    _.bind(this._errorSentRegistrationGCM, this)\n                );\n            } else {\n                throw new EverliveError('The current platform is not supported: ' + tnsPlatform.device.os);\n            }\n        },\n\n        _validateAndroidSettings: function (androidSettings) {\n            if (!androidSettings.senderID) {\n                throw new EverliveError('Sender ID (project number) is not set in the android settings.');\n            }\n        },\n        _cleanPlatformsPushSettings: function (pushSettings) {\n            var cleanSettings = {};\n            pushSettings = pushSettings || {};\n\n            var addSettingsForPlatform = function addSettingsForPlatform(newSettingsObject, platform, allowedFields) {\n                if (!pushSettings[platform]) {\n                    return;\n                }\n\n                newSettingsObject[platform] = newSettingsObject[platform] || {};\n                var newPlatformSettings = pushSettings[platform];\n                var settings = newSettingsObject[platform];\n                _.each(allowedFields, function (allowedField) {\n                    if (newPlatformSettings.hasOwnProperty(allowedField)) {\n                        settings[allowedField] = newPlatformSettings[allowedField];\n                    }\n                });\n            };\n\n            addSettingsForPlatform(cleanSettings, 'iOS', ['badge', 'sound', 'alert', 'interactiveSettings']);\n            addSettingsForPlatform(cleanSettings, 'android', ['senderID', 'projectNumber']);\n\n            var callbackFields = ['notificationCallbackAndroid', 'notificationCallbackIOS'];\n            _.each(callbackFields, function (callbackField) {\n                var callback = pushSettings[callbackField];\n                if (callback) {\n                    if (typeof callback !== 'function') {\n                        throw new EverliveError('The \"' + callbackField + '\" of the push settings should be a function');\n                    }\n\n                    cleanSettings[callbackField] = pushSettings[callbackField];\n                }\n            });\n\n            if (pushSettings.customParameters) {\n                cleanSettings.customParameters = pushSettings.customParameters;\n            }\n\n            return cleanSettings;\n        },\n\n        _populateRegistrationObject: function (deviceRegistration, success, error) {\n            var self = this;\n\n            return buildPromise(\n                function (success, error) {\n                    if (!self.pushToken) {\n                        throw new EverliveError('Push token is not available.');\n                    }\n\n                    self._getLocaleName(\n                        function (locale) {\n                            var deviceId = self._getDeviceId();\n                            var hardwareModel = tnsPlatform.device.model;\n                            var platformType = self._getPlatformType();\n                            var timeZone = jstz.determine().name();\n                            var pushToken = self.pushToken;\n                            var language = 'en_US'; //TODO\n                            var platformVersion = tnsPlatform.device.osVersion;\n\n                            deviceRegistration.HardwareId = deviceId;\n                            deviceRegistration.HardwareModel = hardwareModel;\n                            deviceRegistration.PlatformType = platformType;\n                            deviceRegistration.PlatformVersion = platformVersion;\n                            deviceRegistration.TimeZone = timeZone;\n                            deviceRegistration.PushToken = pushToken;\n                            deviceRegistration.Locale = language;\n\n                            success();\n                        },\n                        error\n                    );\n                },\n                success,\n                error\n            );\n        },\n\n        _getLocaleName: function (success, error) {\n            return success(); // TODO            \n            /* TODO: Must translate somehow to NativeScript to get the current locale\n            if (this.emulatorMode) {\n                success({value: 'en_US'});\n            } else {\n                navigator.globalization.getLocaleName(\n                    function (locale) {\n                        success(locale);\n                    },\n                    error\n                );\n                navigator.globalization.getLocaleName(\n                    function (locale) {\n                    },\n                    error\n                );\n            }*/\n        },\n\n        _getDeviceId: function () {\n            return tnsPlatform.device.uuid;\n        },\n\n        //Returns the Everlive device platform constant given a value aquired from cordova's device.platform.\n        _getPlatformType: function () {\n            var psLower = tnsPlatform.device.os.toLowerCase();\n            switch (psLower) {\n                case 'ios':\n                case 'iphone':\n                case 'ipad':\n                    return Platform.iOS;\n                case 'android':\n                    return Platform.Android;\n                default:\n                    return Platform.Unknown;\n            }\n        },\n\n        _deviceRegistrationFailed: function (error) {\n            this.pushToken = null;\n            this.isInitializing = false;\n            this.isInitialized = false;\n\n            if (this._initErrorCallback) {\n                this._initErrorCallback({error: error});\n            }\n        },\n\n        _deviceRegistrationSuccess: function (token) {\n            this.pushToken = token;\n            this.isInitializing = false;\n            this.isInitialized = true;\n\n            if (this._initSuccessCallback) {\n                this._initSuccessCallback({token: token});\n            }\n        },\n\n        //Occurs when the device registration in APN succeeds\n        _successfulRegistrationAPN: function (token) {\n            var self = this;\n            if (this.pushSettings.iOS && this.pushSettings.iOS.interactiveSettings) {\n                this._initializeInteractivePush(\n                    this.pushSettings.iOS,\n                    function () {\n                        self._deviceRegistrationSuccess(token);\n                    },\n                    function (err) {\n                        throw new EverliveError('The interactive push configuration is incorrect: ' + err);\n                    }\n                );\n            } else {\n                this._deviceRegistrationSuccess(token);\n            }\n        },\n\n        //Occurs if the device registration in APN fails\n        _failedRegistrationAPN: function (error) {\n            this._deviceRegistrationFailed(error);\n        },\n\n        //Occurs when device registration has been successfully sent to GCM\n        _successSentRegistrationGCM: function (token) {\n            //console.log(\"Successfully sent request for registering with GCM.\");\n\n            // set on message received.\n            tnsPushPluginLazy.tnsPushPlugin.onMessageReceived(this.pushSettings.notificationCallbackAndroid);\n\n            this._deviceRegistrationSuccess(token);\n        },\n\n        //Occurs when an error occured when sending registration request to GCM\n        _errorSentRegistrationGCM: function (error) {\n            this._deviceRegistrationFailed(error);\n        },\n\n        //This function receives all notification events from APN\n        _onNotificationAPN: function (e) {\n            this._raiseNotificationEventIOS(e);\n        },\n\n        //This function receives all notification events from GCM\n        _onNotificationGCM: function onNotificationGCM(e) {\n            switch (e.event) {\n                case 'registered':\n                    if (e.regid.length > 0) {\n                        this._deviceRegistrationSuccess(e.regid);\n                    }\n                    break;\n                case 'message':\n                    this._raiseNotificationEventAndroid(e);\n                    break;\n                case 'error':\n                    if (!this.pushToken) {\n                        this._deviceRegistrationFailed(e);\n                    } else {\n                        this._raiseNotificationEventAndroid(e);\n                    }\n                    break;\n                default:\n                    this._raiseNotificationEventAndroid(e);\n                    break;\n            }\n        },\n\n        _raiseNotificationEventAndroid: function (e) {\n            if (this.pushSettings.notificationCallbackAndroid) {\n                this.pushSettings.notificationCallbackAndroid(e);\n            }\n        },\n        _raiseNotificationEventIOS: function (e) {\n            if (this.pushSettings.notificationCallbackIOS) {\n                this.pushSettings.notificationCallbackIOS(e);\n            }\n        }\n    };\n\n    return CurrentDevice;\n}());\n",
    "var _ = require('../common')._;\nvar constants = require('../constants');\nvar Query = require('../query/Query');\nvar Headers = constants.Headers;\n\nmodule.exports = (function () {\n    // TODO: [offline] Update the structure - filter field can be refactored for example and a skip/limit/sort property can be added\n    var DataQuery = function (config) {\n        this.collectionName = config.collectionName;\n        this.headers = config.headers || {};\n        this.filter = config.filter;\n        this.onSuccess = config.onSuccess;\n        this.onError = config.onError;\n        this.operation = config.operation;\n        this.parse = config.parse;\n        this.additionalOptions = config.additionalOptions;\n        this.data = config.data;\n        this.useOffline = config.useOffline;\n        this.applyOffline = config.applyOffline;\n        this.noRetry = config.noRetry; //retry will be done by default, when a request fails because of expired token, once the authentication.completeAuthentication in sdk is called.\n        this.skipAuth = config.skipAuth; //if set to true, the sdk will not require authorization if the data query fails because of expired token. Used internally for various login methods.\n        this._normalizedHeaders = null;\n        this.isSync = config.isSync;\n    };\n\n    DataQuery.prototype = {\n        _normalizeHeaders: function () {\n            var self = this;\n            var headerKeys = Object.keys(this.headers);\n\n            this._normalizedHeaders = {};\n            _.each(headerKeys, function (headerKey) {\n                var normalizedKey = headerKey.toLowerCase();\n                self._normalizedHeaders[normalizedKey] = self.headers[headerKey];\n            });\n        },\n\n        getHeader: function (header) {\n            if (!this._normalizedHeaders) {\n                this._normalizeHeaders();\n            }\n\n            var normalizedHeader = header.toLowerCase();\n            return this._normalizedHeaders[normalizedHeader];\n        },\n\n        getHeaderAsJSON: function (header) {\n            if (!this._normalizedHeaders) {\n                this._normalizeHeaders();\n            }\n\n            var headerValue = this._normalizedHeaders[header.toLowerCase()];\n            if (_.isObject(headerValue)) {\n                return headerValue;\n            }\n            if (_.isString(headerValue)) {\n                try {\n                    return JSON.parse(headerValue);\n                } catch (e) {\n                    return headerValue;\n                }\n            } else {\n                return headerValue;\n            }\n        },\n\n        getQueryParameters: function () {\n            var queryParams = {};\n\n            if (this.operation === DataQuery.operations.readById) {\n                queryParams.filter = this.additionalOptions.id;\n                queryParams.expand = this.getHeaderAsJSON(Headers.expand);\n            } else {\n                var sort = this.getHeaderAsJSON(Headers.sort);\n                var limit = this.getHeaderAsJSON(Headers.take);\n                var skip = this.getHeaderAsJSON(Headers.skip);\n                var select = this.getHeaderAsJSON(Headers.select);\n                var filter = this.getHeaderAsJSON(Headers.filter);\n                var expand = this.getHeaderAsJSON(Headers.expand);\n\n                if (this.filter instanceof Query) {\n                    var filterObj = this.filter.build();\n                    queryParams.filter = filterObj.$where || filter || {};\n                    queryParams.sort = filterObj.$sort || sort;\n                    queryParams.limit = filterObj.$take || limit;\n                    queryParams.skip = filterObj.$skip || skip;\n                    queryParams.select = filterObj.$select || select;\n                    queryParams.expand = filterObj.$expand || expand;\n                } else {\n                    queryParams.filter = (this.filter || filter) || {};\n                    queryParams.sort = sort;\n                    queryParams.limit = limit;\n                    queryParams.skip = skip;\n                    queryParams.select = select;\n                    queryParams.expand = expand;\n                }\n            }\n\n            return queryParams;\n        }\n    };\n\n    DataQuery.operations = {\n        read: 'read',\n        create: 'create',\n        update: 'update',\n        remove: 'destroy',\n        removeSingle: 'destroySingle',\n        readById: 'readById',\n        count: 'count',\n        rawUpdate: 'rawUpdate',\n        setAcl: 'setAcl',\n        setOwner: 'setOwner',\n        userLogin: 'login',\n        userLogout: 'logout',\n        userChangePassword: 'changePassword',\n        userLoginWithProvider: 'loginWith',\n        userLinkWithProvider: 'linkWith',\n        userUnlinkFromProvider: 'unlinkFrom',\n        userResetPassword: 'resetPassword',\n        userSetPassword: 'setPassword',\n        filesUpdateContent: 'updateContent',\n        filesGetDownloadUrlById: 'downloadUrlById'\n    };\n\n    return DataQuery;\n}());",
    "var Expression = require('../Expression');\nvar OperatorType = require('../constants').OperatorType;\nvar WhereQuery = require('./WhereQuery');\nvar QueryBuilder = require('./QueryBuilder');\n\nmodule.exports = (function () {\n    /**\n     * @class Query\n     * @classdesc A query class used to describe a request that will be made to the {{site.TelerikBackendServices}} JavaScript API.\n     * @param {object} [filter] A [filter expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) definition.\n     * @param {object} [fields] A [fields expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-subset-fields) definition.\n     * @param {object} [sort] A [sort expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-sorting) definition.\n     * @param {number} [skip] Number of items to skip. Used for paging.\n     * @param {number} [take] Number of items to take. Used for paging.\n     * @param {object} [expand] An [expand expression](http://docs.telerik.com/platform/backend-services/rest/data/relations/relations-defining) definition.\n     */\n    function Query(filter, fields, sort, skip, take, expand) {\n        this.filter = filter;\n        this.fields = fields;\n        this.sort = sort;\n        this.toskip = skip;\n        this.totake = take;\n        this.expandExpression = expand;\n        this.expr = new Expression(OperatorType.query);\n    }\n\n    Query.prototype = {\n        /** Applies a filter to the current query. This allows you to retrieve only a subset of the items based on various filtering criteria.\n         * @memberOf Query.prototype\n         * @method where\n         * @name where\n         * @param {object} filter A [filter expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) definition.\n         * @returns {Query}\n         */\n        /** Defines a filter definition for the current query.\n         * @memberOf Query.prototype\n         * @method where\n         * @name where\n         * @returns {WhereQuery}\n         */\n        where: function (filter) {\n            if (filter) {\n                return this._simple(OperatorType.filter, [filter]);\n            }\n            else {\n                return new WhereQuery(this);\n            }\n        },\n        /** Applies a fields selection to the current query. This allows you to retrieve only a subset of all available item fields.\n         * @memberOf Query.prototype\n         * @method select\n         * @param {object} fieldsExpression A [fields expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-subset-fields) definition.\n         * @returns {Query}\n         */\n        select: function () {\n            return this._simple(OperatorType.select, arguments);\n        },\n        // TODO\n        //exclude: function () {\n        //    return this._simple(OperatorType.exclude, arguments);\n        //},\n        /** Sorts the items in the current query in ascending order by the specified field.\n         * @memberOf Query.prototype\n         * @method order\n         * @param {string} field The field name to order by in ascending order.\n         * @returns {Query}\n         */\n        order: function (field) {\n            return this._simple(OperatorType.order, [field]);\n        },\n        /** Sorts the items in the current query in descending order by the specified field.\n         * @memberOf Query.prototype\n         * @method orderDesc\n         * @param {string} field The field name to order by in descending order.\n         * @returns {Query}\n         */\n        orderDesc: function (field) {\n            return this._simple(OperatorType.order_desc, [field]);\n        },\n        /** Skips a certain number of items from the beginning before returning the rest of the items. Used for paging.\n         * @memberOf Query.prototype\n         * @method skip\n         * @see [query.take]{@link query.take}\n         * @param {number} value The number of items to skip.\n         * @returns {Query}\n         */\n        skip: function (value) {\n            return this._simple(OperatorType.skip, [value]);\n        },\n        /** Takes a specified number of items from the query result. Used for paging.\n         * @memberOf Query.prototype\n         * @method take\n         * @see [query.skip]{@link query.skip}\n         * @param {number} value The number of items to take.\n         * @returns {Query}\n         */\n        take: function (value) {\n            return this._simple(OperatorType.take, [value]);\n        },\n        /** Sets an expand expression for the current query. This allows you to retrieve complex data sets using a single query based on relations between data types.\n         * @memberOf Query.prototype\n         * @method expand\n         * @param {object} expandExpression An [expand expression](http://docs.telerik.com/platform/backend-services/rest/data/relations/relations-defining) definition.\n         * @returns {Query}\n         */\n        expand: function (expandExpression) {\n            return this._simple(OperatorType.expand, [expandExpression]);\n        },\n        /** Builds an object containing the different expressions that will be sent to {{site.TelerikBackendServices}}. It basically translates any previously specified expressions into standard queries that {{site.bs}} can understand.\n         * @memberOf Query.prototype\n         * @method build\n         * @returns {{$where,$select,$sort,$skip,$take,$expand}}\n         */\n        build: function () {\n            return new QueryBuilder(this).build();\n        },\n        _simple: function (op, oprs) {\n            var args = [].slice.call(oprs);\n            this.expr.addOperand(new Expression(op, args));\n            return this;\n        }\n    };\n\n    return Query;\n}());",
    "var constants = require('../constants');\nvar OperatorType = constants.OperatorType;\nvar _ = require('../common')._;\nvar GeoPoint = require('../GeoPoint');\nvar EverliveError = require('../EverliveError').EverliveError;\nvar Expression = require('../Expression');\nvar maxDistanceConsts = constants.maxDistanceConsts;\nvar radiusConsts = constants.radiusConsts;\n\nmodule.exports = (function () {\n    function QueryBuilder(query) {\n        this.query = query;\n        this.expr = query.expr;\n    }\n\n    QueryBuilder.prototype = {\n        // TODO merge the two objects before returning them\n        build: function () {\n            var query = this.query;\n            if (query.filter || query.fields || query.sort || query.toskip || query.totake || query.expandExpression) {\n                return {\n                    $where: query.filter || null,\n                    $select: query.fields || null,\n                    $sort: query.sort || null,\n                    $skip: query.toskip || null,\n                    $take: query.totake || null,\n                    $expand: query.expandExpression || null\n                };\n            }\n            return {\n                $where: this._buildWhere(),\n                $select: this._buildSelect(),\n                $sort: this._buildSort(),\n                $skip: this._getSkip(),\n                $take: this._getTake(),\n                $expand: this._getExpand()\n            };\n        },\n        _getSkip: function () {\n            var skipExpression = _.find(this.expr.operands, function (value, index, list) {\n                return value.operator === OperatorType.skip;\n            });\n            return skipExpression ? skipExpression.operands[0] : null;\n        },\n        _getTake: function () {\n            var takeExpression = _.find(this.expr.operands, function (value, index, list) {\n                return value.operator === OperatorType.take;\n            });\n            return takeExpression ? takeExpression.operands[0] : null;\n        },\n        _getExpand: function () {\n            var expandExpression = _.chain(this.expr.operands)\n                .filter(function (value) {\n                    return value.operator === OperatorType.expand;\n                })\n                .reduce(function (result, expression) { //expression contains operands and has operator type expand\n                    return _.extend(result, expression.operands[0]);\n                }, {})\n                .value();\n            return _.isEmpty(expandExpression) ? null : expandExpression;\n        },\n        _buildSelect: function () {\n            var selectExpression = _.find(this.expr.operands, function (value, index, list) {\n                return value.operator === OperatorType.select;\n            });\n            var result = {};\n            if (selectExpression) {\n                _.reduce(selectExpression.operands, function (memo, value) {\n                    memo[value] = 1;\n                    return memo;\n                }, result);\n                return result;\n            }\n            else {\n                return null;\n            }\n        },\n        _buildSort: function () {\n            var sortExpressions = _.filter(this.expr.operands, function (value, index, list) {\n                return value.operator === OperatorType.order || value.operator === OperatorType.order_desc;\n            });\n            var result = {};\n            if (sortExpressions.length > 0) {\n                _.reduce(sortExpressions, function (memo, value) {\n                    memo[value.operands[0]] = value.operator === OperatorType.order ? 1 : -1;\n                    return memo;\n                }, result);\n                return result;\n            }\n            else {\n                return null;\n            }\n        },\n        _buildWhere: function () {\n            var whereExpression = _.find(this.expr.operands, function (value, index, list) {\n                return value.operator === OperatorType.where;\n            });\n            if (whereExpression) {\n                return this._build(new Expression(OperatorType.and, whereExpression.operands));\n            }\n            else {\n                var filterExpression = _.find(this.expr.operands, function (value, index, list) {\n                    return value.operator === OperatorType.filter;\n                });\n                if (filterExpression) {\n                    return filterExpression.operands[0];\n                }\n                return null;\n            }\n        },\n        _build: function (expr) {\n            if (this._isSimple(expr)) {\n                return this._simple(expr);\n            }\n            else if (this._isRegex(expr)) {\n                return this._regex(expr);\n            }\n            else if (this._isGeo(expr)) {\n                return this._geo(expr);\n            }\n            else if (this._isAnd(expr)) {\n                return this._and(expr);\n            }\n            else if (this._isOr(expr)) {\n                return this._or(expr);\n            }\n            else if (this._isNot(expr)) {\n                return this._not(expr);\n            }\n        },\n        _isSimple: function (expr) {\n            return expr.operator >= OperatorType.equal && expr.operator <= OperatorType.size;\n        },\n        _simple: function (expr) {\n            var term = {}, fieldTerm = {};\n            var operands = expr.operands;\n            var operator = this._translateoperator(expr.operator);\n            if (operator) {\n                term[operator] = operands[1];\n            }\n            else {\n                term = operands[1];\n            }\n            fieldTerm[operands[0]] = term;\n            return fieldTerm;\n        },\n        _isRegex: function (expr) {\n            return expr.operator >= OperatorType.regex && expr.operator <= OperatorType.endsWith;\n        },\n        _regex: function (expr) {\n            var fieldTerm = {};\n            var regex = this._getRegex(expr);\n            var regexValue = this._getRegexValue(regex);\n            var operands = expr.operands;\n            fieldTerm[operands[0]] = regexValue;\n            return fieldTerm;\n        },\n        _getRegex: function (expr) {\n            var pattern = expr.operands[1];\n            var flags = expr.operands[2] ? expr.operands[2] : '';\n            switch (expr.operator) {\n                case OperatorType.regex:\n                    return pattern instanceof RegExp ? pattern : new RegExp(pattern, flags);\n                case OperatorType.startsWith:\n                    return new RegExp(\"^\" + pattern, flags);\n                case OperatorType.endsWith:\n                    return new RegExp(pattern + \"$\", flags);\n                default:\n                    throw new EverliveError('Unknown operator type.');\n            }\n        },\n        _getRegexValue: function (regex) {\n            var options = '';\n            if (regex.global) {\n                options += 'g';\n            }\n            if (regex.multiline) {\n                options += 'm';\n            }\n            if (regex.ignoreCase) {\n                options += 'i';\n            }\n            return {$regex: regex.source, $options: options};\n        },\n        _isGeo: function (expr) {\n            return expr.operator >= OperatorType.nearShpere && expr.operator <= OperatorType.withinShpere;\n        },\n        _geo: function (expr) {\n            var fieldTerm = {};\n            var operands = expr.operands;\n            fieldTerm[operands[0]] = this._getGeoTerm(expr);\n            return fieldTerm;\n        },\n        _getGeoTerm: function (expr) {\n            switch (expr.operator) {\n                case OperatorType.nearShpere:\n                    return this._getNearSphereTerm(expr);\n                case OperatorType.withinBox:\n                    return this._getWithinBox(expr);\n                case OperatorType.withinPolygon:\n                    return this._getWithinPolygon(expr);\n                case OperatorType.withinShpere:\n                    return this._getWithinCenterSphere(expr);\n                default:\n                    throw new EverliveError('Unknown operator type.');\n            }\n        },\n        _getNearSphereTerm: function (expr) {\n            var operands = expr.operands;\n            var center = this._getGeoPoint(operands[1]);\n            var maxDistance = operands[2];\n            var metrics = operands[3];\n            var maxDistanceConst;\n            var term = {\n                '$nearSphere': center\n            };\n            if (typeof maxDistance !== 'undefined') {\n                maxDistanceConst = maxDistanceConsts[metrics] || maxDistanceConsts.radians;\n                term[maxDistanceConst] = maxDistance;\n            }\n            return term;\n        },\n        _getWithinBox: function (expr) {\n            var operands = expr.operands;\n            var bottomLeft = this._getGeoPoint(operands[1]);\n            var upperRight = this._getGeoPoint(operands[2]);\n            return {\n                '$within': {\n                    '$box': [bottomLeft, upperRight]\n                }\n            };\n        },\n        _getWithinPolygon: function (expr) {\n            var operands = expr.operands;\n            var points = this._getGeoPoints(operands[1]);\n            return {\n                '$within': {\n                    '$polygon': points\n                }\n            };\n        },\n        _getWithinCenterSphere: function (expr) {\n            var operands = expr.operands;\n            var center = this._getGeoPoint(operands[1]);\n            var radius = operands[2];\n            var metrics = operands[3];\n            var radiusConst = radiusConsts[metrics] || radiusConsts.radians;\n            var sphereInfo = {\n                'center': center\n            };\n            sphereInfo[radiusConst] = radius;\n            return {\n                '$within': {\n                    '$centerSphere': sphereInfo\n                }\n            };\n        },\n        _getGeoPoint: function (point) {\n            if (_.isArray(point)) {\n                return new GeoPoint(point[0], point[1]);\n            }\n            return point;\n        },\n        _getGeoPoints: function (points) {\n            var self = this;\n            return _.map(points, function (point) {\n                return self._getGeoPoint(point);\n            });\n        },\n        _isAnd: function (expr) {\n            return expr.operator === OperatorType.and;\n        },\n        _and: function (expr) {\n            var i, l, term, result = {};\n            var operands = expr.operands;\n            for (i = 0, l = operands.length; i < l; i++) {\n                term = this._build(operands[i]);\n                result = this._andAppend(result, term);\n            }\n            return result;\n        },\n        _andAppend: function (andObj, newObj) {\n            var i, l, key, value, newValue;\n            var keys = _.keys(newObj);\n            for (i = 0, l = keys.length; i < l; i++) {\n                key = keys[i];\n                value = andObj[key];\n                if (typeof value === 'undefined') {\n                    andObj[key] = newObj[key];\n                }\n                else {\n                    newValue = newObj[key];\n                    if (typeof value === 'object' && typeof newValue === 'object') {\n                        value = _.extend(value, newValue);\n                    } else {\n                        value = newValue;\n                    }\n                    andObj[key] = value;\n                }\n            }\n            return andObj;\n        },\n        _isOr: function (expr) {\n            return expr.operator === OperatorType.or;\n        },\n        _or: function (expr) {\n            var i, l, term, result = [];\n            var operands = expr.operands;\n            for (i = 0, l = operands.length; i < l; i++) {\n                term = this._build(operands[i]);\n                result.push(term);\n            }\n            return {$or: result};\n        },\n        _isNot: function (expr) {\n            return expr.operator === OperatorType.not;\n        },\n        _not: function (expr) {\n            return {$not: this._build(expr.operands[0])};\n        },\n        _translateoperator: function (operator) {\n            switch (operator) {\n                case OperatorType.equal:\n                    return null;\n                case OperatorType.not_equal:\n                    return '$ne';\n                case OperatorType.gt:\n                    return '$gt';\n                case OperatorType.lt:\n                    return '$lt';\n                case OperatorType.gte:\n                    return '$gte';\n                case OperatorType.lte:\n                    return '$lte';\n                case OperatorType.isin:\n                    return '$in';\n                case OperatorType.notin:\n                    return '$nin';\n                case OperatorType.all:\n                    return '$all';\n                case OperatorType.size:\n                    return '$size';\n            }\n            throw new EverliveError('Unknown operator type.');\n        }\n    };\n\n    return QueryBuilder;\n}());",
    "var DataQuery = require('./DataQuery');\nvar Request = require('../Request');\nvar _ = require('../common')._;\n\nmodule.exports = (function () {\n    var RequestOptionsBuilder = {};\n\n    RequestOptionsBuilder._buildEndpointUrl = function (dataQuery) {\n        var endpoint = dataQuery.collectionName;\n        if (dataQuery.additionalOptions && dataQuery.additionalOptions.id) {\n            endpoint += '/' + dataQuery.additionalOptions.id;\n        }\n\n        return endpoint;\n    };\n\n    RequestOptionsBuilder._buildBaseObject = function (dataQuery) {\n        var defaultObject = {\n            endpoint: RequestOptionsBuilder._buildEndpointUrl(dataQuery),\n            filter: dataQuery.filter,\n            success: dataQuery.onSuccess,\n            error: dataQuery.onError,\n            data: dataQuery.data,\n            headers: dataQuery.headers\n        };\n\n        if (dataQuery.parse) {\n            defaultObject.parse = dataQuery.parse;\n        }\n\n        return defaultObject;\n    };\n\n    RequestOptionsBuilder._build = function (dataQuery, additionalOptions) {\n        return _.extend(RequestOptionsBuilder._buildBaseObject(dataQuery), additionalOptions);\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.read] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'GET'\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.readById] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'GET'\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.count] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'GET',\n            endpoint: dataQuery.collectionName + '/_count'\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.create] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'POST'\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.rawUpdate] = function (dataQuery) {\n        var endpoint = dataQuery.collectionName;\n        var filter = dataQuery.filter;\n        var ofilter = null; // request options filter\n\n        if (typeof filter === 'string') {\n            endpoint += '/' + filter; // send the filter through query string\n        } else if (typeof filter === 'object') {\n            ofilter = filter; // send the filter as filter headers\n        }\n\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'PUT',\n            endpoint: endpoint,\n            filter: ofilter\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.update] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'PUT'\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.remove] = function (dataQuery) {\n        return _.extend(RequestOptionsBuilder._buildBaseObject(dataQuery), {\n            method: 'DELETE'\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.removeSingle] = RequestOptionsBuilder[DataQuery.operations.remove];\n\n    RequestOptionsBuilder[DataQuery.operations.setAcl] = function (dataQuery) {\n        var endpoint = dataQuery.collectionName;\n        var filter = dataQuery.filter;\n\n        if (typeof filter === 'string') { // if filter is string than will update a single item using the filter as an identifier\n            endpoint += '/' + filter;\n        } else if (typeof filter === 'object') { // else if it is an object than we will use it's id property\n            endpoint += '/' + filter[idField];\n        }\n        endpoint += '/_acl';\n        var method, data;\n        if (dataQuery.additionalOptions.acl === null) {\n            method = 'DELETE';\n        } else {\n            method = 'PUT';\n            data = dataQuery.additionalOptions.acl;\n        }\n\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: method,\n            endpoint: endpoint,\n            data: data\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.setOwner] = function (dataQuery) {\n        var endpoint = dataQuery.collectionName;\n        var filter = dataQuery.filter;\n        if (typeof filter === 'string') { // if filter is string than will update a single item using the filter as an identifier\n            endpoint += '/' + filter;\n        } else if (typeof filter === 'object') { // else if it is an object than we will use it's id property\n            endpoint += '/' + filter[idField];\n        }\n        endpoint += '/_owner';\n\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'PUT',\n            endpoint: endpoint\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.userLogin] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'POST',\n            endpoint: 'oauth/token',\n            authHeaders: false,\n            parse: Request.parsers.single\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.userLogout] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'GET',\n            endpoint: 'oauth/logout'\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.userChangePassword] = function (dataQuery) {\n        var keepTokens = dataQuery.additionalOptions.keepTokens;\n        var endpoint = 'Users/changepassword';\n        if (keepTokens) {\n            endpoint += '?keepTokens=true';\n        }\n\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'POST',\n            endpoint: endpoint,\n            authHeaders: false,\n            parse: Request.parsers.single\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.userLoginWithProvider] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'POST',\n            authHeaders: false\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.userLinkWithProvider] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'POST',\n            endpoint: RequestOptionsBuilder._buildEndpointUrl(dataQuery) + '/link'\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.userUnlinkFromProvider] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'POST',\n            endpoint: RequestOptionsBuilder._buildEndpointUrl(dataQuery) + '/unlink'\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.userResetPassword] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'POST',\n            endpoint: RequestOptionsBuilder._buildEndpointUrl(dataQuery) + '/resetpassword'\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.userSetPassword] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'POST',\n            endpoint: RequestOptionsBuilder._buildEndpointUrl(dataQuery) + '/setpassword'\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.filesUpdateContent] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'PUT',\n            endpoint: RequestOptionsBuilder._buildEndpointUrl(dataQuery) + '/Content'\n        });\n    };\n\n    RequestOptionsBuilder[DataQuery.operations.filesGetDownloadUrlById] = function (dataQuery) {\n        return RequestOptionsBuilder._build(dataQuery, {\n            method: 'GET'\n        });\n    };\n\n    return RequestOptionsBuilder;\n}());",
    "var Expression = require('../Expression');\nvar OperatorType = require('../constants').OperatorType;\n\nmodule.exports = (function () {\n    /**\n     * @classdesc A fluent API operation for creating a filter for a query by chaining different rules.\n     * @class WhereQuery\n     * @protected\n     * @borrows WhereQuery#eq as WhereQuery#equal\n     * @borrows WhereQuery#ne as WhereQuery#notEqual\n     * @borrows WhereQuery#gt as WhereQuery#greaterThan\n     * @borrows WhereQuery#gte as WhereQuery#greaterThanEqual\n     * @borrows WhereQuery#lt as WhereQuery#lessThan\n     * @borrows WhereQuery#lte as WhereQuery#lessThanEqual\n     */\n    function WhereQuery(parentQuery, exprOp, singleOperand) {\n        this.parent = parentQuery;\n        this.single = singleOperand;\n        this.expr = new Expression(exprOp || OperatorType.where);\n        this.parent.expr.addOperand(this.expr);\n    }\n\n    WhereQuery.prototype = {\n        /**\n         * Adds an `and` clause to the current condition and returns it for further chaining.\n         * @method and\n         * @memberOf WhereQuery.prototype\n         * @returns {WhereQuery}\n         */\n        and: function () {\n            return new WhereQuery(this, OperatorType.and);\n        },\n        /**\n         * Adds an `or` clause to the current condition and returns it for further chaining.\n         * @method or\n         * @memberOf WhereQuery.prototype\n         * @returns {WhereQuery}\n         */\n        or: function () {\n            return new WhereQuery(this, OperatorType.or);\n        },\n        /**\n         * Adds a `not` clause to the current condition and returns it for further chaining.\n         * @method not\n         * @memberOf WhereQuery.prototype\n         * @returns {WhereQuery}\n         */\n        not: function () {\n            return new WhereQuery(this, OperatorType.not, true);\n        },\n        _simple: function (operator) {\n            var args = [].slice.call(arguments, 1);\n            this.expr.addOperand(new Expression(operator, args));\n            return this._done();\n        },\n        /**\n         * Adds a condition that a field must be equal to a specific value.\n         * @method eq\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {*} value Comparison value (to which the fields must be equal).\n         * @returns {WhereQuery}\n         */\n        eq: function (field, value) {\n            return this._simple(OperatorType.equal, field, value);\n        },\n        /**\n         * Adds a condition that a field must *not* be equal to a specific value.\n         * @method ne\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {*} value Comparison value (to which the field must not be equal).\n         * @returns {WhereQuery}\n         */\n        ne: function (field, value) {\n            return this._simple(OperatorType.not_equal, field, value);\n        },\n        /**\n         * Adds a condition that a field must be `greater than` a certain value. Applicable to Number, String, and Date fields.\n         * @method gt\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {*} value Comparison value (that the field should be greater than).\n         * @returns {WhereQuery}\n         */\n        gt: function (field, value) {\n            return this._simple(OperatorType.gt, field, value);\n        },\n        /**\n         * Adds a condition that a field must be `greater than or equal` to a certain value. Applicable to Number, String, and Date fields.\n         * @method gte\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {*} value Comparison value (that the field should be greater than or equal to).\n         * @returns {WhereQuery}\n         */\n        gte: function (field, value) {\n            return this._simple(OperatorType.gte, field, value);\n        },\n        /**\n         * Adds a condition that a field must be `less than` a certain value. Applicable to Number, String, and Date fields.\n         * @method lt\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {*} value Comparison value (that the field should be less than).\n         * @returns {WhereQuery}\n         */\n        lt: function (field, value) {\n            return this._simple(OperatorType.lt, field, value);\n        },\n        /**\n         * Adds a condition that a field must be `less than or equal` to a certain value. Applicable to Number, String, and Date fields.\n         * @method lte\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {*} value Comparison value (that the field should be less than or equal to).\n         * @returns {WhereQuery}\n         */\n        lte: function (field, value) {\n            return this._simple(OperatorType.lte, field, value);\n        },\n        /**\n         * Adds a condition that a field must be in a set of values.\n         * @method isin\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {Array} value An array of the values that the field should be in.\n         * @returns {WhereQuery}\n         */\n        isin: function (field, value) {\n            return this._simple(OperatorType.isin, field, value);\n        },\n        /**\n         * Adds a condition that a field must *not* be in a set of values.\n         * @method notin\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {Array} value An array of values that the field should not be in.\n         * @returns {WhereQuery}\n         */\n        notin: function (field, value) {\n            return this._simple(OperatorType.notin, field, value);\n        },\n        /**\n         * Adds a condition that a field must include *all* of the specified values. Applicable to Array fields.\n         * @method all\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {Array} value An array of values that the field must include.\n         * @returns {WhereQuery}\n         */\n        all: function (field, value) {\n            return this._simple(OperatorType.all, field, value);\n        },\n        /**\n         * Adds a condition that a field must contain an array whose length is larger than a specified value. Applicable to Array fields.\n         * @method size\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {number} value The size that the array must be bigger than.\n         * @returns {WhereQuery}\n         */\n        size: function (field, value) {\n            return this._simple(OperatorType.size, field, value);\n        },\n        /**\n         * Adds a condition that a field must satisfy a specified regex.\n         * @method regex\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {string} regularExpression Regular expression in PCRE format.\n         * @param {string} [options] A string of regex options to use. See [specs](http://docs.mongodb.org/manual/reference/operator/query/regex/#op._S_options) for a description of available options.\n         * @returns {WhereQuery}\n         */\n        regex: function (field, value, flags) {\n            return this._simple(OperatorType.regex, field, value, flags);\n        },\n        /**\n         * Adds a condition that a field value must *start* with a specified string.\n         * @method startsWith\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {string} value The string that the field should start with.\n         * @param {string} [options] A string of regex options to use. See [specs](http://docs.mongodb.org/manual/reference/operator/query/regex/#op._S_options) for a description of available options.\n         * @returns {WhereQuery}\n         */\n        startsWith: function (field, value, flags) {\n            return this._simple(OperatorType.startsWith, field, value, flags);\n        },\n        /**\n         * Adds a condition that a field value must *end* with a specified string.\n         * @method endsWith\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name.\n         * @param {string} value The string that the field should end with.\n         * @param {string} [options] A string of  regex options to use. See [specs](http://docs.mongodb.org/manual/reference/operator/query/regex/#op._S_options) for a description of available options.\n         * @returns {WhereQuery}\n         */\n        endsWith: function (field, value, flags) {\n            return this._simple(OperatorType.endsWith, field, value, flags);\n        },\n        /**\n         * Adds a Geospatial condition that a specified geopoint must be within a certain distance from another geopoint. Applicable to GeoPoint fields only.\n         * @method nearSphere\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name containing a {GeoPoint} in the following format: `(decimal_degrees_latitude,decimal_degrees_longitude)`, where *decimal_degrees_latitude* ranges from -90 to 90 and *decimal_degrees_longitude* ranges from -180 to 180. Example: `(42.6954322,123.3239467)`\n         * @param {Everlive.GeoPoint} point Comparison geopoint value.\n         * @param {number} distance Distance value.\n         * @param {string} [metrics=radians] A string representing what unit of measurement is used for distance. Possible values: radians, km, miles.\n         * @returns {WhereQuery}\n         */\n        nearSphere: function (field, point, distance, metrics) {\n            return this._simple(OperatorType.nearShpere, field, point, distance, metrics);\n        },\n        /**\n         * Adds a Geospatial condition that a specified geopoint must be within a specified coordinate rectangle. Applicable to GeoPoint fields only.\n         * @method withinBox\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name containing a {GeoPoint} in the following format: `(decimal_degrees_latitude,decimal_degrees_longitude)`, where *decimal_degrees_latitude* ranges from -90 to 90 and *decimal_degrees_longitude* ranges from -180 to 180. Example: `(42.6954322,123.3239467)`\n         * @param {Everlive.GeoPoint} pointBottomLeft Value representing the bottom left corner of the box.\n         * @param {Everlive.GeoPoint} pointUpperRight Value representing the upper right corner of the box.\n         * @example ```js\n         var query = new Everlive.Query();\n         query.where().withinBox('Location',\n         new Everlive.GeoPoint(23.317871, 42.687709),\n         new Everlive.GeoPoint(23.331346, 42.707075));\n         ```\n         * @returns {WhereQuery}\n         */\n        withinBox: function (field, pointBottomLeft, pointUpperRight) {\n            return this._simple(OperatorType.withinBox, field, pointBottomLeft, pointUpperRight);\n        },\n        /**\n         * Adds a Geospatial condition that a specified geopoint must be within a specified coordinate polygon. The polygon is specified as an array of geopoints. The last point in the array is implicitly connected to the first point thus closing the shape. Applicable to GeoPoint fields only.\n         * @method withinPolygon\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name containing a {GeoPoint} in the following format: `(decimal_degrees_latitude,decimal_degrees_longitude)`, where *decimal_degrees_latitude* ranges from -90 to 90 and *decimal_degrees_longitude* ranges from -180 to 180. Example: `(42.6954322,123.3239467)`\n         * @param {Everlive.GeoPoint[]} points Comparison value in the form of an array of geopoints defining the polygon.\n         * @example ```js\n         var point1 = new Everlive.GeoPoint(23.317871, 42.687709);\n         var point2 = new Everlive.GeoPoint(42.698749, 42.698749);\n         var point3 = new Everlive.GeoPoint(23.331346, 42.702282);\n\n         var query = new Everlive.Query();\n         query.where().withinPolygon(\"location\", [point1, point2, point3]);\n         * ```\n         * @returns {WhereQuery}\n         */\n        withinPolygon: function (field, points) {\n            return this._simple(OperatorType.withinPolygon, field, points);\n        },\n        /**\n         * Adds a Geospatial condition that a specified geopoint must be within a coordinate circle. Applicable to GeoPoint fields only.\n         * @method withinCenterSphere\n         * @memberOf WhereQuery.prototype\n         * @param {string} field Field name containing a {GeoPoint} in the following format: `(decimal_degrees_latitude,decimal_degrees_longitude)`, where *decimal_degrees_latitude* ranges from -90 to 90 and *decimal_degrees_longitude* ranges from -180 to 180. Example: `(42.6954322,123.3239467)`\n         * @param {Everlive.GeoPoint} center Comparison value specifying the center of the coordinate circle.\n         * @param {number} radius Value specifying the radius length.\n         * @param {string} [metrics=radians] A string representing what unit of measurement is used for radius length. Possible values: radians, km, miles.\n         * @returns {WhereQuery}\n         */\n        withinCenterSphere: function (field, center, radius, metrics) {\n            return this._simple(OperatorType.withinShpere, field, center, radius, metrics);\n        },\n        /**\n         * Ends the definition of the current WhereQuery. You need to call this method in order to continue with the definition of the parent `Query`. All other `WhereQuery` methods return the current instance of `WhereQuery` to allow chaining.\n         * @method done\n         * @memberOf WhereQuery.prototype\n         * @returns {Query}\n         */\n        done: function () {\n            if (this.parent instanceof WhereQuery) {\n                return this.parent._done();\n            } else {\n                return this.parent;\n            }\n        },\n        _done: function () {\n            if (this.single) {\n                return this.parent;\n            } else {\n                return this;\n            }\n        }\n    };\n\n    WhereQuery.prototype.equal = WhereQuery.prototype.eq;\n    WhereQuery.prototype.notEqual = WhereQuery.prototype.ne;\n    WhereQuery.prototype.greaterThan = WhereQuery.prototype.gt;\n    WhereQuery.prototype.greaterThanEqual = WhereQuery.prototype.gte;\n    WhereQuery.prototype.lessThan = WhereQuery.prototype.lt;\n    WhereQuery.prototype.lessThanEqual = WhereQuery.prototype.lte;\n\n    return WhereQuery;\n}());",
    "var http = require('http');\nmodule.exports = (function () {\n    'use strict';\n\n    function reqwest(options) {\n        var httpRequestOptions = {\n            url: options.url,\n            method: options.method,\n            headers: options.headers || {}\n        };\n\n        if (options.data) {\n            httpRequestOptions.content = options.data; // NOTE: If we pass null/undefined, it will raise an exception in the http module.\n        }\n\n        httpRequestOptions.headers['Accept'] = 'application/json';\n        httpRequestOptions.headers['Content-Type'] = 'application/json';\n\n        var noop = function () {\n        };\n        var success = options.success || noop;\n        var error = options.error || noop;\n\n        var requestSuccessCallback = function (response) {\n            var contentString = response.content.toString();\n            if (response.statusCode < 400) {\n                // Success callback calls a custom parse function\n                success(contentString);\n            } else {\n                // Error callback relies on a JSON Object with ResponseText inside\n                error({\n                    responseText: contentString\n                });\n            }\n        };\n\n        var requestErrorCallback = function (err) {\n            // error: function(jqXHR, textStatus, errorThrown)\n            // when timeouting for example (i.e. no internet connectivity), we get an err with content { message: \"timeout...\", stack: null }\n            error({\n                responseText: err\n            });\n        };\n\n        http.request(httpRequestOptions).then(requestSuccessCallback, requestErrorCallback);\n    }\n\n    return reqwest;\n}());",
    "var url = require('url');\nvar http = require('http');\nvar https = require('https');\nvar rsvp = require('rsvp');\nvar zlib = require('zlib');\nvar _ = require('underscore');\n\nmodule.exports = (function () {\n    'use strict';\n\n    function reqwest(options) {\n        var urlParts = url.parse(options.url);\n        var request;\n        if (urlParts.protocol === 'https:') {\n            request = https.request;\n        }\n        else {\n            request = http.request;\n        }\n        var headers = options.headers || {};\n        options.success = options.success || _.noop;\n        options.error = options.error || _.noop;\n\n        headers['Content-Type'] = options.contentType;\n        var req = request({\n            method: options.method,\n            hostname: urlParts.hostname,\n            port: urlParts.port,\n            path: urlParts.path,\n            headers: headers\n        }, function (res) {\n            var json = '';\n            var contentEncoding = res.headers['content-encoding'];\n            var responseProxy;\n            switch (contentEncoding){\n                case 'gzip':\n                    responseProxy = zlib.createGunzip();\n                    res.pipe(responseProxy);\n                    break;\n                default:\n                    responseProxy = res;\n                    responseProxy.setEncoding('utf8');\n                    break;\n            }\n\n            responseProxy.on('data', function (data) {\n                json += data.toString();\n            });\n\n            responseProxy.on('end', function () {\n                // 1xx Informational, 2xx Success, 3xx Redirection, 4xx Client Error, 5xx Server Error\n                if (res.statusCode >= 200 && res.statusCode < 400) {\n                    options.success(json, res);\n                } else {\n                    if (json) {\n                        options.error({ responseText: json });\n                    }\n                    else { // empty response\n                        var error = new Error('Response error.');\n                        error.statusCode = res.statusCode;\n                        options.error({ responseText: error });\n                    }\n                }\n            });\n        });\n\n        req.on('error', function (e) {\n            options.error({ responseText: e }); // TODO\n        });\n\n        if (options.data) {\n            var contentEncoding = headers['content-encoding'];\n            switch (contentEncoding){\n                case 'gzip':\n                    var buf = new Buffer(options.data, 'utf-8');\n                    zlib.gzip(buf, function (err, result) {\n                        req.end(result);\n                    });\n                    break;\n                default:\n                    req.end(options.data);\n                    break;\n            }\n        }\n        else {\n            req.end();\n        }\n    }\n\n    return reqwest;\n}());",
    "var platform = require('../everlive.platform');\nvar WebFileStore = require('./WebFileStore');\nvar NativeScriptFileStore = require('./NativeScriptFileStore');\nvar _ = require('../common')._;\n\n'use strict';\n\nif (platform.isNativeScript) {\n    module.exports = NativeScriptFileStore;\n} else if (platform.isCordova || platform.isDesktop) {\n    module.exports = WebFileStore;\n} else {\n    module.exports = _.noop;\n}",
    "var platform = require('./../everlive.platform.js');\nvar isNativeScript = platform.isNativeScript;\nvar isNodejs = platform.isNodejs;\nvar constants = require('./../constants');\n\nmodule.exports = (function () {\n    'use strict';\n\n    function initLocalStorage(options) {\n        if (isNativeScript) {\n            var localSettings;\n\n            //workound for older nativescript versions\n            try {\n                localSettings = require('application-settings');\n            } catch (e) {\n                localSettings = require('local-settings');\n            }\n\n            return {\n                getItem: function (key) {\n                    return localSettings.getString(key);\n                },\n\n                removeItem: function (key) {\n                    return localSettings.remove(key);\n                },\n\n                setItem: function (key, value) {\n                    return localSettings.setString(key, value);\n                }\n            };\n        } else {\n            var localStorage;\n            if (isNodejs) {\n                var LocalStorage = require('node-localstorage').LocalStorage;\n                localStorage = new LocalStorage(options.storage.storagePath);\n            } else {\n                localStorage = window.localStorage;\n            }\n\n            return {\n                getItem: function (key) {\n                    return localStorage.getItem(key);\n                },\n\n                removeItem: function (key) {\n                    return localStorage.removeItem(key);\n                },\n\n                setItem: function (key, value) {\n                    return localStorage.setItem(key, value);\n                }\n            };\n        }\n    }\n\n    function LocalStore(options) {\n        this.options = options;\n        this._localStorage = initLocalStorage(this.options);\n    }\n\n    LocalStore.prototype = {\n        getItem: function (key) {\n            return this._localStorage.getItem(key);\n        },\n\n        removeItem: function (key) {\n            return this._localStorage.removeItem(key);\n        },\n\n        setItem: function (key, value) {\n            return this._localStorage.setItem(key, value);\n        }\n    };\n\n    return LocalStore;\n}());",
    "'use strict';\n\nvar common = require('../common');\nvar rsvp = common.rsvp;\nvar utils = require('../utils');\n\nfunction NativeScriptFileStore(storagePath, options) {\n    this.options = options;\n    this.fs = require('file-system');\n    this.dataDirectoryPath = this.fs.knownFolders.documents().path;\n    this.filesDirectoryPath = this.fs.path.join(this.dataDirectoryPath, storagePath);\n}\n\nNativeScriptFileStore.prototype = {\n    getErrorHandler: function (callback) {\n        return function (e) {\n            callback && callback(e);\n        }\n    },\n\n    removeFilesDirectory: function () {\n        var self = this;\n\n        return self.getFilesDirectory()\n            .then(function (filesDirectory) {\n                return filesDirectory.remove();\n            });\n    },\n\n    removeFile: function (fileEntry) {\n        return fileEntry.remove();\n    },\n\n    readFileAsText: function (fileEntry) {\n        return fileEntry.readText();\n    },\n\n    writeTextToFile: function (fileEntry, content) {\n        return fileEntry.writeText(content);\n    },\n\n    getFile: function (path) {\n        var self = this;\n        return new rsvp.Promise(function (resolve, reject) {\n            self.resolveDataDirectory()\n                .then(function (directoryEntry) {\n                    var fullFilePath = self.fs.path.join(directoryEntry.path, path);\n                    var file = self.fs.File.fromPath(fullFilePath);\n                    resolve(file);\n                })\n                .catch(reject);\n        });\n    },\n\n    getFilesDirectory: function () {\n        var self = this;\n\n        return new rsvp.Promise(function (resolve) {\n            var filesDirectory = self.fs.Folder.fromPath(self.filesDirectoryPath);\n            resolve(filesDirectory);\n        });\n    },\n\n    resolveDataDirectory: function () {\n        var self = this;\n\n        return new rsvp.Promise(function (resolve) {\n            var dataDirectory = self.fs.Folder.fromPath(self.dataDirectoryPath);\n            resolve(dataDirectory);\n        });\n    },\n\n    ensureFilesDirectory: function () {\n        var self = this;\n\n        return new rsvp.Promise(function (resolve, reject) {\n            self.resolveDataDirectory()\n                .then(function (directoryEntry) {\n                    var fileDirectoryPath = self.fs.path.join(directoryEntry.path, self.filesDirectoryPath);\n                    self.fs.Folder.fromPath(fileDirectoryPath);\n                    resolve();\n                })\n                .catch(reject);\n        });\n    },\n\n    getFilesDirectoryPath: function () {\n        return this.filesDirectoryPath;\n    },\n\n    // TODO: [offline] Implement\n    writeText: function (fileName, text) {\n        throw new Error('Not implemented');\n    },\n\n    // TODO: [offline] Implement\n    createDirectory: function () {\n        throw new Error('Not implemented');\n    },\n\n    // TODO: [offline] Implement\n    getFileSize: function (file, getFileSize) {\n        throw new Error('Not implemented');\n    },\n\n    // TODO: [offline] Implement\n    getFileByAbsolutePath: function (path) {\n        throw new Error('Not implemented');\n    },\n\n    readFileAsBase64: function (file) {\n        throw new Error('Not implemented');\n    },\n\n    renameFile: function () {\n        throw new Error('Not implemented');\n    },\n};\n\nmodule.exports = NativeScriptFileStore;",
    "'use strict';\n\nvar EverliveError = require('../EverliveError').EverliveError;\nvar common = require('../common');\nvar rsvp = common.rsvp;\nvar _ = common._;\nvar utils = require('../utils');\nvar platform = require('../everlive.platform');\nvar path = require('path');\n\nvar deviceReadyPromise = function () {\n    return new rsvp.Promise(function (resolve) {\n        document.addEventListener('deviceready', resolve);\n    });\n};\n\nfunction WebFileStore(storagePath, options) {\n    this.options = options;\n\n    var filesDirectoryPath;\n\n    if (platform.isWindowsPhone) {\n        //windows phone does not handle leading or trailing slashes very well :(\n        filesDirectoryPath = storagePath.replace(new RegExp('/', 'g'), '');\n    } else {\n        if (storagePath.lastIndexOf('/') === -1) {\n            filesDirectoryPath = storagePath + '/';\n        }\n    }\n\n    filesDirectoryPath = filesDirectoryPath || storagePath;\n\n    var self = this;\n\n    deviceReadyPromise()\n        .then(function () {\n            self.filesDirectoryPath = filesDirectoryPath;\n            self._requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;\n            self._resolveLocalFileSystemURL = window.resolveLocalFileSystemURL || window.webkitResolveLocalFileSystemURL;\n            self._PERSISTENT_FILE_SYSTEM = window.LocalFileSystem ? window.LocalFileSystem.PERSISTENT : window.PERSISTENT;\n        });\n}\n\nWebFileStore.prototype = {\n    getErrorHandler: function getErrorHandler(callback) {\n        var errorsMap = {\n            '1000': 'NOT_FOUND'\n        };\n\n        _.each(Object.keys(FileError), function (error) {\n            errorsMap[FileError[error]] = error;\n        });\n\n        return function (e) {\n            if (!e.message) {\n                e.message = errorsMap[e.code];\n            }\n\n            callback && callback(e);\n        }\n    },\n\n    getDataDirectory: (function () {\n        var fileSystemRoot;\n\n        return function getDataDirectory() {\n            var self = this;\n\n            return deviceReadyPromise()\n                .then(function () {\n                    var requestFileSystem = function (bytes, success, error) {\n                        self._requestFileSystem.call(window, self._PERSISTENT_FILE_SYSTEM, bytes, function (fileSystem) {\n                            fileSystemRoot = fileSystem.root;\n                            fileSystemRoot.nativeURL = fileSystemRoot.nativeURL || fileSystemRoot.toURL();\n                            success(fileSystemRoot);\n                        }, error);\n                    };\n\n                    return new rsvp.Promise(function (resolve, reject) {\n                        if (fileSystemRoot) {\n                            return resolve(fileSystemRoot);\n                        }\n\n                        if (platform.isDesktop) {\n                            if (navigator && !navigator.webkitPersistentStorage) {\n                                return reject(new EverliveError('FileSystemStorage can be used only with browsers supporting it. Consider using localStorage.'))\n                            }\n\n                            navigator.webkitPersistentStorage.requestQuota(self.options.storage.requestedQuota, function (grantedBytes) {\n                                requestFileSystem(grantedBytes, resolve, reject);\n                            }, reject);\n                        } else {\n                            requestFileSystem(0, resolve, reject);\n                        }\n                    });\n                });\n        };\n    }()),\n\n    getFilesDirectory: function getFilesDirectory() {\n        var self = this;\n        return new rsvp.Promise(function (resolve, reject) {\n            self.getDataDirectory()\n                .then(function (dataDirectory) {\n                    dataDirectory.getDirectory(self.filesDirectoryPath, {\n                        create: true,\n                        exclusive: false\n                    }, resolve, reject);\n                })\n                .catch(reject);\n        });\n    },\n\n    removeFilesDirectory: function () {\n        var self = this;\n\n        return this.getFilesDirectory()\n            .then(function (filesDirectory) {\n                return self._removeFolderWrap(filesDirectory);\n            });\n    },\n\n    removeFile: function (fileEntry) {\n        return new rsvp.Promise(function (resolve, reject) {\n            fileEntry.remove(function () {\n                resolve();\n            }, reject);\n        });\n    },\n\n    readFileAsText: function (fileEntry) {\n        var self = this;\n\n        return new rsvp.Promise(function (resolve, reject) {\n            self.getFilesDirectory().then(function () {\n                fileEntry.file(function (file) {\n                    var reader = new FileReader();\n                    reader.onloadend = function () {\n                        var result = this.result;\n\n                        //windows phone returns an object....\n                        if (typeof this.result === 'object') {\n                            result = JSON.stringify(this.result);\n                        }\n\n                        resolve(result);\n                    };\n                    reader.onerror = reject;\n                    reader.readAsText(file);\n                }, reject);\n            }).catch(reject);\n        });\n    },\n\n    writeTextToFile: function (fileEntry, content) {\n        var self = this;\n\n        return self.getFilesDirectory()\n            .then(function () {\n                return self._getWriterWrap(fileEntry, content);\n            });\n    },\n\n    getFileSize: function (filename, folder) {\n        var self = this;\n\n        return new rsvp.Promise(function (resolve, reject) {\n            var fileLocation = utils.joinPath(folder, filename);\n\n            return self.getFile(fileLocation)\n                .then(function (fileEntry) {\n                    fileEntry.file(function (file) {\n                        resolve(file.size);\n                    }, reject);\n                })\n        });\n    },\n\n    getFile: function (fileName, dirEntry) {\n        return this.getFilesDirectory()\n            .then(function (directoryEntry) {\n                var fileDirectory;\n                if (dirEntry) {\n                    fileDirectory = dirEntry;\n                } else {\n                    fileDirectory = directoryEntry;\n                }\n\n                return new rsvp.Promise(function (resolve, reject) {\n                    fileDirectory.getFile(fileName, {\n                        create: true,\n                        exclusive: false\n                    }, resolve, reject);\n                });\n            });\n    },\n\n    getFileByAbsolutePath: function (path) {\n        var self = this;\n        path = utils.transformPlatformPath(path);\n\n        return new rsvp.Promise(function (resolve, reject) {\n            self._resolveLocalFileSystemURL.call(window, path, resolve, function (err) {\n                if (err && err.code === FileError.NOT_FOUND_ERR) {\n                    return resolve();\n                }\n\n                return reject(err);\n            });\n        });\n    },\n\n    createDirectory: function (directory) {\n        var self = this;\n\n        return this.getFilesDirectory()\n            .then(function (directoryEntry) {\n                return self._getDirectoryWrap(directory, directoryEntry, {\n                    create: true,\n                    exclusive: false\n                });\n            });\n    },\n\n    renameFile: function (directoryEntry, fileEntry, filename) {\n        return new rsvp.Promise(function (resolve, reject) {\n            fileEntry.moveTo(directoryEntry, filename, resolve, reject);\n        });\n    },\n\n    _getDirectoryWrap: function (directory, directoryEntry, options) {\n        return new rsvp.Promise(function (resolve, reject) {\n            directoryEntry.getDirectory(directory, options, resolve, reject);\n        });\n    },\n\n    _removeFolderWrap: function (filesDirEntry) {\n        return new rsvp.Promise(function (resolve, reject) {\n            filesDirEntry.removeRecursively(function () {\n                resolve();\n            }, reject);\n        });\n    },\n\n    _getWriterWrap: function (fileEntry, content) {\n        return new rsvp.Promise(function (resolve, reject) {\n            fileEntry.createWriter(function (fileWriter) {\n                fileWriter.onwriteend = function () {\n                    resolve();\n                };\n\n                fileWriter.onerror = reject;\n\n                var bb = new Blob([content]);\n                fileWriter.write(bb);\n            }, reject);\n        });\n    },\n\n    writeText: function (fileName, text, path) {\n        var self = this;\n        var fileHandle;\n\n        return this.getFilesDirectory()\n            .then(function (directoryEntry) {\n                if (path) {\n                    return self.createDirectory(path);\n                } else {\n                    return directoryEntry;\n                }\n            })\n            .then(function (directoryEntry) {\n                return self.getFile(fileName, directoryEntry);\n            })\n            .then(function (fileEntry) {\n                fileHandle = fileEntry;\n                return self.writeTextToFile(fileEntry, text);\n            })\n            .then(function () {\n                // there  is a difference between the cordova implementation and the standard FileTransfer fileEntry\n                return fileHandle.nativeURL || fileHandle.toURL();\n            });\n    },\n\n    // http://stackoverflow.com/questions/9583363/get-base64-from-imageuri-with-phonegap\n    readFileAsBase64: function (fileEntry) {\n        return new rsvp.Promise(function (resolve, reject) {\n            fileEntry.file(function (file) {\n                var reader = new FileReader();\n                reader.onloadend = function (evt) {\n                    resolve(utils.arrayBufferToBase64(evt.target.result));\n                };\n\n                reader.readAsArrayBuffer(file);\n            }, reject);\n        });\n    }\n};\n\nmodule.exports = WebFileStore;",
    "var buildPromise = require('../utils').buildPromise;\nvar constants = require('../constants');\nvar idField = constants.idField;\nvar DataQuery = require('../query/DataQuery');\nvar RequestOptionsBuilder = require('../query/RequestOptionsBuilder');\nvar rsvp = require('../common').rsvp;\nvar Request = require('../Request');\nvar Everlive = require('../Everlive');\nvar EverliveError = require('../EverliveError').EverliveError;\nvar EverliveErrors = require('../EverliveError').EverliveErrors;\nvar everlivePlatform = require('../everlive.platform').platform;\nvar _ = require('../common')._;\nvar utils = require('../utils');\n\nmodule.exports = (function () {\n    function mergeResultData(data, success) {\n        return function (res, response) {\n            var attrs = res.result;\n            // support for kendo observable array\n            if (_.isArray(data) || typeof data.length === 'number') {\n                _.each(data, function (item, index) {\n                    _.extend(item, attrs[index]);\n                });\n            }\n            else {\n                _.extend(data, attrs);\n            }\n\n            success(res, response);\n        };\n    }\n\n    function mergeUpdateResultData(data, success) {\n        return function (res) {\n            var modifiedAt = res.ModifiedAt;\n            data.ModifiedAt = modifiedAt;\n            success(res);\n        };\n    }\n\n    /**\n     * @class Data\n     * @classdesc A class that provides methods for all CRUD operations to a given {{site.bs}} data type. Covers advanced scenarios with custom headers and special server-side functionality.\n     * @param {object} setup\n     * @param {string} collectionName\n     * @protected\n     */\n    function Data(setup, collectionName, offlineStorage, everlive) {\n        this.setup = setup;\n        this.collectionName = collectionName;\n        this.options = null;\n        this.offlineStorage = offlineStorage;\n        this.everlive = everlive;\n    }\n\n    Data.prototype = {\n        _isOnline: function () {\n            return this.offlineStorage ? this.offlineStorage.isOnline() : true;\n        },\n\n        _getOfflineCreateData: function (query, requestResponse) {\n            var createData;\n            if (_.isArray(query.data)) {\n                createData = [];\n                for (var i = 0; i < query.data.length; i++) {\n                    var objectToCreate = _.extend(query.data[i], requestResponse.result[i]);\n                    createData.push(objectToCreate)\n                }\n            } else {\n                createData = _.extend(query.data, requestResponse.result);\n            }\n\n            return createData;\n        },\n        _applyOffline: function (query, requestResponse) {\n            var autoSyncEnabled = this.offlineStorage && this.offlineStorage.setup.autoSync;\n            if (autoSyncEnabled) {\n                switch (query.operation) {\n                    case DataQuery.operations.read:\n                    case DataQuery.operations.readById:\n                        var syncReadQuery = new DataQuery(_.defaults({\n                            data: requestResponse.result,\n                            isSync: true,\n                            operation: DataQuery.operations.create\n                        }, query));\n                        return this.offlineStorage.processQuery(syncReadQuery);\n                    case DataQuery.operations.create:\n                        var createData = this._getOfflineCreateData(query, requestResponse);\n                        var createQuery = new DataQuery(_.defaults({\n                            data: createData,\n                            isSync: true\n                        }, query));\n                        return this.offlineStorage.processQuery(createQuery);\n                    case DataQuery.operations.update:\n                    case DataQuery.operations.rawUpdate:\n                        query.isSync = true;\n                        query.ModifiedAt = requestResponse.ModifiedAt;\n                        return this.offlineStorage.processQuery(query);\n                    default:\n                        query.isSync = true;\n                        return this.offlineStorage.processQuery(query);\n                }\n            }\n\n            return new rsvp.Promise(function (resolve) {\n                resolve();\n            });\n        },\n\n        _setOption: function (key, value) {\n            this.options = this.options || {};\n            if (_.isObject(value)) {\n                this.options[key] = _.extend({}, this.options[key], value);\n            } else {\n                this.options[key] = value;\n            }\n            return this;\n        },\n\n        /**\n         * Modifies whether the query should be invoked on the offline storage.\n         * @memberOf Data.prototype\n         * @method useOffline\n         * @name useOffline\n         * @param {boolean} [useOffline]\n         * @returns {Data} Returns the same instance of the Data object.\n         */\n        useOffline: function (useOffline) {\n            if (arguments.length !== 1) {\n                throw new Error('A single value is expected in useOffline() query modifier');\n            }\n            return this._setOption('useOffline', useOffline);\n        },\n\n        /**\n         * Does not use the cache when retrieving the data.\n         * Only valid when caching is enabled.\n         * @memberOf Data.prototype\n         * @method ignoreCache\n         * @name ignoreCache\n         * @returns {Data}\n         * */\n        ignoreCache: function () {\n            return this._setOption('ignoreCache', true);\n        },\n\n        /**\n         * Forces the request to get the data from the cache even if the data is already expired.\n         * Only valid when caching is enabled.\n         * @memberOf Data.prototype\n         * @method forceCache\n         * @name forceCache\n         * @returns {Data}\n         * */\n        forceCache: function () {\n            return this._setOption('forceCache', true);\n        },\n\n        /**\n         * Sets cache expiration specifically for the current query.\n         * Only valid when caching is enabled.\n         * @memberOf Data.prototype\n         * @method maxAge\n         * @name maxAge\n         * @param maxAgeInMinutes\n         * @returns {Data}\n         * */\n        maxAge: function (maxAgeInMinutes) {\n            var maxAge = maxAgeInMinutes * 1000 * 60;\n            return this._setOption('maxAge', maxAge);\n        },\n\n        isSync: function (isSync) {\n            if (arguments.length !== 1) {\n                throw new Error('A single value is expected in isSync() query modifier');\n            }\n            return this._setOption('isSync', isSync);\n        },\n\n        /**\n         * Modifies whether the query should invoke the {{@link Authentication.prototype.hasAuthenticationRequirement}}.\n         * Default is false.\n         * Only valid when the authentication module has an onAuthenticationRequired function.\n         * @memberOf Data.prototype\n         * @method skipAuth\n         * @param skipAuth\n         * @returns {Data}\n         * */\n        skipAuth: function (skipAuth) {\n            if (arguments.length !== 1) {\n                throw new Error('A single value is expected in skipAuth() query modifier');\n            }\n            return this._setOption('skipAuth', skipAuth);\n        },\n\n        /**\n         * Modifies whether the query should be applied offline, if the sdk is currenty working online.\n         * Default is true.\n         * Only valid when offlineStorage is enabled.\n         * @memberOf Data.prototype\n         * @method applyOffline\n         * @param applyOffline\n         * @returns {Data}\n         * */\n        applyOffline: function (applyOffline) {\n            if (arguments.length !== 1) {\n                throw new Error('A single value is expected in applyOffline() query modifier');\n            }\n            return this._setOption('applyOffline', applyOffline);\n        },\n\n        /**\n         * Sets additional non-standard HTTP headers in the current data request. See [List of Request Parameters](http://docs.telerik.com/platform/backend-services/rest/apireference/RESTfulAPI/custom_headers) for more information.\n         * @memberOf Data.prototype\n         * @method withHeaders\n         * @param {object} headers Additional headers to be sent with the data request.\n         * @returns {Data}\n         */\n        withHeaders: function (headers) {\n            return this._setOption('headers', headers);\n        },\n        /**\n         * Sets an expand expression to be used in the data request. This allows you to retrieve complex data sets using a single query based on relations between data types.\n         * @memberOf Data.prototype\n         * @method expand\n         * @param {object} expandExpression An [expand expression](http://docs.telerik.com/platform/backend-services/rest/data/relations/relations-defining) definition.\n         * @returns {Data}\n         */\n        expand: function (expandExpression) {\n            var expandHeader = {\n                'X-Everlive-Expand': JSON.stringify(expandExpression)\n            };\n            return this.withHeaders(expandHeader);\n        },\n\n        _applyQueryOffline: function (query) {\n            var self = this;\n\n            if (!query.applyOffline) {\n                query.onError.call(this, new EverliveError('The applyOffline must be false when working offline.'));\n            } else {\n                self.offlineStorage.processQuery(query)\n                    .then(function () {\n                        query.onSuccess.apply(this, arguments);\n                    }, function (err) {\n                        if (!err.code) {\n                            err = new EverliveError(err.message, EverliveErrors.generalDatabaseError.code);\n                        }\n                        query.onError.call(this, err);\n                    });\n            }\n        },\n\n        _sendRequest: function (query, online) {\n            var self = this;\n\n            var originalSuccess = query.onSuccess;\n            query.onSuccess = function () {\n                var args = arguments;\n                var data = args[0];\n\n                if (query.applyOffline) {\n                    return self._applyOffline(query, data)\n                        .then(function () {\n                            originalSuccess.apply(this, args);\n                        }, function (err) {\n                            if (online && err.code === EverliveErrors.operationNotSupportedOffline.code) {\n                                originalSuccess.apply(this, args);\n                            } else {\n                                query.onError.apply(this, arguments);\n                            }\n                        });\n                } else {\n                    return originalSuccess.apply(this, args);\n                }\n            };\n\n            var getRequestOptionsFromQuery = RequestOptionsBuilder[query.operation];\n            var requestOptions = getRequestOptionsFromQuery(query);\n            this._setAdditionalHeaders(query, requestOptions);\n            var request = new Request(this.setup, requestOptions);\n            request.send();\n        },\n\n        _applyQueryOnline: function (query) {\n            if (query.useCache) {\n                this.everlive.cache._cacheDataQuery(query);\n            } else {\n                this._sendRequest(query, true);\n            }\n        },\n\n        _setAdditionalHeaders: function (query, requestOptions) {\n            if (query.isSync) {\n                requestOptions.headers[constants.Headers.sync] = true;\n            }\n\n            var sdkHeaderValue = {\n                sdk: 'js',\n                platform: everlivePlatform\n            };\n\n            requestOptions.headers[constants.Headers.sdk] = JSON.stringify(sdkHeaderValue);\n        },\n\n        processDataQuery: function (query) {\n            var self = this;\n\n            var offlineStorageEnabled = this.everlive._isOfflineStorageEnabled();\n            query.useOffline = offlineStorageEnabled ? !this.everlive.isOnline() : false;\n\n            if (this.options) {\n                query = _.defaults(this.options, query);\n            }\n            var isCachingEnabled = (this.everlive.setup.caching === true || (this.everlive.setup.caching && this.everlive.setup.caching.enabled));\n            var isSupportedInOffline = utils.isQuerySupportedOffline(query);\n\n            query.useCache = isCachingEnabled && !query.isSync && isSupportedInOffline;\n            query.applyOffline = query.applyOffline !== undefined ? query.applyOffline : offlineStorageEnabled || query.useCache;\n\n            if (!query.useCache && query.forceCache) {\n                query.onError.call(this, new EverliveError(EverliveErrors.cannotForceCacheWhenDisabled));\n            }\n\n            this.options = null;\n            if (!query.skipAuth && this.everlive.authentication && this.everlive.authentication.isAuthenticationInProgress()) {\n                query.onError = _.wrap(query.onError, function (errorFunc, err) {\n                    if (err.code === EverliveErrors.invalidToken.code || err.code === EverliveErrors.expiredToken.code) {\n                        var whenAuthenticatedPromise = self.everlive.authentication._ensureAuthentication();\n                        if (!query.noRetry) {\n                            whenAuthenticatedPromise.then(function () {\n                                return self.processDataQuery(query);\n                            });\n                        }\n                    } else {\n                        errorFunc.call(self, err);\n                    }\n                });\n\n                //if we are currently authenticating, queue the data query after we have logged in\n                if (self.everlive.authentication.isAuthenticating()) {\n                    var whenAuthenticatedPromise = self.everlive.authentication._ensureAuthentication();\n                    if (!query.noRetry) {\n                        whenAuthenticatedPromise.then(function () {\n                            return self.processDataQuery(query);\n                        });\n                    }\n\n                    return whenAuthenticatedPromise;\n                }\n            }\n\n            if ((!query.isSync && this.offlineStorage && this.offlineStorage.isSynchronizing())) {\n                query.onError.call(this, new EverliveError(EverliveErrors.syncInProgress));\n            } else if (query.useOffline) {\n                this._applyQueryOffline(query);\n            } else {\n                this._applyQueryOnline(query);\n            }\n        },\n        // TODO implement options: { requestSettings: { executeServerCode: false } }. power fields queries could be added to that options argument\n        /**\n         * Gets all data items that match the filter. This allows you to retrieve a subset of the items based on various filtering criteria.\n         * @memberOf Data.prototype\n         * @method get\n         * @name get\n         * @param {object|null} filter A [filter expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) definition.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Gets all data items that match the filter. This allows you to retrieve a subset of the items based on various filtering criteria.\n         * @memberOf Data.prototype\n         * @method get\n         * @name get\n         * @param {object|null} filter A [filter expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) definition.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        get: function (filter, success, error) {\n            var self = this;\n\n            return buildPromise(function (successCb, errorCb) {\n                var dataQuery = new DataQuery({\n                    operation: DataQuery.operations.read,\n                    collectionName: self.collectionName,\n                    filter: filter,\n                    onSuccess: successCb,\n                    onError: errorCb\n                });\n\n                return self.processDataQuery(dataQuery);\n            }, success, error);\n        },\n        // TODO handle options\n        // TODO think to pass the id as a filter\n\n        /**\n         * Gets a data item by ID.\n         * @memberOf Data.prototype\n         * @method getById\n         * @name getById\n         * @param {string} id ID of the item.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Gets an item by ID.\n         * @memberOf Data.prototype\n         * @method getById\n         * @name getById\n         * @param {string} id ID of the item.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         * */\n        getById: function (id, success, error) {\n            var self = this;\n\n            return buildPromise(function (successCb, errorCb) {\n                var dataQuery = new DataQuery({\n                    operation: DataQuery.operations.readById,\n                    collectionName: self.collectionName,\n                    parse: Request.parsers.single,\n                    additionalOptions: {\n                        id: id\n                    },\n                    onSuccess: successCb,\n                    onError: errorCb\n                });\n\n\n                return self.processDataQuery(dataQuery);\n            }, success, error);\n        },\n\n        /**\n         * Gets the count of the data items that match the filter.\n         * @memberOf Data.prototype\n         * @method count\n         * @name count\n         * @param {object|null} filter A [filter expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) definition.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Gets the count of the items that match the filter.\n         * @memberOf Data.prototype\n         * @method count\n         * @name count\n         * @param {object|null} filter A [filter expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) definition.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        count: function (filter, success, error) {\n            var self = this;\n\n            return buildPromise(function (sucessCb, errorCb) {\n                var dataQuery = new DataQuery({\n                    operation: DataQuery.operations.count,\n                    collectionName: self.collectionName,\n                    filter: filter,\n                    parse: Request.parsers.single,\n                    onSuccess: sucessCb,\n                    onError: errorCb\n                });\n                return self.processDataQuery(dataQuery);\n            }, success, error);\n        },\n\n        /**\n         * Creates a data item.\n         * @memberOf Data.prototype\n         * @method create\n         * @name create\n         * @param {object|object[]} data Item or items that will be created.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Creates an item.\n         * @memberOf Data.prototype\n         * @method create\n         * @name create\n         * @param {object|object[]} data The item or items that will be created.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        create: function (data, success, error) {\n            var self = this;\n\n            return buildPromise(function (success, error) {\n                var dataQuery = new DataQuery({\n                    operation: DataQuery.operations.create,\n                    collectionName: self.collectionName,\n                    data: data,\n                    parse: Request.parsers.single,\n                    onSuccess: mergeResultData(data, success),\n                    onError: error\n                });\n\n\n                return self.processDataQuery(dataQuery);\n            }, success, error);\n        },\n        /**\n         * Updates all objects that match a filter with the specified update expression.\n         * @memberOf Data.prototype\n         * @method rawUpdate\n         * @name rawUpdate\n         * @param {object} updateObject Update object that contains the new values.\n         * @param {object|null} filter A [filter expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) definition.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Updates all objects that match a filter with the specified update expression.\n         * @memberOf Data.prototype\n         * @method rawUpdate\n         * @name rawUpdate\n         * @param {object} updateObject Update object that contains the new values.\n         * @param {object|null} filter A [filter expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) definition.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        /**\n         * Updates an object by ID with the specified update expression.\n         * @memberOf Data.prototype\n         * @method rawUpdate\n         * @name rawUpdate\n         * @param {object} updatedObject Updated object that contains the new values.\n         * @param {string} id The ID of the item.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Updates an object by ID with the specified update expression.\n         * @memberOf Data.prototype\n         * @method rawUpdate\n         * @name rawUpdate\n         * @param {object} updateObject Updated object that contains the new values.\n         * @param {string} id The ID of the item.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        rawUpdate: function (attrs, filter, success, error) {\n            var self = this;\n\n            return buildPromise(function (success, error) {\n                var dataQuery = new DataQuery({\n                    operation: DataQuery.operations.rawUpdate,\n                    collectionName: self.collectionName,\n                    filter: filter,\n                    data: attrs,\n                    onSuccess: success,\n                    onError: error\n                });\n                return self.processDataQuery(dataQuery);\n            }, success, error);\n        },\n        // TODO: Check if there is a case in which replace = true is passed to this function\n        _update: function (attrs, filter, single, replace, success, error) {\n            var self = this;\n\n            return buildPromise(function (success, error) {\n                var data = {};\n                data[replace ? '$replace' : '$set'] = attrs;\n\n                // if the update is for a single item - merge the update result and add the ModifiedAt field to the result\n                var onSuccess = single ? mergeUpdateResultData(attrs, success) : success;\n\n                var dataQuery = new DataQuery({\n                    operation: DataQuery.operations.update,\n                    collectionName: self.collectionName,\n                    parse: Request.parsers.update,\n                    filter: filter,\n                    data: data,\n                    additionalOptions: {\n                        id: single ? attrs[idField] : undefined\n                    },\n                    onSuccess: onSuccess,\n                    onError: error\n                });\n                return self.processDataQuery(dataQuery);\n            }, success, error);\n        },\n\n        /**\n         * Updates a single data item. This operation takes an object that specifies both the data item to be updated and the updated values.\n         * @memberOf Data.prototype\n         * @method updateSingle\n         * @name updateSingle\n         * @param {object} item The item that will be updated. Note: the ID property of the item will be used to determine which item will be updated.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Updates the provided item.\n         * @memberOf Data.prototype\n         * @method updateSingle\n         * @name updateSingle\n         * @param {object} model The item that will be updated. Note: the ID property of the item will be used to determine which item will be updated.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        updateSingle: function (model, success, error) {\n            return this._update(model, null, true, false, success, error);\n        },\n\n        /**\n         * Updates all items that match a filter with the specified update object.\n         * @memberOf Data.prototype\n         * @method update\n         * @name update\n         * @param {object} updateObject The update object.\n         * @param {object|null} filter A [filter expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) definition.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Updates all items that match the filter with the specified update object.\n         * @memberOf Data.prototype\n         * @method update\n         * @name update\n         * @param {object} model The update object.\n         * @param {object|null} filter A [filter expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) definition.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        update: function (model, filter, success, error) {\n            return this._update(model, filter, false, false, success, error);\n        },\n        _destroy: function (attrs, filter, single, success, error) {\n            var self = this;\n\n            return buildPromise(function (success, error) {\n                var dataQuery = new DataQuery({\n                    operation: single ? DataQuery.operations.removeSingle : DataQuery.operations.remove,\n                    collectionName: self.collectionName,\n                    filter: filter,\n                    onSuccess: success,\n                    onError: error,\n                    additionalOptions: {\n                        id: single ? attrs[idField] : undefined\n                    }\n                });\n                return self.processDataQuery(dataQuery);\n            }, success, error);\n        },\n\n        /**\n         * Deletes a single data item by ID.\n         * @memberOf Data.prototype\n         * @method destroySingle\n         * @name destroySingle\n         * @param {object} item Object containing the item ID to be deleted.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Deletes a single data item by ID.\n         * @memberOf Data.prototype\n         * @method destroySingle\n         * @name destroySingle\n         * @param {object} model Object containing the item ID to be deleted.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        destroySingle: function (model, success, error) {\n            return this._destroy(model, null, true, success, error);\n        },\n\n        /**\n         * Deletes all data items that match a filter.\n         * @memberOf Data.prototype\n         * @method destroy\n         * @name destroy\n         * @param {object|null} filter A [filter expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) definition.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Deletes all items that match the filter.\n         * @memberOf Data.prototype\n         * @method destroy\n         * @name destroy\n         * @param {object|null} filter A [filter expression](http://docs.telerik.com/platform/backend-services/rest/queries/queries-filtering) definition.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        destroy: function (filter, success, error) {\n            return this._destroy(null, filter, false, success, error);\n        },\n\n        /**\n         * Sets the Access Control List (ACL) of a specified data item.\n         * @memberOf Data.prototype\n         * @method setAcl\n         * @name setAcl\n         * @param {object} acl The acl object.\n         * @param {object} item The item whose ACL will be updated. Note: the ID property of the item will be used to determine which item will be updated.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Sets the Access Control List (ACL) of a specified data item.\n         * @memberOf Data.prototype\n         * @method setAcl\n         * @name setAcl\n         * @param {object} acl The acl object.\n         * @param {object} item The item whose ACL will be updated. Note: the ID property of the item will be used to determine which item will be updated.\n         * @param {object} operationParameters An object that accepts operation parameters.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        /**\n         * Sets the Access Control List (ACL) of a specified data item.\n         * @memberOf Data.prototype\n         * @method setAcl\n         * @name setAcl\n         * @param {object} acl The acl object.\n         * @param {string} id The ID of the item.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Sets the Access Control List (ACL) of an item with a specified ID.\n         * @memberOf Data.prototype\n         * @method setAcl\n         * @name setAcl\n         * @param {object} acl The acl object.\n         * @param {string} id The ID of the item.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        setAcl: function (acl, filter, success, error) {\n            var self = this;\n\n            return buildPromise(function (success, error) {\n                var dataQuery = new DataQuery({\n                    operation: DataQuery.operations.setAcl,\n                    collectionName: self.collectionName,\n                    parse: Request.parsers.single,\n                    filter: filter,\n                    additionalOptions: {\n                        acl: acl\n                    },\n                    onSuccess: success,\n                    onError: error\n                });\n\n                return self.processDataQuery(dataQuery);\n            }, success, error);\n        },\n\n        /**\n         * Sets the owner of the specified data item.\n         * @memberOf Data.prototype\n         * @method setOwner\n         * @name setOwner\n         * @param {string} acl The new owner ID.\n         * @param {object} item The item whose owner will be updated. Note: the ID property of the item will be used to determine which item will be updated.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Sets the owner of the specified data item.\n         * @memberOf Data.prototype\n         * @method setOwner\n         * @name setOwner\n         * @param {string} acl The new owner ID.\n         * @param {object} item The item whose owner will be updated. Note: the ID property of the item will be used to determine which item will be updated.\n         * @param {object} operationParameters An object that accepts operation parameters.\n         * @param {Function} [operationParameters.success] A success callback.\n         * @param {Function} [operationParameters.error] An error callback.\n         * @param {Boolean} [operationParameters.useOffline] Whether to invoke the operation on the offline storage. Default is based on the current mode of the Everlive instance.\n         * @param {Boolean} [operationParameters.applyOffline=true] If working online, whether to also apply the operation on the local storage.\n         */\n        /**\n         * Sets the owner of the specified data item.\n         * @memberOf Data.prototype\n         * @method setOwner\n         * @name setOwner\n         * @param {string} ownerId The new owner ID.\n         * @param {string} id The ID of the item.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Sets the owner of the specified data item.\n         * @memberOf Data.prototype\n         * @method setOwner\n         * @name setOwner\n         * @param {string} ownerId The new owner ID.\n         * @param {string} id The ID of the item.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        setOwner: function (ownerId, filter, success, error) {\n            var self = this;\n\n            return buildPromise(function (success, error) {\n                var dataQuery = new DataQuery({\n                    operation: DataQuery.operations.setOwner,\n                    collectionName: self.collectionName,\n                    filter: filter,\n                    data: {\n                        Owner: ownerId\n                    },\n                    onSuccess: success,\n                    onError: error\n                });\n                return self.processDataQuery(dataQuery);\n            }, success, error);\n        },\n        /**\n         * Saves the provided data item. This operation will create or update the item depending on whether it is new or existing.\n         * @memberOf Data.prototype\n         * @method save\n         * @name save\n         * @param {object} item An object containing the item that is being saved.\n         * @returns {Promise} The promise for the request.\n         */\n        /**\n         * Saves the provided data item. This operation will create or update the item depending on whether it is new or existing.\n         * @memberOf Data.prototype\n         * @method save\n         * @name save\n         * @param {object} model An object containing the item that is being saved.\n         * @param {Function} [success] A success callback.\n         * @param {Function} [error] An error callback.\n         */\n        save: function (model, success, error) {\n            var self = this;\n            var isNew = this.isNew(model);\n\n            return buildPromise(function (success, error) {\n                function saveSuccess(res) {\n                    res.type = isNew ? 'create' : 'update';\n                    success(res);\n                }\n\n                function saveError(err) {\n                    err.type = isNew ? 'create' : 'update';\n                    error(err);\n                }\n\n                if (isNew) {\n                    return self.create(model, saveSuccess, saveError);\n                } else {\n                    return self.updateSingle(model, saveSuccess, saveError);\n                }\n            }, success, error);\n        },\n        /**\n         * Checks if the specified data item is new or not.\n         * @memberOf Data.prototype\n         * @method isNew\n         * @param model Item to check.\n         * @returns {boolean}\n         */\n        isNew: function (model) {\n            return typeof model[idField] === 'undefined';\n        }\n    };\n\n    return Data;\n}());\n",
    "/**\n * @class Files\n * @protected\n * @extends Data\n */\n\nvar buildPromise = require('../utils').buildPromise;\nvar DataQuery = require('../query/DataQuery');\nvar Request = require('../Request');\nvar utils = require('../utils');\n\nmodule.exports.addFilesFunctions = function addFilesFunctions(ns) {\n    /**\n     * Get a URL that can be used as an endpoint for uploading a file. It is specific to each {{site.TelerikBackendServices}} app.\n     * @memberof Files.prototype\n     * @method getUploadUrl\n     * @returns {string}\n     */\n    ns.getUploadUrl = function () {\n        return utils.buildUrl(this.setup) + this.collectionName;\n    };\n\n    /**\n     * Get the download URL for a file.\n     * @memberof Files.prototype\n     * @method getDownloadUrl\n     * @deprecated\n     * @see {@link Files.getDownloadUrlById}\n     * @param {string} fileId The ID of the file.\n     * @returns {string} url The download URL.\n     */\n    ns.getDownloadUrl = function (fileId) {\n        return utils.buildUrl(this.setup) + this.collectionName + '/' + fileId + '/Download';\n    };\n\n    ns._getUpdateUrl = function (fileId) {\n        return this.collectionName + '/' + fileId + '/Content';\n    };\n\n    /**\n     * Get a URL that can be used as an endpoint for updating a file. It is specific to each {{site.TelerikBackendServices}} app.\n     * @memberof Files.prototype\n     * @method getUpdateUrl\n     * @param {string} fileId The ID of the file.\n     * @returns {string} url The update URL.\n     */\n    ns.getUpdateUrl = function (fileId) {\n        return utils.buildUrl(this.setup) + this._getUpdateUrl(fileId);\n    };\n\n    /**\n     * Updates a file's content\n     * @memberof Files.prototype\n     * @method updateContent\n     * @param {string} fileId File ID.\n     * @param {Object} file The file metadata and the base64 encoded file content.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     * @returns {Promise} The promise for the request\n     */\n    ns.updateContent = function (fileId, file, success, error) {\n        var self = this;\n\n        return buildPromise(function (success, error) {\n            var dataQuery = new DataQuery({\n                operation: DataQuery.operations.filesUpdateContent,\n                // the passed file content is base64 encoded\n                data: file,\n                collectionName: self.collectionName,\n                additionalOptions: {\n                    id: fileId\n                },\n                onSuccess: success,\n                onError: error\n            });\n\n\n            return self.processDataQuery(dataQuery);\n        }, success, error);\n    };\n\n    /**\n     * Gets the download URL for a file by ID.\n     * @memberof Files.prototype\n     * @method getDownloadUrlById\n     * @param {string} fileId File ID.\n     * @returns {Promise} The promise for the request\n     */\n    /**\n     * Gets the download URL for a file by ID.\n     * @memberof Files.prototype\n     * @method getDownloadUrlById\n     * @param {string} fileId File ID.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.getDownloadUrlById = function (fileId, success, error) {\n        var self = this;\n\n        return buildPromise(function (success, error) {\n            var dataQuery = new DataQuery({\n                operation: DataQuery.operations.filesGetDownloadUrlById,\n                collectionName: self.collectionName,\n                additionalOptions: {\n                    id: fileId\n                },\n                parse: Request.parsers.single,\n                onSuccess: function (data) {\n                    success(data.result.Uri);\n                },\n                onError: error\n            });\n\n\n            return self.processDataQuery(dataQuery);\n        }, success, error);\n    };\n\n    /**\n     * Downloads a file to the device's file system. Wraps the Apache Cordova \"download()\" [FileTransfer](http://cordova.apache.org/docs/en/2.7.0/cordova_file_file.md.html#FileTransfer) method. Note that the signatures of these methods differ.\n     * @memberof Files.prototype\n     * @method download\n     * @param {string} fileToDownload A Backend Services File ID.\n     * @param {string} pathOnDevice An Apache Cordova FileSystem URL representing the local path on the device where the downloaded file will be saved. Maps to the \"target\" FileTransfer plugin parameter.\n     * @param {object} [options] Additional request options. Maps to the \"options\" FileTransfer plugin parameter.\n     * @param {object} [options.headers] A JSON object containing headers to send along with the request.\n     * @param {boolean} [trustAllHosts=false] Whether to accept all security certificates including self-signed certificates. Maps to the \"trustAllHosts\" FileTransfer plugin parameter.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Downloads a file to the device's file system. Wraps the Apache Cordova \"download()\" [FileTransfer](http://cordova.apache.org/docs/en/2.7.0/cordova_file_file.md.html#FileTransfer) method. Note that the signatures of these methods differ.\n     * @memberof Files.prototype\n     * @method download\n     * @param {string} fileToDownload A Backend Services File ID.\n     * @param {string} pathOnDevice An Apache Cordova FileSystem URL representing the local path on the device where the downloaded file will be saved. Maps to the \"target\" FileTransfer plugin parameter.\n     * @param {object} [options] Additional request options. Maps to the \"options\" FileTransfer plugin parameter.\n     * @param {object} [options.headers] A JSON object containing headers to send along with the request.\n     * @param {boolean} [trustAllHosts=false] Whether to accept all security certificates including self-signed certificates. Maps to the \"trustAllHosts\" FileTransfer plugin parameter.\n     * @param {Function} [success] A success callback that is passed an Apache Cordova [FileEntry](https://cordova.apache.org/docs/en/3.3.0/cordova_file_file.md.html#FileEntry) object. Maps to the \"successCallback\" FileTransfer plugin parameter.\n     * @param {Function} [error] An error callback that is passed an Apache Cordova [FileTransferError](https://github.com/apache/cordova-plugin-file-transfer#filetransfererror) object. Maps to the \"errorCallback\" FileTransfer plugin parameter.\n     */\n    ns.download = function (url, localPath, options, trustAllHosts, success, error) {\n        var self = this;\n\n        return buildPromise(function (success, error) {\n            if (!trustAllHosts) {\n                trustAllHosts = false;\n            }\n\n            var headers = options && options.headers ? options.headers : {};\n\n            var fileTransfer = new FileTransfer();\n            self.withHeaders(headers)\n                .getById(url)\n                .then(function (res) {\n                    var file = res.result;\n                    url = file.Uri;\n                    fileTransfer.download(url, localPath, success, error, trustAllHosts, options);\n                }, error);\n        }, success, error);\n    };\n\n    /**\n     * Uploads a file from the device's file system to Backend Services. Wraps the Apache Cordova \"upload()\" [FileTransfer](http://cordova.apache.org/docs/en/2.7.0/cordova_file_file.md.html#FileTransfer) method. Note that the signatures of these methods differ.\n     * @memberof Files.prototype\n     * @method upload\n     * @param {string} fileToUpload An Apache Cordova FileSystem URL representing the full path to the file on the device.\n     * @param {object} [options] Additional request options. Maps to the \"options\" FileTransfer plugin parameter.\n     * @param {string} [options.fileKey] The name of the form element. Defaults to 'file' in the FileTransfer plugin parameter.\n     * @param {string} [options.fileName] The file name to use when uploading the file. Defaults to 'image.jpg' in the FileTransfer plugin.\n     * @param {string} [options.httpMethod] The HTTP method to use, either POST or PUT. Defaults to 'POST' in the FileTransfer plugin parameter.\n     * @param {string} [options.mimeType] The mime type of the uploaded data. Defaults to 'image/jpeg' in the FileTransfer plugin parameter.\n     * @param {object} [options.params] A set of optional key/value pairs to pass in the HTTP request.\n     * @param {boolean} [options.chunkedMode] Whether to upload the data in chunked streaming mode. Defaults to 'true' in the FileTransfer plugin parameter.\n     * @param {object} [options.headers] A JSON object for the headers to send along with the request.\n     * @param {boolean} [trustAllHosts=false] Whether to accept all security certificates including self-signed certificates. Maps to the \"trustAllHosts\" FileTransfer plugin parameter.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Uploads a file from the device's file system to Backend Services. Wraps the Apache Cordova \"upload()\" [FileTransfer](http://cordova.apache.org/docs/en/2.7.0/cordova_file_file.md.html#FileTransfer) method. Note that the signatures of these methods differ.\n     * @memberof Files.prototype\n     * @method upload\n     * @param {string} fileToUpload An Apache Cordova FileSystem URL representing the full path to the file on the device.\n     * @param {object} [options] Additional request options. Maps to the \"options\" FileTransfer plugin parameter.\n     * @param {string} [options.fileKey] The name of the form element. Defaults to 'file' in the FileTransfer plugin parameter.\n     * @param {string} [options.fileName] The file name to use when uploading the file. Defaults to 'image.jpg' in the FileTransfer plugin parameter.\n     * @param {string} [options.httpMethod] The HTTP method to use, either POST or PUT. Defaults to 'POST' in the FileTransfer plugin parameter.\n     * @param {string} [options.mimeType] The mime type of the uploaded data. Defaults to 'image/jpeg' in the FileTransfer plugin parameter.\n     * @param {object} [options.params] A set of optional key/value pairs to pass in the HTTP request.\n     * @param {boolean} [options.chunkedMode] Whether to upload the data in chunked streaming mode. Defaults to 'true' in the FileTransfer plugin parameter.\n     * @param {object} [options.headers] A JSON object for the headers to send along with the request.\n     * @param {boolean} [trustAllHosts=false] Whether to accept all security certificates including self-signed certificates. Maps to the \"trustAllHosts\" FileTransfer plugin parameter.\n     * @param {Function} [success] A success callback that is passed an Apache Cordova [FileUploadResult](https://github.com/apache/cordova-plugin-file-transfer#fileuploadresult) object. Maps to the \"successCallback\" FileTransfer plugin parameter.\n     * @param {Function} [error] An error callback that is passed an Apache Cordova [FileTransferError](https://github.com/apache/cordova-plugin-file-transfer#filetransfererror) object. Maps to the \"errorCallback\" FileTransfer plugin parameter.\n     */\n    ns.upload = function (localPath, options, trustAllHosts, success, error) {\n        var url = this.getUploadUrl();\n        return buildPromise(function (success, error) {\n            if (!trustAllHosts) {\n                trustAllHosts = false;\n            }\n            var fileTransfer = new FileTransfer();\n            var uri = encodeURI(url);\n            fileTransfer.upload(localPath, uri, success, error, options, trustAllHosts);\n        }, success, error);\n    }\n};",
    "/**\n * @class Users\n * @extends Data\n * @protected\n */\n\nvar utils = require('../utils');\nvar buildPromise = utils.buildPromise;\nvar guardUnset = utils.guardUnset;\nvar DataQuery = require('../query/DataQuery');\nvar Request = require('../Request');\nvar _ = require('../common')._;\nvar EverliveError = require('../EverliveError').EverliveError;\nvar EverliveErrors = require('../EverliveError').EverliveErrors;\n\nmodule.exports.addUsersFunctions = function addUsersFunctions(ns, everlive) {\n\n    /**\n     * Registers a new user with username and password.\n     * @memberOf Users.prototype\n     * @method register\n     * @name register\n     * @param {string} username The new user's username.\n     * @param {string} password The new user's password.\n     * @param {object} userInfo Additional information for the user (ex. DisplayName, Email, etc.)\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Registers a new user using a username and a password.\n     * @memberOf Users.prototype\n     * @method register\n     * @name register\n     * @param {string} username The new user's username.\n     * @param {string} password The new user's password.\n     * @param attrs\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.register = function (username, password, attrs, success, error) {\n        guardUnset(username, 'username');\n        guardUnset(password, 'password');\n        var user = {\n            Username: username,\n            Password: password\n        };\n        _.extend(user, attrs);\n        return this.create(user, success, error);\n    };\n\n    /**\n     * Gets information about the user that is currently authenticated to the {{site.bs}} JavaScript SDK. The success function is called with {@link Users.ResultTypes.curentUserResult}.\n     * @memberOf Users.prototype\n     * @method currentUser\n     * @name currentUser\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Gets information about the user that is currently authenticated to the {{site.bs}} JavaScript SDK. The success function is called with {@link Users.ResultTypes.curentUserResult}.\n     * @memberOf Users.prototype\n     * @method currentUser\n     * @name currentUser\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.currentUser = function (success, error) {\n        var self = this;\n        var id = self.everlive._isOfflineStorageEnabled() && self.everlive.isOffline() ? self.everlive.setup.principalId : 'me';\n        return buildPromise(function (success, error) {\n            if (id === 'me' && !self.everlive.setup.token && !self.everlive.setup.masterKey || !id) {\n                return success({result: null});\n            }\n\n            self.getById(id).then(function (res) {\n                    if (typeof res.result !== 'undefined') {\n                        success({result: res.result});\n                    } else {\n                        success({result: null});\n                    }\n                },\n                function (err) {\n                    if (self.everlive.authentication && self.everlive.authentication.isAuthenticationInProgress()) {\n                        success({result: null});\n                    } else if (err.code === 601) { // invalid request, i.e. the access token is missing\n                        success({result: null});\n                    } else if (err.code === 801) {\n                        error(new EverliveError(EverliveErrors.invalidToken));\n                    } else {\n                        error(err);\n                    }\n                }\n            );\n        }, success, error);\n    };\n\n    /**\n     * Changes the password of a user.\n     * @memberOf Users.prototype\n     * @method changePassword\n     * @name changePassword\n     * @param {string} username The user's username.\n     * @param {string} password The user's password.\n     * @param {string} newPassword The user's new password.\n     * @param {boolean} keepTokens If set to true, the user tokens will be preserved even after the password change.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Changes the password of a user.\n     * @memberOf Users.prototype\n     * @method changePassword\n     * @name changePassword\n     * @param {string} username The user's username.\n     * @param {string} password The user's password.\n     * @param {string} newPassword The user's new password.\n     * @param {boolean} keepTokens If set to true, the user tokens will be preserved even after the password change.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.changePassword = function (username, password, newPassword, keepTokens, success, error) {\n        var self = this;\n        return buildPromise(function (success, error) {\n            success = _.wrap(success, function (success, data) {\n                if (data && data.result) {\n                    if (!keepTokens) {\n                        ns.clearAuthorization();\n                    }\n                }\n                return success(data);\n            });\n\n            var dataQuery = new DataQuery({\n                operation: DataQuery.operations.userChangePassword,\n                collectionName: self.collectionName,\n                data: {\n                    Username: username,\n                    Password: password,\n                    NewPassword: newPassword\n                },\n                additionalOptions: {\n                    keepTokens: keepTokens\n                },\n                skipAuth: true,\n                onSuccess: success,\n                onError: error\n            });\n\n            return self.processDataQuery(dataQuery)\n        }, success, error)\n    };\n\n    /**\n     *\n     * Logs in a user using a username and a password to the current {{site.bs}} JavaScript SDK instance. All requests initiated by the current {{site.bs}} JavaScript SDK instance will be authenticated with that user's credentials.\n     * @memberOf Users.prototype\n     * @method login\n     * @name login\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.login}\n     * @param {string} username The user's username.\n     * @param {string} password The user's password.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Logs in a user using a username and a password to the current {{site.bs}} JavaScript SDK instance. All requests initiated by the current {{site.bs}} JavaScript SDK instance will be authenticated with that user's credentials.\n     * @memberOf Users.prototype\n     * @method login\n     * @name login\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.login}\n     * @param {string} username The user's username.\n     * @param {string} password The user's password.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.login = function (username, password, success, error) {\n        return everlive.authentication.login(username, password, success, error);\n\n    };\n\n    /**\n     * Log out the user who is currently logged in.\n     * @memberOf Users.prototype\n     * @method logout\n     * @name logout\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.logout}\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Log out the user who is currently logged in.\n     * @memberOf Users.prototype\n     * @method logout\n     * @name logout\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.logout}\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.logout = function (success, error) {\n        return everlive.authentication.logout(success, error);\n\n    };\n\n    /**\n     * Log in a user using an Facebook access token.\n     * @memberOf Users.prototype\n     * @method loginWithFacebook\n     * @name loginWithFacebook\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.loginWithFacebook}\n     * @param {string} accessToken Facebook access token.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Log in a user using an Facebook access token.\n     * @memberOf Users.prototype\n     * @method loginWithFacebook\n     * @name loginWithFacebook\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.loginWithFacebook}\n     * @param {string} accessToken Facebook access token.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.loginWithFacebook = function (accessToken, success, error) {\n        return everlive.authentication.loginWithFacebook(accessToken, success, error);\n    };\n\n    /**\n     * Links a {{site.TelerikBackendServices}} user account to a Facebook access token.\n     * @memberOf Users.prototype\n     * @method linkWithFacebook\n     * @name linkWithFacebook\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {string} accessToken The Facebook access token that will be linked to the {{site.bs}} user account.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Links a Backend Services user with a Facebook access token.\n     * @memberOf Users.prototype\n     * @method linkWithFacebook\n     * @name linkWithFacebook\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {string} accessToken The Facebook access token that will be linked to the {{site.bs}} user account.         * @param {Function} [success] a success callback.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.linkWithFacebook = function (userId, accessToken, success, error) {\n        var identity = {\n            Provider: 'Facebook',\n            Token: accessToken\n        };\n        return ns._linkWithProvider(identity, userId, success, error);\n    };\n\n    /**\n     * Unlinks a {{site.TelerikBackendServices}} user account from the Facebook token that it is linked to.\n     * @memberOf Users.prototype\n     * @method unlinkFromFacebook\n     * @name unlinkFromFacebook\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Unlinks a {{site.TelerikBackendServices}} user account from the Facebook token that it is linked to.\n     * @memberOf Users.prototype\n     * @method unlinkFromFacebook\n     * @name unlinkFromFacebook\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.unlinkFromFacebook = function (userId, success, error) {\n        return ns._unlinkFromProvider('Facebook', userId, success, error);\n    };\n\n    /**\n     * Log in a user using an ADFS access token.\n     * @memberOf Users.prototype\n     * @method loginWithADFS\n     * @name loginWithADFS\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.loginWithADFS}\n     * @param {string} accessToken ADFS access token.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Log in a user using an ADFS access token.\n     * @memberOf Users.prototype\n     * @method loginWithADFS\n     * @name loginWithADFS\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.loginWithADFS}\n     * @param {string} accessToken ADFS access token.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.loginWithADFS = function (accessToken, success, error) {\n        return everlive.authentication.loginWithADFS(accessToken, success, error);\n    };\n\n    /**\n     * Links a {{site.TelerikBackendServices}} user account to an ADFS access token.\n     * @memberOf Users.prototype\n     * @method linkWithADFS\n     * @name linkWithADFS\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {string} accessToken The ADFS access token that will be linked to the {{site.bs}} user account.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Links a {{site.TelerikBackendServices}} user account to an ADFS access token.\n     * @memberOf Users.prototype\n     * @method linkWithADFS\n     * @name linkWithADFS\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {string} accessToken The ADFS access token that will be linked to the {{site.bs}} user account.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.linkWithADFS = function (userId, accessToken, success, error) {\n        var identity = {\n            Provider: 'ADFS',\n            Token: accessToken\n        };\n        return ns._linkWithProvider(identity, userId, success, error);\n    };\n\n    /**\n     * Unlinks a {{site.TelerikBackendServices}} user account from the ADFS token that it is linked to.\n     * @memberOf Users.prototype\n     * @method unlinkFromADFS\n     * @name unlinkFromADFS\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Unlinks a {{site.TelerikBackendServices}} user account from the ADFS token that it is linked to.\n     * @memberOf Users.prototype\n     * @method unlinkFromADFS\n     * @name unlinkFromADFS\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.unlinkFromADFS = function (userId, success, error) {\n        return ns._unlinkFromProvider('ADFS', userId, success, error);\n    };\n\n    /**\n     * Log in a user using a Microsoft Account access token.\n     * @memberOf Users.prototype\n     * @method loginWithLiveID\n     * @name loginWithLiveID\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.loginWithLiveID}\n     * @param {string} accessToken Microsoft Account access token.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Log in a user using a Microsoft Account access token.\n     * @memberOf Users.prototype\n     * @method loginWithLiveID\n     * @name loginWithLiveID\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.loginWithLiveID}\n     * @param {string} accessToken Microsoft Account access token.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.loginWithLiveID = function (accessToken, success, error) {\n        return everlive.authentication.loginWithLiveID(accessToken, success, error);\n    };\n\n    /**\n     * Links a {{site.TelerikBackendServices}} user account to a Microsoft Account access token.\n     * @memberOf Users.prototype\n     * @method linkWithLiveID\n     * @name linkWithLiveID\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {string} accessToken The Microsoft Account access token that will be linked to the {{site.bs}} user account.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Links a {{site.TelerikBackendServices}} user account to a Microsoft Account access token.\n     * @memberOf Users.prototype\n     * @method linkWithLiveID\n     * @name linkWithLiveID\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {string} accessToken The Microsoft Account access token that will be linked to the {{site.bs}} user account.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.linkWithLiveID = function (userId, accessToken, success, error) {\n        var identity = {\n            Provider: 'LiveID',\n            Token: accessToken\n        };\n        return ns._linkWithProvider(identity, userId, success, error);\n    };\n\n    /**\n     * Unlinks a {{site.TelerikBackendServices}} user account from the Microsoft Account access token that it is linked to.\n     * @memberOf Users.prototype\n     * @method unlinkFromLiveID\n     * @name unlinkFromLiveID\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Unlinks a {{site.TelerikBackendServices}} user account from the Microsoft Account access token that it is linked to.\n     * @memberOf Users.prototype\n     * @method unlinkFromLiveID\n     * @name unlinkFromLiveID\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.unlinkFromLiveID = function (userId, success, error) {\n        return ns._unlinkFromProvider('LiveID', userId, success, error);\n    };\n\n    /**\n     * Log in a user using a Google access token.\n     * @memberOf Users.prototype\n     * @method loginWithGoogle\n     * @name loginWithGoogle\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.loginWithGoogle}\n     * @param {string} accessToken Google access token.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Log in a user using a Google access token.\n     * @memberOf Users.prototype\n     * @method loginWithGoogle\n     * @name loginWithGoogle\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.loginWithGoogle}\n     * @param {string} accessToken Google access token.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.loginWithGoogle = function (accessToken, success, error) {\n        return everlive.authentication.loginWithGoogle(accessToken, success, error);\n    };\n\n    /**\n     * Links a {{site.TelerikBackendServices}} user account to a Google access token.\n     * @memberOf Users.prototype\n     * @method linkWithGoogle\n     * @name linkWithGoogle\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {string} accessToken The Google access token that will be linked to the {{site.bs}} user account.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Links a {{site.TelerikBackendServices}} user account to a Google access token.\n     * @memberOf Users.prototype\n     * @method linkWithGoogle\n     * @name linkWithGoogle\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {string} accessToken The Google access token that will be linked to the {{site.bs}} user account.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.linkWithGoogle = function (userId, accessToken, success, error) {\n        var identity = {\n            Provider: 'Google',\n            Token: accessToken\n        };\n\n        return ns._linkWithProvider(identity, userId, success, error);\n    };\n\n    /**\n     * Unlinks a {{site.TelerikBackendServices}} user account from the Google access token that it is linked to.\n     * @memberOf Users.prototype\n     * @method unlinkFromGoogle\n     * @name unlinkFromGoogle\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Unlinks a {{site.TelerikBackendServices}} user account from the Google access token that it is linked to.\n     * @memberOf Users.prototype\n     * @method unlinkFromGoogle\n     * @name unlinkFromGoogle\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.unlinkFromGoogle = function (userId, success, error) {\n        return ns._unlinkFromProvider('Google', userId, success, error);\n    };\n\n    /**\n     * Log in a user with a Twitter token. A secret token needs to be provided.\n     * @memberOf Users.prototype\n     * @method loginWithTwitter\n     * @name loginWithTwitter\n     * @param {string} token Twitter token.\n     * @param {string} tokenSecret Twitter secret token.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Log in a user with a Twitter token. A secret token needs to be provided.\n     * @memberOf Users.prototype\n     * @method loginWithTwitter\n     * @name loginWithTwitter\n     * @param {string} token Twitter token.\n     * @param {string} tokenSecret Twitter secret token.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.loginWithTwitter = function (token, tokenSecret, success, error) {\n        return everlive.authentication.loginWithTwitter(token, tokenSecret, success, error);\n    };\n\n    /**\n     * Links a {{site.TelerikBackendServices}} user to a Twitter token. A secret token needs to be provided.\n     * @memberOf Users.prototype\n     * @method linkWithTwitter\n     * @name linkWithTwitter\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {string} token The Twitter access token that will be linked to the {{site.bs}} user account.\n     * @param {string} tokenSecret The Twitter secret token.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Links a {{site.TelerikBackendServices}} user to a Twitter token. A secret token needs to be provided.         * Links a Backend Services user with a Twitter token. A secret token needs to be provided.\n     * @memberOf Users.prototype\n     * @method linkWithTwitter\n     * @name linkWithTwitter\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {string} token The Twitter access token that will be linked to the {{site.bs}} user account.\n     * @param {string} tokenSecret The Twitter secret token.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.linkWithTwitter = function (userId, token, tokenSecret, success, error) {\n        var identity = {\n            Provider: 'Twitter',\n            Token: token,\n            TokenSecret: tokenSecret\n        };\n\n        return ns._linkWithProvider(identity, userId, success, error);\n    };\n\n    /**\n     * Unlinks a {{site.TelerikBackendServices}} user account from the Twitter access token that it is linked to.\n     * @memberOf Users.prototype\n     * @method unlinkFromTwitter\n     * @name unlinkFromTwitter\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Unlinks a {{site.TelerikBackendServices}} user account from the Twitter access token that it is linked to.\n     * @memberOf Users.prototype\n     * @method unlinkFromTwitter\n     * @name unlinkFromTwitter\n     * @param {string} userId The user's ID in {{site.bs}}.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.unlinkFromTwitter = function (userId, success, error) {\n        return ns._unlinkFromProvider('Twitter', userId, success, error);\n    };\n\n    /**\n     * Sets the token and token type that the {{site.TelerikBackendServices}} JavaScript SDK will use for authorization.\n     * @memberOf Users.prototype\n     * @method setAuthorization\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.setAuthorization}\n     * @param {string} token Token that will be used for authorization.\n     * @param {Everlive.TokenType} tokenType Token type. Currently only 'bearer' token is supported.\n     * @param {string} principalId The id of the user that is logged in.\n     */\n    ns.setAuthorization = function setAuthorization(token, tokenType, principalId) {\n        everlive.authentication.setAuthorization(token, tokenType, principalId)\n    };\n\n    /**\n     * Clears the authentication token that the {{site.bs}} JavaScript SDK currently uses. Note that this is different than logging out, because the current authorization token is not invalidated.\n     * @method clearAuthorization\n     * @deprecated\n     * @see [authentication.login]{@link ../Authentication/authentication.clearAuthorization}\n     * @memberOf Users.prototype\n     */\n    ns.clearAuthorization = function clearAuthorization() {\n        everlive.authentication.setAuthorization(null, null, null);\n    };\n\n    /**\n     * Sends a password reset email to a specified user.\n     * @memberOf Users.prototype\n     * @method resetPassword\n     * @name resetPassword\n     * @param {Object} user The user object, which must container either username or email address.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Sends a password reset email to a specified user.\n     * @memberOf Users.prototype\n     * @method resetPassword\n     * @name resetPassword\n     * @param {Object} user The user object, which must container either username or email address.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.resetPassword = function (user, success, error) {\n        var self = this;\n\n        return buildPromise(function (successCb, errorCb) {\n            var dataQuery = new DataQuery({\n                operation: DataQuery.operations.userResetPassword,\n                collectionName: self.collectionName,\n                data: user,\n                onSuccess: successCb,\n                onError: errorCb\n            });\n\n            return self.processDataQuery(dataQuery);\n        }, success, error);\n    };\n\n    /**\n     * Set a new password for a user using a password reset code.\n     * @memberOf Users.prototype\n     * @method setPassword\n     * @name setPassword\n     * @param {object} setPasswordObject The object, which contains information necessary for changing the user password.\n     * @param {string} setPasswordObject.ResetCode The reset code obtained using a password reset email.\n     * @param {string} setPasswordObject.NewPassword The new password for the user.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Set a new password for a user using a password reset code.\n     * @memberOf Users.prototype\n     * @method setPassword\n     * @name setPassword\n     * @param {object} setPasswordObject The object, which contains information necessary for changing the user password.\n     * @param {string} setPasswordObject.ResetCode The reset code obtained using a password reset email.\n     * @param {string} setPasswordObject.NewPassword The new password for the user.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    /**\n     * Set a new password for a user using a password reset code.\n     * @memberOf Users.prototype\n     * @method setPassword\n     * @name setPassword\n     * @param {object} setPasswordObject The object, which contains information necessary for changing the user password.\n     * @param {number} setPasswordObject.Username The username that the password will be changed.\n     * @param {number} setPasswordObject.SecretQuestionId The id of the secret question.\n     * @param {string} setPasswordObject.SecretAnswer The answer to the secret question.\n     * @param {string} setPasswordObject.NewPassword The new password for the user.\n     * @returns {Promise} The promise for the request.\n     */\n    /**\n     * Set a new password for a user using a password reset code.\n     * @memberOf Users.prototype\n     * @method setPassword\n     * @name setPassword\n     * @param {object} setPasswordObject The object, which contains information necessary for changing the user password.\n     * @param {number} setPasswordObject.Username The username that the password will be changed.\n     * @param {number} setPasswordObject.SecretQuestionId The id of the secret question.\n     * @param {string} setPasswordObject.SecretAnswer The answer to the secret question.\n     * @param {string} setPasswordObject.NewPassword The new password for the user.\n     * @param {Function} [success] A success callback.\n     * @param {Function} [error] An error callback.\n     */\n    ns.setPassword = function (setPasswordObject, success, error) {\n        var self = this;\n\n        return buildPromise(function (successCb, errorCb) {\n            var dataQuery = new DataQuery({\n                operation: DataQuery.operations.userSetPassword,\n                collectionName: self.collectionName,\n                data: setPasswordObject,\n                onSuccess: successCb,\n                onError: errorCb\n            });\n\n            return self.processDataQuery(dataQuery);\n        }, success, error);\n    };\n\n    ns._linkWithProvider = function (identity, userId, success, error) {\n        var self = this;\n        return buildPromise(function (success, error) {\n            var query = new DataQuery({\n                additionalOptions: {\n                    id: userId\n                },\n                operation: DataQuery.operations.userLinkWithProvider,\n                collectionName: self.collectionName,\n                data: identity,\n                parse: Request.parsers.single,\n                skipAuth: true,\n                onSuccess: success,\n                onError: error\n            });\n\n            return self.processDataQuery(query);\n        }, success, error);\n    };\n\n    ns._unlinkFromProvider = function (providerName, userId, success, error) {\n        var identity = {\n            Provider: providerName\n        };\n        var self = this;\n        return buildPromise(function (success, error) {\n            var query = new DataQuery({\n                additionalOptions: {\n                    userId: userId\n                },\n                operation: DataQuery.operations.userUnlinkFromProvider,\n                collectionName: self.collectionName,\n                data: identity,\n                parse: Request.parsers.single,\n                skipAuth: true,\n                onSuccess: success,\n                onError: error\n            });\n\n            return self.processDataQuery(query);\n        }, success, error);\n    };\n};",
    "var EverliveError = require('./EverliveError').EverliveError;\nvar common = require('./common');\nvar _ = common._;\nvar rsvp = common.rsvp;\nvar Everlive = require('./Everlive');\nvar platform = require('./everlive.platform');\nvar path = require('path');\n\nvar utils = {};\n\nutils.guardUnset = function guardUnset(value, name, message) {\n    if (!message) {\n        message = 'The ' + name + ' is required';\n    }\n    if (typeof value === 'undefined' || value === null) {\n        throw new EverliveError(message);\n    }\n};\n\nutils.parseUtilities = {\n    getReviver: function (parseOnlyCompleteDateTimeString) {\n        var dateParser;\n        if (parseOnlyCompleteDateTimeString) {\n            dateParser = utils.parseUtilities.parseIsoDateString;\n        } else {\n            dateParser = utils.parseUtilities.parseOnlyCompleteDateTimeString;\n        }\n\n        return function (key, value) {\n            if (typeof value === 'string') {\n                var date = dateParser(value);\n                if (date) {\n                    value = date;\n                }\n            }\n\n            return value;\n        };\n    },\n\n    parseIsoDateString: function (string) {\n        var match;\n        if (match = string.match(/^(\\d{4})(-(\\d{2})(-(\\d{2})(T(\\d{2}):(\\d{2})(:(\\d{2})(\\.(\\d+))?)?(Z|((\\+|-)(\\d{2}):(\\d{2}))))?))$/)) {\n            // DateTime\n            var secondParts = match[12];\n            if (secondParts) {\n                if (secondParts.length > 3) {\n                    secondParts = Math.round(Number(secondParts.substr(0, 3) + '.' + secondParts.substr(3)));\n                }\n                else if (secondParts.length < 3) {\n                    // if the secondParts are one or two characters then two or one zeros should be appended\n                    // in order to have the correct number for milliseconds ('.67' means 670ms not 67ms)\n                    secondParts += secondParts.length === 2 ? '0' : '00';\n                }\n            }\n            var date = new Date(\n                Date.UTC(\n                    Number(match[1]), // year\n                    (Number(match[3]) - 1) || 0, // month\n                    Number(match[5]) || 0, // day\n                    Number(match[7]) || 0, // hour\n                    Number(match[8]) || 0, // minute\n                    Number(match[10]) || 0, // second\n                    Number(secondParts) || 0\n                )\n            );\n\n            if (match[13] && match[13] !== \"Z\") {\n                var h = Number(match[16]) || 0,\n                    m = Number(match[17]) || 0;\n\n                h *= 3600000;\n                m *= 60000;\n\n                var offset = h + m;\n                if (match[15] === \"+\")\n                    offset = -offset;\n\n                date = new Date(date.valueOf() + offset);\n            }\n\n            return date;\n        } else {\n            return null;\n        }\n    },\n\n    parseOnlyCompleteDateTimeString: function (string) {\n        if (/^\\d{4}-\\d{2}-\\d{2}$/.test(string)) {\n            // Date\n            return null;\n        }\n\n        if (/^(\\d{2}):(\\d{2})(:(\\d{2})(\\.(\\d+))?)?(Z|((\\+|-)(\\d{2}):(\\d{2})))?$/.test(string)) {\n            // Time\n            return null;\n        }\n\n        return utils.parseUtilities.parseIsoDateString(string);\n    },\n\n    traverse: function (obj, func) {\n        var key, value, newValue;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                value = obj[key];\n                newValue = func(key, value);\n                obj[key] = newValue;\n                if (value === newValue && typeof value === 'object') {\n                    utils.parseUtilities.traverse(value, func);\n                }\n            }\n        }\n        return obj;\n    },\n\n    traverseAndRevive: function (data, reviver) {\n        if (!reviver) {\n            reviver = utils.parseUtilities.getReviver();\n        }\n\n        return utils.parseUtilities.traverse(data, reviver);\n    },\n\n    parseError: function (reviver, error) {\n        if (typeof error === 'string' && error.length > 0) {\n            try {\n                error = JSON.parse(error);\n                return {message: error.message, code: error.errorCode};\n            } catch (e) {\n                return error;\n            }\n        } else {\n            return error;\n        }\n    },\n\n    _parseInternal: function (reviver, data) {\n        if (typeof data === 'string' && data.length > 0) {\n            data = JSON.parse(data, reviver);\n        } else if (typeof data === 'object') {\n            utils.parseUtilities.traverseAndRevive(data, reviver);\n        }\n\n        return data;\n    },\n\n    _transformResult: function (data, additionalProperties) {\n        if (data) {\n            var result = {result: data.Result};\n            _.extend(result, additionalProperties);\n            return result;\n        } else {\n            return data;\n        }\n    },\n\n    parseResult: function (reviver, data) {\n        data = utils.parseUtilities._parseInternal.apply(null, arguments);\n        return utils.parseUtilities._transformResult(data, {count: data.Count});\n    },\n\n    parseSingleResult: function (reviver, data) {\n        data = utils.parseUtilities._parseInternal.apply(null, arguments);\n        return utils.parseUtilities._transformResult(data);\n    },\n\n    parseUpdateResult: function (reviver, data) {\n        data = utils.parseUtilities._parseInternal.apply(null, arguments);\n        return utils.parseUtilities._transformResult(data, {ModifiedAt: data.ModifiedAt});\n    },\n\n    parseJSON: function (json) {\n        return JSON.parse(json, utils.parseUtilities.getReviver());\n    }\n};\n\nutils.buildPromise = function buildPromise(operation, success, error) {\n    var callbacks = utils.getCallbacks(success, error);\n    operation(callbacks.success, callbacks.error);\n    return callbacks.promise;\n};\n\nutils.getCallbacks = function (success, error) {\n    var promise;\n    var createPromise = function () {\n        return new rsvp.Promise(function (resolve, reject) {\n            success = function (data) {\n                resolve(data);\n            };\n            error = function (error) {\n                reject(error);\n            };\n        });\n    };\n\n    if (platform.isNodejs) {\n        // node js style continuation\n        if (typeof success === 'function' && typeof error !== 'function') {\n            var callback = success;\n            success = function (data, response) {\n                callback(null, data, response);\n            };\n            error = function (error) {\n                callback(error);\n            };\n        } else if (typeof success !== 'function' && typeof error !== 'function') {\n            promise = createPromise();\n        }\n    } else {\n        if (typeof success !== 'function' && typeof error !== 'function') {\n            promise = createPromise();\n        }\n    }\n\n    return {promise: promise, success: success, error: error};\n};\n\nutils.buildAuthHeader = function buildAuthHeader(setup, options) {\n    var authHeaderValue = null;\n    if (options && options.authHeaders === false) {\n        return authHeaderValue;\n    }\n    if (setup.token) {\n        authHeaderValue = (setup.tokenType || 'bearer') + ' ' + setup.token;\n    }\n    else if (setup.masterKey) {\n        authHeaderValue = 'masterkey ' + setup.masterKey;\n    }\n    if (authHeaderValue) {\n        return {Authorization: authHeaderValue};\n    } else {\n        return null;\n    }\n};\n\nutils.DeviceRegistrationResult = function DeviceRegistrationResult(token) {\n    this.token = token;\n};\n\nutils.cloneDate = function (date) {\n    return new Date(date);\n};\n\nutils.buildUrl = function (setup) {\n    var url = '';\n    if (typeof setup.scheme === 'string') {\n        url += setup.scheme + ':';\n    }\n    url += setup.url;\n    if (setup.apiKey) {\n        url += setup.apiKey + '/';\n    }\n    return url;\n};\n\nutils.getDbOperators = function (expression, shallow) {\n    var dbOperators = [];\n\n    if (typeof expression === 'string' || typeof expression === 'number') {\n        return dbOperators;\n    }\n\n    var modifierKeys = Object.keys(expression || {});\n    _.each(modifierKeys, function (key) {\n        if (key.indexOf('$') === 0) {\n            dbOperators.push(key);\n        } else if (typeof expression[key] === 'object' && !shallow) {\n            dbOperators = dbOperators.concat(utils.getDbOperators(expression[key]));\n        }\n    });\n\n    return dbOperators;\n};\n\nutils.disableRequestCache = function (url, method) {\n    if (method === 'GET') {\n        var timestamp = (new Date()).getTime();\n        var separator = url.indexOf('?') > -1 ? '&' : '?';\n        url += separator + '_el=' + timestamp;\n    }\n\n    return url;\n};\n\nvar unsupportedDbOperators = [\n    '$geoWithin',\n    '$geoIntersects',\n    '$near',\n    '$within',\n    '$nearSphere'\n];\n\nutils.getUnsupportedOperators = function (filter) {\n    var dbOperators = utils.getDbOperators(filter);\n    return _.intersection(dbOperators, unsupportedDbOperators);\n};\n\n// http://stackoverflow.com/questions/7905929/how-to-test-valid-uuid-guid\nutils.isGuid = function (str) {\n    return /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(str);\n};\n\nutils.isQuerySupportedOffline = function (query) {\n    var queryParams = query.getQueryParameters();\n    var hasExpandExpression = !_.isEmptyObject(queryParams.expand);\n    var unsupportedOperators = utils.getUnsupportedOperators(queryParams.filter);\n    var hasUnsupportedOperators = unsupportedOperators.length !== 0;\n    var isUnsupportedInOffline = hasExpandExpression || hasUnsupportedOperators;\n    return !isUnsupportedInOffline;\n};\n\n// http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript/16245768#16245768\nutils.b64toBlob = function (b64Data, contentType, sliceSize) {\n    contentType = contentType || '';\n    sliceSize = sliceSize || 512;\n\n    var byteCharacters = atob(b64Data);\n    var byteArrays = [];\n\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        var slice = byteCharacters.slice(offset, offset + sliceSize);\n\n        var byteNumbers = new Array(slice.length);\n        for (var i = 0; i < slice.length; i++) {\n            byteNumbers[i] = slice.charCodeAt(i);\n        }\n\n        var byteArray = new Uint8Array(byteNumbers);\n\n        byteArrays.push(byteArray);\n    }\n\n    var blob = new Blob(byteArrays, {type: contentType});\n    return blob;\n};\n\n// http://stackoverflow.com/questions/9267899/arraybuffer-to-base64-encoded-string\nutils.arrayBufferToBase64 = function (buffer) {\n    var binary = '';\n    var bytes = new Uint8Array(buffer);\n    var len = bytes.byteLength;\n    for (var i = 0; i < len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n\n    return btoa(binary);\n};\n\nutils.successfulPromise = function (data) {\n    return new rsvp.Promise(function (resolve) {\n        resolve(data);\n    });\n};\n\nutils.rejectedPromise = function (err) {\n    return new rsvp.Promise(function (resolve, reject) {\n        reject(err);\n    });\n};\n\nutils.transformPlatformPath = function transformPlatformPath(platformPath) {\n    if (!platformPath) {\n        return '';\n    }\n\n    if (platform.isWindowsPhone) {\n        if (platformPath.charAt(0) === '/' && platformPath.charAt(1) !== '/') {\n            platformPath = '/' + platformPath;\n        }\n    } else { //TODO: probably desktop too\n        if (platformPath.indexOf('file:/') !== -1 && platformPath.indexOf('file:///') === -1) {\n            platformPath = platformPath.replace('file:/', 'file:///');\n        }\n    }\n\n    return platformPath;\n};\n\nutils._stringCompare = function (string, check) {\n    return string.toLowerCase() === check;\n};\n\nutils.isContentType = {\n    files: function (collectionName) {\n        return utils._stringCompare(collectionName, 'files');\n    },\n    users: function (collectionName) {\n        return utils._stringCompare(collectionName, 'users');\n    }\n};\n\nutils.isElement = {\n    _isElement: function (el, check) {\n        var tag = el;\n\n        if (typeof tag !== 'string') {\n            if (el instanceof HTMLElement) {\n                tag = el.tagName;\n            }\n        }\n\n        return utils._stringCompare(tag, check);\n    },\n    image: function (el) {\n        return utils.isElement._isElement(el, 'img');\n    },\n    anchor: function (el) {\n        return utils.isElement._isElement(el, 'a');\n    }\n};\n\nutils.joinPath = function joinPath() {\n    var args = [].slice.apply(arguments).map(function (arg) {\n        return arg || '';\n    });\n\n    var joinedPath = path.join.apply(path, args);\n    return utils.transformPlatformPath(joinedPath);\n};\n\nutils.uuid = function () {\n    //http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n\n    return uuid;\n};\n\nutils.getId = function (obj) {\n    return obj.Id || obj._id || obj.id;\n};\n\nutils.lazyRequire = function (moduleName, exportName) {\n    exportName = exportName || moduleName;\n    var obj = {};\n\n    Object.defineProperty(obj, exportName, {\n        get: function () {\n            return require(moduleName);\n        }\n    });\n\n    return obj;\n};\n\nmodule.exports = utils;\n"
  ]
}
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.Everlive.Sdk</name>
    </assembly>
    <members>
        <member name="T:Telerik.Everlive.Sdk.Core.DateTimeUnspecifiedHandling">
            <summary>
            Configures the handling of DateTime objects with Kind=Unspecified.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.DateTimeUnspecifiedHandling.ThrowException">
            <summary>
            Throws an exception if a DateTime object with Kind=Unspecified is found.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.DateTimeUnspecifiedHandling.TreatAsLocal">
            <summary>
            Treats all unspecified DateTime objects as local time.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.DateTimeUnspecifiedHandling.TreatAsUtc">
            <summary>
            Treats all unspecified DateTime objects as universal time.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.DateTimeValuesProcessing.NoChanges">
            <summary>
            No changes are applied to the DateTime objects.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.DateTimeValuesProcessing.ConvertToLocal">
            <summary>
            All instances are converted to local time.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.DateTimeValuesProcessing.ConvertToUtc">
            <summary>
            All instances are converted to UTC.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.EverliveAccount">
            <summary>
            This class represents the entry point to a single Everlive account.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveConnection.ExecuteRequest(Telerik.Everlive.Sdk.Core.Transport.Request,System.Action{Telerik.Everlive.Sdk.Core.Transport.Response})">
            <summary>
            Asynchronously executes a request against the Everlive service.
            </summary>
            <param name="request">The request to execute.</param>
            <param name="callback">The callback to invoke after the response is received.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveConnection.ExecuteQuery(Telerik.Everlive.Sdk.Core.Query.IEverliveQuery,System.Action{Telerik.Everlive.Sdk.Core.Transport.Response})">
            <summary>
            Asynchronously executes a query against the Everlive service.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="callback">The callback to invoke after the responce is received.</param>
            <returns>Returns true if the request resulted in an actual request to the Everlive service. Even if this is false, the callback will be invoked.</returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveConnection.ExecuteQuery(Telerik.Everlive.Sdk.Core.Query.IEverliveQuery,System.Int32)">
            <summary>
            Synchronously executes a query against the Everlive service.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="millisecondsTimeout">The timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveConnection.GetApiVersionPath">
            <summary>
            Gets the api version path for the url.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.EverliveConnection.ExecuteQuery(Telerik.Everlive.Sdk.Core.Query.IEverliveQuery,System.Boolean,System.Action{Telerik.Everlive.Sdk.Core.Transport.Response})">
            <summary>
            Asynchronously executes a query against the Everlive service.
            </summary>
            <param name="query">The query to execute.</param>
            <param name="callback">The callback to invoke after the responce is received.</param>
            <param name="forceExecute">Whether to execute the request even if it is not required.</param>
            <returns>Returns true if the request resulted in an actual request to the Everlive service. Even if this is false, the callback will be invoked.</returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveConnectionSettings.ApiVersion">
            <summary>
            Specifies the version of the Everlive API to use.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveConnectionSettings.ServiceUrl">
            <summary>
            Specifies the base URL for the Everlive service.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveConnectionSettings.UseHttps">
            <summary>
            Specifies whether HTTPS must be used for requests to the Everlive service.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAccountSettings.AuthorizationStrategy">
            <summary>
            The strategy to use when authenticationg to the Everlive REST service.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAccountSettings.AuthorizationData">
            <summary>
            The authorization data sent with each request. The value of this property depends on the authorization strategy. Example: for AccountKey
            authentication, this is the account key.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveApp.AccessToken">
            <summary>
            The access token used to authenticate when making requests to Everlive. The token is set automatically
            when you log in.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAppSettings.ApiKey">
            <summary>
            Gets/sets the API key of the app to work with.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAppSettings.TestMode">
            <summary>
            Specifies whether requests to the Everlive service are executed in test mode.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAppSettings.InboundDateTimeProcessing">
            <summary>
            Specifies how inbound DateTime values are processed.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAppSettings.DateTimeUnspecifiedHandling">
            <summary>
            Specifies how DateTime values with Kind=Unspecified are handled.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAppSettings.OutboundDateTimeProcessing">
            <summary>
            Specifies how outbound DateTime values are processed.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.EverliveAppSettings.SendSystemPropertiesToServer">
            <summary>
            Specifies whether system properties are sent to the server on CREATE or UPDATE operations. Note, that the server
            ignores those properties unless the request is authenticated with masterkey.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.UsersTypeName">
            <summary>
            The name of the Users built-in type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.RolesTypeName">
            <summary>
            The name of the Roles built-in type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.FilesTypeName">
            <summary>
            The name of the Files built-in type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.ServerCodeTypeName">
            <summary>
            The name of the ServerCode built-in type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.IdFieldName">
            <summary>
            The name of the field that represents the ID of the item.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.ModifiedAtFieldName">
            <summary>
            The name of the field that represents when the item was last modified.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.MultipleGetCountFieldName">
            <summary>
            The name of the field that contains the number of all items for the query(regardless of paging). Returned in GetByFilter requests.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.AnonymousRoleId">
            <summary>
            The ID of the role that represents anonymous users.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.EverliveConstants.OwnerRoleId">
            <summary>
            The ID of the system role that represents item owners.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.AsyncFacade`1.Execute(System.Action{`0})">
            <summary>
            Executes the request asynchronously and supplies the result to the specified callback. Any exceptions that occur during
            the operations are thrown. You should always wrap calls to this method in try-catch block.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.AsyncFacade`1.ExecuteAsync">
            <summary>
            Executes the request asynchronously. Any exceptions that occur during the operations are thrown. You should always wrap calls
            to this method in try-catch block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.AsyncFacade`1.ExecuteSync(System.Int32)">
            <summary>
            Executes the request synchronously. Any exceptions that occur during the operations are thrown. You should always wrap calls
            to this method in try-catch block. Calling this method blocks the calling thread.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1">
            <summary>
            
            </summary>
            <typeparam name="TResult">The type returned by the Execute and ExecuteAsync methods.</typeparam>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1.TryExecute(System.Action{Telerik.Everlive.Sdk.Core.Result.RequestResult{`0}})">
            <summary>
            Executes the request asynchronously and supplies the result to the specified callback. Note, that this method does not
            throw exceptions, but wraps them in the result object. You can check if the request succeeded by checking the Success property.
            </summary>
            <param name="callback">The callbeck to invoke with the result of the request.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1.Execute(System.Action{`0})">
            <summary>
            Executes the request asynchronously and supplies the result to the specified callback. Any exceptions that occur during
            the operations are thrown. You should always wrap calls to this method in try-catch block.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1.TryExecuteAsync">
            <summary>
            Executes the request asynchronously. Note, that this method does not throw exceptions, but wraps them in the result object.
            You can check if the request succeeded by checking the Success property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1.ExecuteAsync">
            <summary>
            Executes the request asynchronously. Any exceptions that occur during the operations are thrown. You should always wrap calls
            to this method in try-catch block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1.TryExecuteSync(System.Int32)">
            <summary>
            Executes the request synchronously. Note, that this method does not throw exceptions, but wraps them in the result object.
            You can check if the request succeeded by checking the Success property. Calling this method blocks the calling thread.
            </summary>
            <param name="timeoutInMs"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.BaseFacade`1.ExecuteSync(System.Int32)">
            <summary>
            Executes the request synchronously. Any exceptions that occur during the operations are thrown. You should always wrap calls
            to this method in try-catch block. Calling this method blocks the calling thread.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Facades.RequestFacade`1">
            <summary>
            
            </summary>
            <typeparam name="TResult">The type returned by the Execute and ExecuteAsync methods.</typeparam>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.SingleTypeFacade`1.ContentTypeName">
            <summary>
            The name of the content type on the server.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.SingleTypeFacade`1.EntityType">
            <summary>
            The type of entity in the result of the response.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Interfaces.IFilterableFacade`3.Where(System.Linq.Expressions.Expression{System.Func{`2,System.Boolean}})">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Interfaces.IFilterableFacade`3.Where(System.String)">
            <summary>
            Adds the specified JavaScript condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Interfaces.IFilterableFacade`3.Where(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Base.Condition)">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="condition">The condition to append.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Delete.DeleteByFilterFacade`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Applies the specified filter to the query.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Delete.DeleteByFilterFacade`1.Where(System.String)">
            <summary>
            Applies the specified JavaScript condition as where clause.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Delete.DeleteByFilterFacade`1.Where(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Base.Condition)">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Delete.DeleteByFilterFacade`1.SetFilter(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.IFilteringDefinition)">
            <summary>
            Sets the current filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Delete.DeleteByIdFacade.Id">
            <summary>
            The ID of the item to delete.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Facades.GenericRequestFacade`1">
            <summary>
            A generic facade for sending HTTP requests.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.GenericRequestFacade`1.Method">
            <summary>
            The HTTP method used when sending the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.GenericRequestFacade`1.ContentType">
            <summary>
            The value for the Content-Type header.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.GenericRequestFacade`1.UrlPath">
            <summary>
            The URL path to use for the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.GenericRequestFacade`1.UrlPathIsRelative">
            <summary>
            Specifies whether the URL path is relative. If the path is relative it will be appended to the base.Path value.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.GenericRequestFacade`1.CustomResponseDelegate">
            <summary>
            If not null, this delegate will be invoked to transform the Response object to the appropriate RequestResult object.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.GenericRequestFacade`1.CustomBasicResponseDelegate">
            <summary>
            If not null, this delegate will be invoked to transform the Response object to an instance of the result type.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.GenericRequestFacade`1.Body">
            <summary>
            The body of the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Metadata.UsageStatisticsFacade.PeriodType">
            <summary>
            Specifies the resulted aggregated data to be grouped by day/week/month
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Metadata.UsageStatisticsFacade.ApiKey">
            <summary>
            Returns aggregated data for a specific application 
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Metadata.UsageStatisticsFacade.TapAccountId">
            <summary>
            Gets the tap account id of the user that will be used when making the request.
            </summary>
            <value>The tap account id.</value>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetDataFacade`3.IncludeFields``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets the fields that are included in the result. Only the specified fields will be returned from the server. The Id field is always returned.
            In a single request, you can use either IncludeFields or ExcludeFields, not both.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetDataFacade`3.ExcludeFields``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sets the fields that are excluded in the result. All the fields except the specified will be returned from the server. The Id field is always
            returned. In a single request, you can use either IncludeFields or ExcludeFields, not both.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="propertySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.Query(System.Linq.Expressions.Expression{System.Func{Linq.Linq.EverliveQueryable{`0},System.Linq.IQueryable{`0}}})">
            <summary>
            Applies the specified query to the request. Example: x.Query(q => q.Where(...).OrderBy(...))
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.Where(System.String)">
            <summary>
            Adds the specified JavaScript condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.Where(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Base.Condition)">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Applies the specified ordering to the query.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Applies the specified ordering to the query.
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.Skip(System.Int32)">
            <summary>
            Bypasses the specified number of items.
            </summary>
            <param name="skip"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.Take(System.Int32)">
            <summary>
            Returns the specified number of contiguous items.
            </summary>
            <param name="take"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.SetFilter(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.IFilteringDefinition)">
            <summary>
            Sets the current filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.SetSorting(Telerik.Everlive.Sdk.Core.Query.Definition.Sorting.ISortingDefinition)">
            <summary>
            Sets the current sorting.
            </summary>
            <param name="sorting"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Read.GetByFilterFacade`1.IncludeCount">
            <summary>
            Whether to include the count of all items in the result. Useful when paging is used.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetCountFacade`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetCountFacade`1.Where(System.String)">
            <summary>
            Adds the specified JavaScript condition to the current filter.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Read.GetCountFacade`1.Where(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Base.Condition)">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Special.GetAppsByTapAccountIdFacade.TapAccountId">
            <summary>
            Gets or sets the tap account id of the user that will be used when making the request.
            </summary>
            <value>The tap account id.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Special.SetAclFacade.Acl">
            <summary>
            Gets or sets the acl.
            </summary>
            <value>The acl.</value>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByFilterFacade`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Applies the specified filter to the query.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByFilterFacade`1.Where(System.String)">
            <summary>
            Applies the specified JavaScript condition as where clause.
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByFilterFacade`1.Where(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Base.Condition)">
            <summary>
            Adds the specified condition to the current filter.
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByFilterFacade`1.SetFilter(Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.IFilteringDefinition)">
            <summary>
            Sets the current filter.
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByFilterFacade`1.Item">
            <summary>
            The item that will be updated.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByIdFacade.Id">
            <summary>
            The ID of the object to be updated.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateByIdFacade.Item">
            <summary>
            The item that will be updated.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateMultipleFacade`1.Items">
            <summary>
            The items that will be updated.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateSinglePermissionFacade.Id">
            <summary>
            The ID of the object to be updated.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Facades.Update.UpdateSinglePermissionFacade.Item">
            <summary>
            The item that will be updated.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.GetById(System.Guid)">
            <summary>
            Returns an item by its ID.
            </summary>
            <param name="id">The ID of the item to read.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.GetById(System.String)">
            <summary>
            Returns an item by its ID.
            </summary>
            <param name="id">The ID of the item to read.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.GetAll">
            <summary>
            Returns all items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.Get">
            <summary>
            General method for reading items. Custom filter, sorting and paging can be applied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.GetCount">
            <summary>
            Returns number of items. Custom filter can be applied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.Update(Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject)">
            <summary>
            Updates the specified in the item properties.
            </summary>
            <param name="item">The item containing the new property/value pairs.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.Delete(System.Guid)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.Delete(System.String)">
            <summary>
            
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.Delete">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.DataHandler`1.DeleteAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.SecuredDataHandler`1.SetOwner(System.Guid,System.Guid)">
            <summary>
            Sets the owner of the item.
            </summary>
            <param name="itemId">The item id.</param>
            <param name="owner">The owner.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Common.SecuredDataHandler`1.SetAcl(System.Guid,Telerik.Everlive.Sdk.Core.Model.Base.AccessControlList)">
            <summary>
            Sets the acl of the item.
            </summary>
            <param name="itemId">The item id.</param>
            <param name="acl">The acl. Null will delete the item's acl.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Data``1">
            <summary>
            Returns a facade for working with Everlive data. The facade transforms data to/from Everlive using instances of the specified .NET class.
            The name of the Everlive content type to use is automatically extracted from the supplied .NET type.
            </summary>
            <typeparam name="T">The type of objects to use when communicationg with Everlive.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Data``1(System.String)">
            <summary>
            Returns a facade for working with Everlive data. The facade transforms data from/to entities of the specified type(generic type argument).
            The facade works with the specified content type.
            </summary>
            <typeparam name="T">The type of objects to use when communicationg with Everlive.</typeparam>
            <param name="typeName">The name of the Everlive content type to work with. This is the name of the content type as it appears in the Everlive backend.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Data(System.Type)">
            <summary>
            Returns a facade for working with Everlive data. The facade transforms data from/to entities of the specified type.
            The name of the Everlive content type to use is automatically extracted from the type argument.
            </summary>
            <param name="entityType">The type of objects to use when communicationg with Everlive.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Data(System.String)">
            <summary>
            Returns a facade for working with Everlive data. The facade transforms data from/to instances of Item. Server properties that
            are not available in the Item class can be accessed in a dicionary-like manner.
            </summary>
            <param name="typeName">The name of the Everlive content type to work with. This is the name of the content type as it appears in the Everlive backend.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Data(System.Type,System.String)">
            <summary>
            Returns a facade for working with Everlive data. The facade transforms data from/to entities of the specified type.
            The name of the Everlive content type to use is automatically extracted from the type argument.
            </summary>
            <param name="entityType">The type of objects to use when communicationg with Everlive.</param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Authentication">
            <summary>
            Returns a facade for working with authentication.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Users">
            <summary>
            Returns a default facade for working with users. The facade works with the built-in User class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Users(System.Type)">
            <summary>
            Returns a facade for working with users. The facade transforms data from/to entities of the specified type.
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Users``1">
            <summary>
            Returns a facade for working with users. The facade transforms data from/to entities of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Files">
            <summary>
            Returns a facade for working with files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.AppHandler.Push">
            <summary>
            Returns a facade for working with Everlive Push Notifications.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.FilesHandler.Upload(Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField)">
            <summary>
            Uploads a single file to Everlive.
            </summary>
            <param name="fileField">The file to upload.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.FilesHandler.Upload(System.Collections.Generic.IEnumerable{Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField})">
            <summary>
            Uploads multiple files to Everlive.
            </summary>
            <param name="files">The files to upload.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.FilesHandler.UpdateFileContent(System.Guid,Telerik.Everlive.Sdk.Core.Query.Definition.FormData.FileField)">
            <summary>
            Updates the content of the file with the specified ID.
            </summary>
            <param name="fileId">The file to update.</param>
            <param name="file">The new content for the file.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.FilesHandler.GetFileDownloadUrl(System.Guid)">
            <summary>
            Returns the URL for the specified file.
            </summary>
            <param name="fileId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.FilesHandler.SetOwner(System.Guid,System.Guid)">
            <summary>
            Sets the owner of the item.
            </summary>
            <param name="itemId">The item id.</param>
            <param name="owner">The owner.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.FilesHandler.SetAcl(System.Guid,Telerik.Everlive.Sdk.Core.Model.Base.AccessControlList)">
            <summary>
            Sets the acl of the item.
            </summary>
            <param name="fileId">The item id.</param>
            <param name="acl">The acl. Null will delete the item's acl.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.GetMe">
            <summary>
            Returns the currently logged user. Note that this only works if you have successfully logged in first using the Login method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password for the specified user.
            </summary>
            <param name="username"></param>
            <param name="currentPassword"></param>
            <param name="newPassword"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.VerifyUser(System.String)">
            <summary>
            Verifies the email of a user by supplying a verification code.
            </summary>
            <param name="verificationCode"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.ResendVerificationEmail(System.Guid)">
            <summary>
            Resends the verification email for the user with the specified ID.
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.ResendVerificationEmail(System.String)">
            <summary>
            Resends the verification email for the user with the specified username.
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.ResetPasswordForUsername(System.String)">
            <summary>
            Initiates a password reset procedure for the user with the specified username.
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.ResetPasswordForEmail(System.String)">
            <summary>
            Initiates a password reset procedure for the user with the specified email.
            </summary>
            <param name="email"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.SetNewPassword(System.String,System.Object,System.String,System.String)">
            <summary>
            Sets a new password for the user with the specified username, by using the secret question and secret answer.
            </summary>
            <param name="username">The username identifying the user.</param>
            <param name="secretQuestionId">The secret question ID of the user.</param>
            <param name="secretAnswer">The answer to the secret question.</param>
            <param name="newPassword">The new password to set.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.SetNewPassword(System.String,System.String)">
            <summary>
            Sets a new password for the user with the specified reset code.
            </summary>
            <param name="passwordResetCode"></param>
            <param name="newPassword"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.LinkAccount(System.Guid,System.String,Telerik.Everlive.Sdk.Core.Login.IdentityProvider)">
            <summary>
            Links the everlive user account with an account from the provider.
            </summary>
            <param name="userId">The user id.</param>
            <param name="accessToken">The access token from the provider.</param>
            <param name="provider">The provider name.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.LinkAccount(System.Guid,System.String,System.String,Telerik.Everlive.Sdk.Core.Login.IdentityProvider)">
            <summary>
            Links the everlive user account with an account from the provider.
            </summary>
            <param name="userId">The user id.</param>
            <param name="token">The token from the provider.</param>
            <param name="tokenSecret">The token secret from the provider.</param>
            <param name="provider">The provider name.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.UnlinkAccount(System.Guid,Telerik.Everlive.Sdk.Core.Login.IdentityProvider)">
            <summary>
            Unlinks the everlive user account with the account from provider.
            </summary>
            <param name="userId">The user id.</param>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.LinkFacebookAccount(System.Guid,System.String)">
            <summary>
            Links the everlive user account with a Facebook account.
            </summary>
            <param name="userId">The user id.</param>
            <param name="accessToken">The Facebook access token.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.UnlinkFacebookAccount(System.Guid)">
            <summary>
            Unlinks the everlive user account and the Facebook account.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.LinkLiveIdAccount(System.Guid,System.String)">
            <summary>
            Links the everlive user account with a LiveID account.
            </summary>
            <param name="userId">The user id.</param>
            <param name="accessToken">The LiveID access token.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.UnlinkLiveIdAccount(System.Guid)">
            <summary>
            Unlinks the everlive user account and the LiveID account.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.LinkGoogleAccount(System.Guid,System.String)">
            <summary>
            Links the everlive user account with a Google account.
            </summary>
            <param name="userId">The user id.</param>
            <param name="accessToken">The Google access token.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.UnlinkGoogleAccount(System.Guid)">
            <summary>
            Unlinks the everlive user account and the Google account.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.LinkTwitterAccount(System.Guid,System.String,System.String)">
            <summary>
            Links the everlive user account with a Twitter account.
            </summary>
            <param name="userId">The user id.</param>
            <param name="token">The Twitter token.</param>
            <param name="tokenSecret">The Twitter token secret.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.UnlinkTwitterAccount(System.Guid)">
            <summary>
            Unlinks the everlive user account and the Twitter account.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.LinkAdfsAccount(System.Guid,System.String)">
            <summary>
            Links the Everlive user account with an ADFS account.
            </summary>
            <param name="userId">The user id.</param>
            <param name="accessToken">The ADFS access token.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Data.UsersHandler`1.UnlinkAdfsAccount(System.Guid)">
            <summary>
            Unlinks the Everlive user account from the ADFS account.
            </summary>
            <param name="userId">The user id.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Metadata.ApplicationCloudCodeHandler.Debug">
            <summary>
            Returns and object for working with cloud code debug sessions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Metadata.ApplicationCloudCodeHandler.Functions">
            <summary>
            Returns an object for working with cloud functions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Metadata.CloudCodeHandler.SetCloudCode(System.String)">
            <summary>
            Sets the specified string as cloud code for the content type. The supplied string must be in UTF8 form.
            </summary>
            <param name="cloudCodeStringUtf8">The string to use as cloud code.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Metadata.CloudCodeHandler.SetCloudCode(System.IO.Stream)">
            <summary>
            Sets the data from the specified stream as cloud code for the content type.
            </summary>
            <param name="codeStream"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Metadata.CloudCodeHandler.RemoveCloudCode">
            <summary>
            Remove the cloud code for the content type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Metadata.CloudCodeHandler.GetCloudCode">
            <summary>
            Get the cloud code for the content type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Metadata.ContentTypeHandler.SetSecurityPolicy(Telerik.Everlive.Sdk.Core.Model.System.Metadata.Enums.SecurityPolicy)">
            <summary>
            Sets the security policy of the content type.
            </summary>
            <param name="securityPolicy">The new security policy.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.Create(Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice)">
            <summary>
            Registers a device for push notifications. Please note, that this method only registers the device in Everlive,
            so that it can be targeted when sending push notifications. This method does not set up the device for receiving
            push notifications.
            </summary>
            <param name="deviceRegistration">The device registration object.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.GetById(System.Guid)">
            <summary>
            Returns the registration for the device with the specified ID.
            </summary>
            <param name="id">The unique hardware ID of the device.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.GetByHardwareId(System.String)">
            <summary>
            Returns the registration for the device with the specified hardware ID.
            </summary>
            <param name="deviceHardwareId">The unique hardware ID of the device.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.GetAll">
            <summary>
            Returns all items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.Get">
            <summary>
            Returns multiple device registrations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.GetCount">
            <summary>
            Returns number of device registrations. Custom filter can be applied.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.Update(Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice)">
            <summary>
            Updates the specified device registration.
            </summary>
            <param name="registration"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.UpdateByHardwareId(Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice)">
            <summary>
            Updates the specified device registration.
            </summary>
            <param name="registration"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.Delete(System.Guid)">
            <summary>
            Unregisters a device from receiving push notifications. The device will no longer receive any notifications.
            </summary>
            <param name="id">The unique hardware ID of the device.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Handlers.Push.DevicesHandler.DeleteByHardwareId(System.String)">
            <summary>
            Unregisters a device from receiving push notifications. The device will no longer receive any notifications.
            </summary>
            <param name="deviceHardwareId">The unique hardware ID of the device.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Interfaces.IPushHandler.GetDeviceHardwareId">
            <summary>
            Returns the unique hardware ID of the current device.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Interfaces.IPushHandler.RegisterDevice(Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice)">
            <summary>
            Registers the specified device for push notifications.
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Interfaces.IPushHandler.RegisterDevice(Telerik.Everlive.Sdk.Core.Model.System.Push.DeviceParameters)">
            <summary>
            Registers the current device for push notifications. The specified custom parameters are included in the registration.
            </summary>
            <param name="parameters">Custom parameters for the device registration.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Interfaces.IPushHandler.UnregisterDevice(System.String)">
            <summary>
            Unregisters the specified device from push notifications.
            </summary>
            <param name="deviceHardwareId"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Interfaces.IPushHandler.UnregisterDevice">
            <summary>
            Unregisters the current device for push notifications.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Linq.Linq.Bson.BsonSerializationInfo.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the BsonSerializationInfo class.
            </summary>
            <param name="elementName">The element name.</param>
            <param name="nominalType">The nominal type.</param>
        </member>
        <member name="M:Linq.Linq.Bson.BsonSerializationInfo.DeserializeValue(Telerik.Newtonsoft.Json.Linq.JObject)">
            <summary>
            Deserializes the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The deserialized value.</returns>
        </member>
        <member name="M:Linq.Linq.Bson.BsonSerializationInfo.SerializeValue(System.Object)">
            <summary>
            Serializes the value.
            </summary>
            <param name="value">The value.</param>
            <returns>The serialized value.</returns>
        </member>
        <member name="P:Linq.Linq.Bson.BsonSerializationInfo.ElementName">
            <summary>
            Gets or sets the dotted element name.
            </summary>
        </member>
        <member name="P:Linq.Linq.Bson.BsonSerializationInfo.NominalType">
            <summary>
            Gets or sets the nominal type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.EndOfDocument">
            <summary>
            Not a real BSON type. Used to signal the end of a document.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Double">
            <summary>
            A BSON double.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.String">
            <summary>
            A BSON string.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Document">
            <summary>
            A BSON document.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Array">
            <summary>
            A BSON array.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Binary">
            <summary>
            BSON binary data.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Undefined">
            <summary>
            A BSON undefined value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.ObjectId">
            <summary>
            A BSON ObjectId.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Boolean">
            <summary>
            A BSON bool.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.DateTime">
            <summary>
            A BSON DateTime.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Null">
            <summary>
            A BSON null value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.RegularExpression">
            <summary>
            A BSON regular expression.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.JavaScript">
            <summary>
            BSON JavaScript code.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Symbol">
            <summary>
            A BSON symbol.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.JavaScriptWithScope">
            <summary>
            BSON JavaScript code with a scope (a set of variables with values).
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Int32">
            <summary>
            A BSON 32-bit integer.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Timestamp">
            <summary>
            A BSON timestamp.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.Int64">
            <summary>
            A BSON 64-bit integer.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.MinKey">
            <summary>
            A BSON MinKey value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Bson.BsonType.MaxKey">
            <summary>
            A BSON MaxKey value.
            </summary>
        </member>
        <member name="M:Linq.Linq.EverliveQueryable`1.#ctor(Linq.Linq.EverliveQueryProvider)">
            <summary>
            Initializes a new instance of the EverliveQueryable class.
            </summary>
            <param name="provider">The query provider.</param>
        </member>
        <member name="M:Linq.Linq.EverliveQueryable`1.#ctor(Linq.Linq.EverliveQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the EverliveQueryable class.
            </summary>
            <param name="provider">The query provider.</param>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Linq.Linq.EverliveQueryable`1.GetEnumerator">
            <summary>
            Gets an enumerator for the results of a MongoDB LINQ query.
            </summary>
            <returns>An enumerator for the results of a MongoDB LINQ query.</returns>
        </member>
        <member name="M:Linq.Linq.EverliveQueryProvider.#ctor(Telerik.Everlive.Sdk.Core.EverliveApp)">
            <summary>
            Initializes a new instance of the EverliveQueryProvider class.
            </summary>
        </member>
        <member name="M:Linq.Linq.EverliveQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new instance of EverliveQueryable{{T}} for this provider.
            </summary>
            <typeparam name="T">The type of the returned elements.</typeparam>
            <param name="expression">The query expression.</param>
            <returns>A new instance of EverliveQueryable{{T}}.</returns>
        </member>
        <member name="M:Linq.Linq.EverliveQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            Creates a new instance EverliveQueryable{{T}} for this provider. Calls the generic CreateQuery{{T}} 
            to actually create the new EverliveQueryable{{T}} instance.
            </summary>
            <param name="expression">The query expression.</param>
            <returns>A new instance of EverliveQueryable{{T}}.</returns>
        </member>
        <member name="M:Linq.Linq.EverliveQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes a query.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expression">The query expression.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Linq.Linq.EverliveQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes a query. Calls the generic method Execute{{T}} to actually execute the query.
            </summary>
            <param name="expression">The query expression.</param>
            <returns>The result of the query.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.#ctor">
            <summary>
            Initializes a new instance of the ExpressionVisitor class.
            </summary>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits an Expression.
            </summary>
            <param name="node">The Expression.</param>
            <returns>The Expression (posibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits an Expression list.
            </summary>
            <param name="nodes">The Expression list.</param>
            <returns>The Expression list (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a BinaryExpression.
            </summary>
            <param name="node">The BinaryExpression.</param>
            <returns>The BinaryExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits a ConditionalExpression.
            </summary>
            <param name="node">The ConditionalExpression.</param>
            <returns>The ConditionalExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits a ConstantExpression.
            </summary>
            <param name="node">The ConstantExpression.</param>
            <returns>The ConstantExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits an ElementInit.
            </summary>
            <param name="node">The ElementInit.</param>
            <returns>The ElementInit (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitElementInitList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visits an ElementInit list.
            </summary>
            <param name="nodes">The ElementInit list.</param>
            <returns>The ElementInit list (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits an InvocationExpression.
            </summary>
            <param name="node">The InvocationExpression.</param>
            <returns>The InvocationExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits a LambdaExpression.
            </summary>
            <param name="node">The LambdaExpression.</param>
            <returns>The LambdaExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits a ListInitExpression.
            </summary>
            <param name="node">The ListInitExpression.</param>
            <returns>The ListInitExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits a MemberExpression.
            </summary>
            <param name="node">The MemberExpression.</param>
            <returns>The MemberExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits a MemberAssignment.
            </summary>
            <param name="node">The MemberAssignment.</param>
            <returns>The MemberAssignment (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits a MemberBinding.
            </summary>
            <param name="node">The MemberBinding.</param>
            <returns>The MemberBinding (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMemberBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visits a MemberBinding list.
            </summary>
            <param name="nodes">The MemberBinding list.</param>
            <returns>The MemberBinding list (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits a MemberInitExpression.
            </summary>
            <param name="node">The MemberInitExpression.</param>
            <returns>The MemberInitExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits a MemberListBinding.
            </summary>
            <param name="node">The MemberListBinding.</param>
            <returns>The MemberListBinding (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits a MemberMemberBinding.
            </summary>
            <param name="node">The MemberMemberBinding.</param>
            <returns>The MemberMemberBinding (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits a MethodCallExpression.
            </summary>
            <param name="node">The MethodCallExpression.</param>
            <returns>The MethodCallExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits a NewExpression.
            </summary>
            <param name="node">The NewExpression.</param>
            <returns>The NewExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits a NewArrayExpression.
            </summary>
            <param name="node">The NewArrayExpression.</param>
            <returns>The NewArrayExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits a ParameterExpression.
            </summary>
            <param name="node">The ParameterExpression.</param>
            <returns>The ParameterExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits a TypeBinaryExpression.
            </summary>
            <param name="node">The TypeBinaryExpression.</param>
            <returns>The TypeBinaryExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a UnaryExpression.
            </summary>
            <param name="node">The UnaryExpression.</param>
            <returns>The UnaryExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionNormalizer.#ctor(System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the ExpressionNormalizer class.
            </summary>
            <param name="expression">The expression to be evaluated.</param>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionNormalizer.Normalize(System.Linq.Expressions.Expression)">
            <summary>
            Normalizes C# and VB expression trees.
            </summary>
            <param name="node">The expression to normalize.</param>
            <returns>The normalized expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionNormalizer.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a BinaryExpression.
            </summary>
            <param name="node">The BinaryExpression.</param>
            <returns>The BinaryExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionNormalizer.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a UnaryExpression.
            </summary>
            <param name="node">The UnaryExpression.</param>
            <returns>The UnaryExpression (possibly modified).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionParameterReplacer.#ctor(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Initializes a new instance of the ExpressionParameterReplacer class.
            </summary>
            <param name="fromParameter">The parameter to be replaced.</param>
            <param name="toExpression">The expression that replaces the parameter.</param>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionParameterReplacer.ReplaceParameter(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
            <summary>
            Replaces all occurences of one parameter with a different parameter.
            </summary>
            <param name="node">The expression containing the parameter that should be replaced.</param>
            <param name="fromParameter">The from parameter.</param>
            <param name="toExpression">The expression that replaces the parameter.</param>
            <returns>The expression with all occurrences of the parameter replaced.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionParameterReplacer.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Replaces the from parameter with the two parameter if it maches.
            </summary>
            <param name="node">The node.</param>
            <returns>The parameter (replaced if it matched).</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.#ctor">
            <summary>
            Initializes a new instance of the ExpressionVisitor class.
            </summary>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits an Expression.
            </summary>
            <param name="node">The Expression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits an Expression list.
            </summary>
            <param name="nodes">The Expression list.</param>
            <returns>The result of visiting the Expressions.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a BinaryExpression.
            </summary>
            <param name="node">The BinaryExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits a ConditionalExpression.
            </summary>
            <param name="node">The ConditionalExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits a ConstantExpression.
            </summary>
            <param name="node">The ConstantExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits an ElementInit.
            </summary>
            <param name="node">The ElementInit.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitElementInitList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visits an ElementInit list.
            </summary>
            <param name="nodes">The ElementInit list.</param>
            <returns>The result of visiting the Expressions.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits an InvocationExpression.
            </summary>
            <param name="node">The InvocationExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits a LambdaExpression.
            </summary>
            <param name="node">The LambdaExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits a ListInitExpression.
            </summary>
            <param name="node">The ListInitExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits a MemberExpression.
            </summary>
            <param name="node">The MemberExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits a MemberAssignment.
            </summary>
            <param name="node">The MemberAssignment.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits a MemberBinding.
            </summary>
            <param name="node">The MemberBinding.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMemberBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visits a MemberBinding list.
            </summary>
            <param name="nodes">The MemberBinding list.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits a MemberInitExpression.
            </summary>
            <param name="node">The MemberInitExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits a MemberListBinding.
            </summary>
            <param name="node">The MemberListBinding.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits a MemberMemberBinding.
            </summary>
            <param name="node">The MemberMemberBinding.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits a MethodCallExpression.
            </summary>
            <param name="node">The MethodCallExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits a NewExpression.
            </summary>
            <param name="node">The NewExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits a NewArrayExpression.
            </summary>
            <param name="node">The NewArrayExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits a ParameterExpression.
            </summary>
            <param name="node">The ParameterExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits a TypeBinaryExpression.
            </summary>
            <param name="node">The TypeBinaryExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.Expressions.ExpressionVisitor`1.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a UnaryExpression.
            </summary>
            <param name="node">The UnaryExpression.</param>
            <returns>The result of visiting the Expression.</returns>
        </member>
        <member name="M:Linq.Linq.LinqToMongo.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains all of the specified values.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence in which to locate the values.</param>
            <param name="values">The values to locate in the sequence.</param>
            <returns>True if the sequence contains all of the specified values.</returns>
        </member>
        <member name="M:Linq.Linq.LinqToMongo.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any of the specified values.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence in which to locate the values.</param>
            <param name="values">The values to locate in the sequence.</param>
            <returns>True if the sequence contains any of the specified values.</returns>
        </member>
        <member name="M:Linq.Linq.LinqToMongo.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a specified value is contained in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="value">The value to locate in the sequence.</param>
            <param name="source">A sequence in which to locate the values.</param>
            <returns>True if the value is contained in the sequence.</returns>
        </member>
        <member name="M:Linq.Linq.LinqToMongo.Inject(Linq.Linq.Driver.IMongoQuery)">
            <summary>
            Injects a low level IMongoQuery into a LINQ where clause. Can only be used in LINQ queries.
            </summary>
            <param name="query">The low level query.</param>
            <returns>Throws an InvalidOperationException if called.</returns>
        </member>
        <member name="M:Linq.Linq.Translators.MongoQueryTranslator.Translate(System.Linq.IQueryable)">
            <summary>
            Translate a MongoDB LINQ query.
            </summary>
            <param name="query">The MongoDB LINQ query.</param>
            <returns>A TranslatedQuery.</returns>
        </member>
        <member name="M:Linq.Linq.Translators.MongoQueryTranslator.Translate(Linq.Linq.EverliveQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            Translate a MongoDB LINQ query.
            </summary>
            <param name="provider">The MongoDB query provider.</param>
            <param name="expression">The LINQ query expression.</param>
            <returns>A TranslatedQuery.</returns>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByClause">
            <summary>
            Represents an order by clause.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByClause.#ctor(System.String,Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByDirection)">
            <summary>
            Initializes an instance of the OrderByClause class.
            </summary>
            <param name="key">An expression identifying the key of the order by clause.</param>
            <param name="direction">The direction of the order by clause.</param>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByClause.Key">
            <summary>
            Gets the lambda expression identifying the key of the order by clause.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByClause.Direction">
            <summary>
            Gets the direction of the order by clause.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByDirection.Ascending">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Linq.Translators.OrderByDirection.Descending">
            <summary>
            Descending order.
            </summary>
        </member>
        <member name="M:Linq.Linq.Translators.PartialEvaluator.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
            Performs evaluation and replacement of independent sub-trees.
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="M:Linq.Linq.Translators.PartialEvaluator.Evaluate(System.Linq.Expressions.Expression,System.Linq.IQueryProvider)">
            <summary>
            Performs evaluation and replacement of independent sub-trees.
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <param name="queryProvider">The query provider when the expression is a LINQ query (can be null).</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns>
        </member>
        <member name="T:Linq.Linq.Translators.PartialEvaluator.SubtreeEvaluator">
            <summary>
            Evaluates and replaces sub-trees when first candidate is reached (top-down)
            </summary>
        </member>
        <member name="M:Linq.Linq.Translators.PredicateTranslator.#ctor(Linq.Linq.Utils.BsonSerializationInfoHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:Linq.Linq.Translators.PredicateTranslator"/> class.
            </summary>
            <param name="serializationHelper">The serialization helper.</param>
        </member>
        <member name="M:Linq.Linq.Translators.PredicateTranslator.BuildQuery(System.Linq.Expressions.Expression)">
            <summary>
            Builds an IMongoQuery from an expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns>An IMongoQuery.</returns>
        </member>
        <member name="M:Linq.Linq.Translators.TranslatedQuery.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the MongoLinqQuery class.
            </summary>
            <param name="documentType">The document type being queried.</param>
        </member>
        <member name="P:Linq.Linq.Translators.TranslatedQuery.DocumentType">
            <summary>
            Get the document type being queried.
            </summary>
        </member>
        <member name="M:Linq.Linq.Translators.SelectQuery.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the MongoLinqFindQuery class.
            </summary>
            <param name="documentType">The document type.</param>
        </member>
        <member name="M:Linq.Linq.Translators.SelectQuery.BuildQuery">
            <summary>
            Creates an IMongoQuery from the where clause (returns null if no where clause was specified).
            </summary>
            <returns>An IMongoQuery.</returns>
        </member>
        <member name="M:Linq.Linq.Translators.SelectQuery.Translate(System.Linq.Expressions.Expression)">
            <summary>
            Translates a LINQ query expression tree.
            </summary>
            <param name="expression">The LINQ query expression tree.</param>
        </member>
        <member name="P:Linq.Linq.Translators.SelectQuery.Projection">
            <summary>
            Gets the Expression that defines the projection (or null if not specified).
            </summary>
        </member>
        <member name="P:Linq.Linq.Translators.SelectQuery.Skip">
            <summary>
            Gets the Expression that defines how many documents to skip (or null if not specified).
            </summary>
        </member>
        <member name="P:Linq.Linq.Translators.SelectQuery.Take">
            <summary>
            Gets the Expression that defines how many documents to take (or null if not specified);
            </summary>
        </member>
        <member name="P:Linq.Linq.Translators.SelectQuery.Where">
            <summary>
            Gets the LambdaExpression that defines the where clause (or null if not specified).
            </summary>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.Expression,Linq.Linq.Bson.BsonSerializationInfo})">
            <summary>
            Initializes a new instance of the BsonSerializationInfoFinder class.
            </summary>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits a BinaryExpression.
            </summary>
            <param name="node">The BinaryExpression.</param>
            <returns>BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits a LambdaExpression.
            </summary>
            <param name="node">The LambdaExpression.</param>
            <returns>BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits a MemberExpression.
            </summary>
            <param name="node">The MemberExpression.</param>
            <returns>BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits a MethodCallExpression.
            </summary>
            <param name="node">The MethodCallExpression.</param>
            <returns>BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits a ParameterExpression.
            </summary>
            <param name="node">The ParameterExpression.</param>
            <returns>BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoFinder.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits a UnaryExpression.
            </summary>
            <param name="node">The UnaryExpression.</param>
            <returns>BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoHelper.GetSerializationInfo(System.Linq.Expressions.Expression)">
            <summary>
            Gets the serialization info for the given expression.
            </summary>
            <param name="node">The expression.</param>
            <returns>The serialization info.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoHelper.GetItemSerializationInfo(System.String,Linq.Linq.Bson.BsonSerializationInfo)">
            <summary>
            Gets the item serialization info.
            </summary>
            <param name="methodName">Name of the method.</param>
            <param name="serializationInfo">The serialization info.</param>
            <returns>The item BsonSerializationInfo for the expression.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoHelper.RegisterExpressionSerializer(System.Linq.Expressions.Expression)">
            <summary>
            Registers a serializer with the given expression. 
            </summary>
            <param name="node">The expression.</param>
        </member>
        <member name="M:Linq.Linq.Utils.BsonSerializationInfoHelper.SerializeValue(Linq.Linq.Bson.BsonSerializationInfo,System.Object)">
            <summary>
            Serializes the value given the serialization information.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="value">The value.</param>
            <returns>A BsonValue representing the value serialized using the serializer.</returns>
        </member>
        <member name="M:Linq.Linq.Utils.TypeHelper.IsAssignableFrom(System.Type,System.Type)">
            <summary>Determines whether an instance of the current <see cref="T:System.Type"/>
            can be assigned from an instance of the specified Type.
            Works the same way as Type.IsAssignableFrom but also adds support for generics
            </summary>
            <param name="extendType">The extended type to check if is assignable from the given <paramref name="baseType"/></param>
            <param name="baseType">The base type</param>
            <returns></returns>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Login.PrincipalType.User">
            <summary>
            Used when logging in as an Everlive user.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Login.PrincipalType.App">
            <summary>
            Used when logging in as a third party app.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Login.PrincipalType.Master">
            <summary>
            Used when logging in with full access.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.Base.ContentTypeAttribute">
            <summary>
            This attribute is used to explicitly set properties for user generated classes which 
            correspond to Everlive Content Types
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.ContentTypeAttribute.Name">
            <summary>
            The name of the Everlive Content Type.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.Interfaces.IBaseItem">
            <summary>
            Base class for representing both Metadata and Data items in Telerik Backend Services.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IBaseItem.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the dynamic property with the specified name.
            </summary>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IBaseItem.GetValue``1(System.String,``0)">
            <summary>
            Gets the value of the dynamic property with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="defaultValue">The default value to return if the specified property is not found.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IBaseItem.RemoveValue(System.String)">
            <summary>
            Removes the specified dynamic property from the object.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IBaseItem.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the value of the dynamic property with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Interfaces.IBaseItem.ServerId">
            <summary>
            The ID of the item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Interfaces.IBaseItem.ModifiedAt">
            <summary>
            The date when the item was last modified.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Interfaces.IBaseItem.CreatedAt">
            <summary>
            The date when the item was created.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject">
            <summary>
            Represents an object that supports updating.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject.GetJsonUpdateObject(System.Boolean,Telerik.Everlive.Sdk.Core.Serialization.ISerializationSettings)">
            <summary>
            Returns the JSON object to send as update to the Everlive service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject.MarkObjectAsNotModified">
            <summary>
            Marks the whole object as not modified.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject.MarkObjectAsDirty">
            <summary>
            Marks all the properties of the current object as modified.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject.MarkPropertyAsNotModified(System.String)">
            <summary>
            Clears the modified flag for the specified property.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject.IsObjectModified">
            <summary>
            Returns whether the object has been modified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.MarkObjectAsNotModified">
            <summary>
            Marks the whole object as unmodified. After this is called, all properties are considered unchanged.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.MarkObjectAsDirty">
            <summary>
            Marks the object as dirty. After this is called app properties are consifered modified and will be sent to the server with an Update request.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.MarkPropertyAsNotModified(System.String)">
            <summary>
            Marks the specified property as not modified. Non-modified properties are not sent to the server with UPDATE requests.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.MarkPropertyAsDirty(System.String)">
            <summary>
            Marks the specified property as modified(dirty). Only modified properties are sent to the server with UPDATE requests.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.MarkPropertyAsDirty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Marks the specified property as modified.
            </summary>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the dynamic property with the specified name.
            </summary>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.GetValue``1(System.String,``0)">
            <summary>
            Gets the value of the dynamic property with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="defaultValue">The default value to return if the specified property is not found.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.RemoveValue(System.String)">
            <summary>
            Removes the specified property from the object.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the value of the dynamic property with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.InitializeDefaultValues">
            <summary>
            
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event for the specified property.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.OnPropertyChanged(System.String)">
            <summary>
            Raises a PropertyChanged event for the specified property.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises a PropertyChanged event for the specified property. Example: this.OnPropertyChanged(() => this.Name);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event with the specified args. Can be overriden to raise the event in the UI thread, when necessary.
            </summary>
            <param name="args">Event args to be used.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets the specified value to the specified field. Raises a PropertyChanged event if the previous value is different than the new.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to set value to.</param>
            <param name="value">The new value.</param>
            <param name="propertyName">The name of the property to raise PropertyChanged for.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.SetProperty``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Sets the specified value to the specified field. Raises a PropertyChanged event if the previous value is different than the new.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to set value to.</param>
            <param name="value">The new value.</param>
            <param name="propertyExpression">The name of the property to raise PropertyChanged for. Example: this.SetProperty(ref this.name, value, () => this.Name);</param>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.ServerId">
            <summary>
            The unique ID of the item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.ModifiedAt">
            <summary>
            The date when the item was last modified.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.CreatedAt">
            <summary>
            The date when the item was created.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.CustomProperties">
            <summary>
            Holds all properties that are returned by the Everlive service but are not mapped to a static .NET property.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.Meta">
            <summary>
            Holds additional data for the item. This property is read-only.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.ItemBase.IsObjectModified">
            <summary>
            Returns whether the object has been modified. Note, that this does not check if JToken properties have been modified.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.Id">
            <summary>
            The unique ID of the item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.CreatedBy">
            <summary>
            The ID of the Everlive user that created the item. Guid.Empty if the item was not created by a particular Everlive user(e.g. created from the Everlive backend).
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.ModifiedBy">
            <summary>
            The ID of the Everlive user that created the item. Guid.Empty if the item was not modified by a particular Everlive user(e.g. edited from the Everlive backend).
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.Owner">
            <summary>
            The ID of the owner of the item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItem.Acl">
            <summary>
            Holds granular permissions for the item. This property is only returned from the server for the owner of the item or
            when using masterkey authentication.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.DataItemMetadata.Permissions">
            <summary>
            Holds the permissions on the item for the user who requested the item. This is null if the item was requested with
            authentication different than user.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DynamicData.SetValue(System.String,System.Object)">
            <summary>
            Sets the value of the dynamic property with the specified name.
            </summary>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="value">The new value of the property.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DynamicData.GetValue``1(System.String,``0)">
            <summary>
            Gets the value of the dynamic property with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName">The name of the dynamic property.</param>
            <param name="defaultValue">The default value to return if the specified property is not found.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.DynamicData.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the value of the dynamic property with the specified name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.ClientSerializationError">
            <summary>
            Occurs whenever a serialization problem is encountered. This error means that the server returned the response successfully, but it was not deserialized properly.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.UnknownClientError">
            <summary>
            Occurs whenever a client error is thrown. This error means that the server returned the response successfully, but some error occured internally in the SDK.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.SynchronousRequestTimedOut">
            <summary>
            Occurs when a synchronous request to the Everlive service times out.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.NoResponse">
            <summary>
            Occurs when the Everlive service does not respond.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.AdfsAuthenticationError">
            <summary>
            Occurs when the client cannot authenticate with ADFS for some reason.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.UnknownServerError">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.UserAlreadyExists">
            <summary>
            Occurs if you try to register a new user with username that is already in the system.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.NoPasswordSpecified">
            <summary>
            Occures if you try to register a user but you have not specified a password.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.NoUsernameSpecified">
            <summary>
            Occures if you try to register a user but you have not specified a username.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.InvalidPassword">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.WrongUsernameOrPassword">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.UserNotFound">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.CannotRetrieveProviderUser">
            <summary>
            Cannot retrieve a user for the specified token. 
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.InvalidToken">
            <summary>
            Invalid access token.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.InvalidRequest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.MethodNotSupported">
            <summary>
            Occurs when the specified HTTP method is not supported by the endpoint.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.AccessDenied">
            <summary>
            Occurs whenever you try to access a resource on which you hav eno permissions.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.MissingApiVersion">
            <summary>
            Occurs whenever you make request to the Everlive service without specifying the API version. This should not happen when working through the SDK.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.MissingApiKey">
            <summary>
            Occurs whenever you make request to the Everlive service without specifying the API key. This should not happen when working through the SDK.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.InvalidApiKey">
            <summary>
            Occurs whenever you make request to the Everlive service with an invalid API key.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.InvalidFilterExpression">
            <summary>
            Occurs if you supply an invalid filter expression while querying objects.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.InvalidSortExpression">
            <summary>
            Occurs if you supply an invalid sort expression while querying objects.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.MissingOrInvalidContentTypeHeader">
            <summary>
            Occurs if the content-type header of the request is required, but is missing or invalid.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.ContentTypeNotFound">
            <summary>
            Occurs when you make request for a non-existing content type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.MissingFileContentType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.Base.ErrorType.MissingOrInvalidFileContent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.Base.ExternalDataItem">
            <summary>
            Base class for external data items. External data items are items that are exposed by Telerik Backend Services from an external data source using the Data Links feature.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.Interfaces.IGenericItem">
            <summary>
            The base interface for all items in Telerik Backend Services.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.GenericItem.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises a PropertyChanged event for the specified property.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.GenericItem.OnPropertyChanged(System.String)">
            <summary>
            Raises a PropertyChanged event for the specified property.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.GenericItem.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises a PropertyChanged event for the specified property. Example: this.OnPropertyChanged(() => this.Name);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.GenericItem.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets the specified value to the specified field. Raises a PropertyChanged event if the previous value is different than the new.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to set value to.</param>
            <param name="value">The new value.</param>
            <param name="propertyName">The name of the property to raise PropertyChanged for.</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.GenericItem.SetProperty``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Sets the specified value to the specified field. Raises a PropertyChanged event if the previous value is different than the new.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="field">The field to set value to.</param>
            <param name="value">The new value.</param>
            <param name="propertyExpression">The name of the property to raise PropertyChanged for. Example: this.SetProperty(ref this.name, value, () => this.Name);</param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Base.GenericItem.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event with the specified args. Can be overriden to raise the event in the UI thread, when necessary.
            </summary>
            <param name="args">Event args to be used.</param>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.GenericItem.ServerId">
            <summary>
            The unique ID of the item.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.Base.PermissionsInfo">
            <summary>
            Holds simple permissions.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.PermissionsInfo.CanUpdate">
            <summary>
            Indicates whether the current user can UPDATE the item.
            </summary>
            <value>Whether the current user can update the item.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Base.PermissionsInfo.CanDelete">
            <summary>
            Indicates whether the current user can DELETE the item.
            </summary>
            <value>Whether the current user can delete the item.</value>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableProperty.IsModified">
            <summary>
            Returns whether the property is modified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableProperty.GetJsonUpdateObject">
            <summary>
            Returns the JSON update object that reflexes the changes made to the property.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.Result.CreateResultItem">
            <summary>
            An instance of this type is returned by CREATE operations.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Result.CreateResultItem.ServerId">
            <summary>
            The unique ID of the item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.Result.CreateResultItem.CreatedAt">
            <summary>
            The date when the item was created.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.AccessToken">
            <summary>
            Represents an access token that you can use to make requests to the Everlive service. This object is usually the result
            of a successful login request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.AccessToken.Token">
            <summary>
            The token string itself.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.AccessToken.TokenType">
            <summary>
            The type of the token as per OAuth 2.0 specification. Currently we only use "bearer" for token type.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.AccessToken.ExpirationDate">
            <summary>
            The date and time when the token expires. After a token is expired, you cannot use it to make requests.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.AccessToken.PrincipalId">
            <summary>
            The ID of the entity associated with the token. If you logged in as a user, this is the user ID.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.Date">
            <summary>
            The date of the usage metrics info.
            </summary>
            <value>The date.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.ApiKey">
            <summary>
            The API key.
            </summary>
            <value>The API key.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.InboundTraffic">
            <summary>
            The inbound traffic in bytes for the period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.OutboundTraffic">
            <summary>
            The outbound traffic in bytes for the period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.OutboundTrafficCumulative">
            <summary>
            The cumulative outbound traffic in bytes.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.InboundTrafficCumulative">
            <summary>
            The cumulative inbound traffic in bytes.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.Bandwidth">
            <summary>
            Bandwidth in bytes.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.BandwidthCumulative">
            <summary>
            Cumulative bandwidth in bytes.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.RequestsCount">
            <summary>
            The number of requests for the period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.RequestsCountCumulative">
            <summary>
            The cumulative number of requests.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.DataStorage">
            <summary>
            The data storage, as it was at the end of the period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.DataStorageChange">
            <summary>
            The difference between the data storage for the current period and the data storage for the previous period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.FileStorage">
            <summary>
            The file storage, as it was at the end of the period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Account.UsageMetricsInfo.FileStorageChange">
            <summary>
            The difference between the file storage for the current period and the file storage for the previous period.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.DownloadedFile.Stream">
            <summary>
            The download stream.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.DownloadedFile.Length">
            <summary>
            The size of the downloaded file in bytes.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.DownloadedFile.FileName">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.File">
            <summary>
            Represents a file stored in Everlive. You can inherit from this class and define your custom file properties.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.File.Filename">
            <summary>
            The name of the file.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.File.ContentType">
            <summary>
            The content type of the file e.g. "image/jpg".
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.File.Size">
            <summary>
            The size of the file in bytes.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.File.Uri">
            <summary>
            The Uri of the file.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.System.GeoPoint.GetFromJObject(Telerik.Newtonsoft.Json.Linq.JObject)">
            <summary>
            Creates a new instance of GeoPoint from the specified JObject. Returns a GeoPoint or null if the JObject cannot be converted to one.
            </summary>
            <param name="json">The json.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Model.System.GeoPoint.TryGetFromJObject(Telerik.Newtonsoft.Json.Linq.JObject,Telerik.Everlive.Sdk.Core.Model.System.GeoPoint@)">
            <summary>
            Tries to create a new instance of GeoPoint from a JObject.
            </summary>
            <param name="json">The json.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application">
            <summary>
            Represents an application in Everlive.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.Name">
            <summary>
            The name of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.Title">
            <summary>
            The title of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.APIKey">
            <summary>
            Api key of the application.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.APIMasterKey">
            <summary>
            The Api master key of the application.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.DefaultRoleId">
            <summary>
            The id of the default role in the application.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.Description">
            <summary>
            The description string of the application.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.FilesContentTypeId">
            <summary>
            The id of the files content type.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.IsAutogeneratedSample">
            <summary>
            Shows whether the application is an autogenerated sample.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.IsSample">
            <summary>
            Shows whether the application is a sample.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.Owner">
            <summary>
            Shows the owner of the application.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Application.CustomSettings">
            <summary>
            Custom settings for the application. You can store custom application properties here.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog">
            <summary>
            Represents the log information that is stored from the execution of server code
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.ResultType">
            <summary>
            Gets or sets the type of the result.
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
            <value>The type of the event.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.ConsoleOutput">
            <summary>
            Gets or sets the console output.
            </summary>
            <value>The console output.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.RequestDate">
            <summary>
            Gets or sets the request date.
            </summary>
            <value>The request date.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudCodeLog.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudFunction.Name">
            <summary>
            The name of the cloud function. Used when calling the function.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudFunction.Title">
            <summary>
            The title of the cloud function.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudFunction.RequestTemplate">
            <summary>
            A template for creating an execution request for the cloud function.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudFunctionRequestTemplate">
            <summary>
            Describes a request to a cloud function.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudFunctionRequestTemplate.Method">
            <summary>
            HTTP method used for the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudFunctionRequestTemplate.Headers">
            <summary>
            The headers to be sent with the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.CloudFunctionRequestTemplate.Payload">
            <summary>
            The body of the request.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType">
            <summary>
            Represents a content type of an application in Everlive.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.Name">
            <summary>
            The name of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.Title">
            <summary>
            The title of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.ApplicationId">
            <summary>
            The id of the application this content type belongs to.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.Kind">
            <summary>
            The content type kind. For example whether it is a user defined or a system content type.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.CustomSettings">
            <summary>
            Custom settings for the application. You can store custom application properties here.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.DataLinkId">
            <summary>
            The id of the Data Link this content type belongs to.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.IsReadOnly">
            <summary>
            Specifies if an external type is ReadOnly (e.g. SQL Server View)
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ContentType.SourceTypeName">
            <summary>
            The name of the Source Type
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.DataLink.Name">
            <summary>
            The name of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.DataLink.Title">
            <summary>
            The title of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.DataLink.Url">
            <summary>
            The URL of the DataLink server.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.DataLink.ApplicationId">
            <summary>
            The ID of the application.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.DataLink.ConnectionString">
            <summary>
            The connection string used to connect to the external data source.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.DataLink.Type">
            <summary>
            The type of the data link.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.DebugSession">
            <summary>
            Represents a debug session for Cloud Code in Telerik Backend Services.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.DebugSession.Url">
            <summary>
            The URL where you can find the Backend Services Debugging UI.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.DebugSession.DebugProtocolUri">
            <summary>
            The URI where you can consume the debug protocol for Backend Services Cloud Code.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.DebugSession.SessionKey">
            <summary>
            
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.DevCloudData">
            <summary>
            Data used when creating project in the DevCloud context.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.EmailTemplate.FromEmail">
            <summary>
            Required.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.System.BuiltInTemplate.Friends">
            <summary>
            The friends sample app.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.EmailsSendMode">
            <summary>
            Used to to show the type of the event - before/after for which the log was created
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.EventType">
            <summary>
            Used to to show the type of the event - before/after for which the log was created
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.FieldDataType">
            <summary>
            The possible field data types.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.System.Metadata.FieldDataType.Date">
            <summary>
            Represents a date value in format "yyyy-MM-dd". Used only for Content Types from Data Connectors.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.System.Metadata.FieldDataType.Time">
            <summary>
            Represents a time value in format "HH:mm:ss.FFFFFFF". Used only for Content Types from Data Connectors.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ObjectKind">
            <summary>
            Represents the ownership type for an Everlive metadata object.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ObjectKind.System">
            <summary>
            A system object.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ObjectKind.UserDefined">
            <summary>
            A user-defined object.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.ResultType">
            <summary>
            Shows the result type of the server code that was executed
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.Name">
            <summary>
            The name of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.Title">
            <summary>
            The title of the metadata item.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.Kind">
            <summary>
            The kind of the field (System, UserDefined, etc).
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.DataType">
            <summary>
            The data type of the field.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.IsArray">
            <summary>
            Shows whether the field contains an array.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.TargetTypeId">
            <summary>
            If the field is a relation type field this is the id of the type that the relation is to.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.ContentTypeId">
            <summary>
            The id of the content type this field belongs to.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.CustomSettings">
            <summary>
            Custom settings for the application. You can store custom application properties here.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.SourceFieldName">
            <summary>
            The SourceFieldName of an external DataLink field.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.IsReadOnly">
            <summary>
            Returns a value indicating whether an external DataLink field is read-only.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Field.IsIdentity">
            <summary>
            Returns a value indicating whether an external DataLink field is the identity field.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Role">
            <summary>
            Represents a role in Everlive.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Role.Name">
            <summary>
            The name of the role.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.Role.Title">
            <summary>
            The title of the role.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.SourceField.Name">
            <summary>
            The name of the source type.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.SourceField.IsReadOnly">
            <summary>
            Specifies if the source type is Read-Only.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.SourceField.DataType">
            <summary>
            The data type of the field.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.SourceField.IsIdentity">
            <summary>
            Returns a value indicating whether this field is the identity field for the entity.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.SourceType.Name">
            <summary>
            The name of the source type.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Metadata.SourceType.IsReadOnly">
            <summary>
            Specifies if the source type is Read-Only.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushNotification.Filter">
            <summary>
            Specifies a device filter for the notification. Using this filter you can target only the devices you want.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushNotification.Message">
            <summary>
            Specifies a message to send as push notification. Sending a notification with message is a
            generic way to send a push notification to any platform..
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushNotification.WindowsPhone">
            <summary>
            Specifies the push notification that will be sent to Windows Phone devices.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushNotification.Windows">
            <summary>
            Specifies the push notification that will be sent to Windows devices.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushNotification.Android">
            <summary>
            Specifies the push notification that will be sent to Android devices.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushNotification.iOS">
            <summary>
            Specifies the push notification that will be sent to iOS devices.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice">
            <summary>
            Represents a device registration for push notifications. A registration is a set of
            parameters, that can be used to filter the device when sending push notifications.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.HardwareId">
            <summary>
            The unique hardware ID of the device. Required.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.HardwareModel">
            <summary>
            The hardware model of the device, for example "Nokia Lumia 928". Optional.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.PlatformType">
            <summary>
            The software platform (operating system) that runs on the device. Required.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.PlatformVersion">
            <summary>
            The version of the software platform (operating system) that runs on the device. Required for Windows Phone devices.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.PushToken">
            <summary>
            The push token that can be used to send notifications to the device. This is usually obtained from the
            platform vendor by using some API.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.Locale">
            <summary>
            The language of user interface of the device. Optional.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.TimeZone">
            <summary>
            The time zone on the device.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.Parameters">
            <summary>
            Custom parameters for the registration. Those parameters can be used when targeting the push notifications.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.PushDevice.PushTokenExpirationTime">
            <summary>
            Expiration time of the Push notification channel.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.RawNotification">
            <summary>
            Specifies settings for a Windows Phone raw push notification.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.RawNotification.Payload">
            <summary>
            They payload for the raw notification.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification">
            <summary>
            Specifies settings for a Windows Phone tile push notification.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.TileId">
            <summary>
            The URI of the tile to update. Only used when updating secondary tiles. If null, the primary tile will be updated. Example: /MyLandingPage.xaml
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.Title">
            <summary>
            The title displayed on the front side of the tile.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.BackgroundImage">
            <summary>
            The image to use for background of the front side of the tile. Example: Images/MyImage.png
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.Count">
            <summary>
            The count value to show on the tile. Can be a value from 1 to 99.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.BackTitle">
            <summary>
            The title displayed on the back side of the tile.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.BackContent">
            <summary>
            The text displayed on the back side of the tile.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.BackBackgroundImage">
            <summary>
            The image to use for background of the back side of the tile. Example: Images/MyImage.png
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.SmallBackgroundImage">
            <summary>
            The image to use for the small tile. Supported from Windows Phone 7.8. Example: Images/MyImage.png
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.WideBackgroundImage">
            <summary>
            The image to use for the front side of the wide tile. Supported from Windows Phone 7.8. Example: Images/MyImage.png
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.WideBackBackgroundImage">
            <summary>
            
            The image to use for the back side of the wide tile. Supported from Windows Phone 7.8. Example: Images/MyImage.png
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.TileNotification.WideBackContent">
            <summary>
            The text displayed on the wide tile. Supported from Windows Phone 7.8.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.ToastNotification">
            <summary>
            Specifies settings for a Windows Phone toast push notification.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.ToastNotification.Title">
            <summary>
            The title(bold part) for the toast notification.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.ToastNotification.Message">
            <summary>
            The message for the toast notification.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.ToastNotification.LandingUri">
            <summary>
            Uri of the page to navigate when the toast is tapped. If null, the notification opens the main page.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.WindowsPhoneNotification">
            <summary>
            Contains settings for push notifications sent to Windows Phone devices.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.WindowsPhoneNotification.Tile">
            <summary>
            Settings for tile notification. If null, no tile notification will be sent.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.WindowsPhoneNotification.Toast">
            <summary>
            Settings for toast notification. If null, no toast notification will be sent.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.Push.WindowsPhone.WindowsPhoneNotification.Raw">
            <summary>
            Settings for Raw notification. If null, no raw notification will be sent.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.ServerInfo.CurrentTime">
            <summary>
            The current date and time on the server.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Model.System.User">
            <summary>
            Represents the default user in Everlive. You can inherit from this class and define your custom user properties.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.Username">
            <summary>
            The username of the user.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.DisplayName">
            <summary>
            The display name of the user.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.Password">
            <summary>
            The user's password. This field is only used when creating a new user.
            It is not populated when you get a user from the server.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.SecretQuestion">
            <summary>
            The secret question for the user. Note, that this is usually the ID/index of the question, not the question itself.
            This field is only used when creating/updating a user, it is not populated when retrieving users.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.SecretAnswer">
            <summary>
            The answer to the secret question for the user. 
            This field is only used when creating/updating a user, it is not populated when retrieving users.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.RoleId">
            <summary>
            The ID of the user's role.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.Email">
            <summary>
            The email of the user. This email is used for reset password requests.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Model.System.User.IsVerified">
            <summary>
            Returns whether the user has verified the email address. This property is read-only and the server will ignore any changes made directly.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Query.Definition.FieldSelection.CustomFieldSelection">
            <summary>
            A field selector implementation allowing custom JSON object to be used for field selection. Note, that the JSON object must
            comply with the Everlive REST API specification.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Query.Definition.FieldSelection.IFieldSelection.GetFieldSelectionObject">
            <summary>
            Returns the JSON object to send as field selector to the Everlive service.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Query.Definition.Expand.ExpandDefinition.RelationField">
            <summary>
            The name of the field to be returned from the server.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Query.Definition.FieldSelection.FieldSelection.SelectedFields">
            <summary>
            This property defines the fields that must be included/excluded in the response. You can either only exclude fields or only include fields.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Query.Definition.FieldSelection.SelectedField">
            <summary>
            Represents a field that must be included/excluded from the result of a request.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Array.ArrayConditionOperator">
            <summary>
            Filter operators used 
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Array.ArrayConditionOperator.ValueIsIn">
            <summary>
            Used for non-array fields only. True if the value of the field is contained in the specified array of values.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Array.ArrayConditionOperator.ValueIsNotIn">
            <summary>
            Used for non-array fields only. True if the value of the field is not contained in the specified array of values.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Array.ArrayConditionOperator.ArrayContainsAll">
            <summary>
            Used for array fields only. True if the value of the field contains all of the values in the specified array.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.CustomFilteringDefinition">
            <summary>
            A filter implementation allowing custom JSON object to be used for filtering. Note, that the JSON object must
            comply with the Everlive REST API specification.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.IFilteringDefinition.GetFilterObject">
            <summary>
            Returns the JSON object to send as filter to the Everlive service.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator">
            <summary>
            
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator.ValueEquals">
            <summary>
            True if the value equals the filter value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator.ValueNotEquals">
            <summary>
            True if the value is not equal to the filter value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator.ValueLesserThan">
            <summary>
            True if the value is lesser than the specified value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator.ValueLesserThanOrEqual">
            <summary>
            True if the value is less than or equal to the specified value.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator.ValueIsOfType">
            <summary>
            True if the value in the field is of the specified type.
            </summary>
        </member>
        <member name="F:Telerik.Everlive.Sdk.Core.Query.Definition.Filtering.Simple.ValueConditionOperator.ArrayIsOfSize">
            <summary>
            Used for array fields only. True if the size of the array matches the specified number.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Query.Definition.Paging.IncludeCount">
            <summary>
            Whether to include the count of all objects matching the query in the response.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Query.Definition.Sorting.CustomSortingDefinition">
            <summary>
            A sorting implementation allowing custom JSON object to be used for sorting. Note, that the JSON object must
            comply with the Everlive REST API specification.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Query.Definition.Sorting.ISortingDefinition.GetSortObject">
            <summary>
            Returns the JSON object to send as ordering to the Everlive service.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.BoolResult">
            <summary>
            Represents the result of a request that returns either true or false.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.ResultBase">
            <summary>
            A base class for representing results of Everlive service requests.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.ResultBase.Success">
            <summary>
            Returns whether the request was successfully handled by the Everlive service.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.ResultBase.Error">
            <summary>
            If Success is false, this contains the error that occured on the server.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.ResultBase.AdditionalData">
            <summary>
            Contains any additional data sent in the response.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.CountResult">
            <summary>
            Represents the result of a count request to the Everlive service.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.ItemResult`1">
            <summary>
            Represents the result of a get request for a single item.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.CountResult.ItemsCount">
            <summary>
            The count returned by the service.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.CreateMultipleResult">
            <summary>
            Represents the result of a create request containing multiple items.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.ItemsResult`1">
            <summary>
            Represents the result of a get request for many items.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.ItemsResult`1.Items">
            <summary>
            The items that were returned from the request.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.CreateSingleResult">
            <summary>
            Represents the result of a create request containing a single item.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.DeleteResult">
            <summary>
            Represents the result of a delete request.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.EmptyResult">
            <summary>
            Representing a result of an operation that returns no data.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.GetMultipleResult`1.Count">
            <summary>
            The count of all items that satisfy the query.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.GetSingleResult`1">
            <summary>
            Represents the result of a get request for a single item.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.LoginResult">
            <summary>
            Represents the result of a login request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.LoginResult.Token">
            <summary>
            The access token returned as a result of the login request.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.RequestResult`1">
            <summary>
            A class that represents results of Everlive service requests.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.RequestResult`1.Success">
            <summary>
            Returns whether a result was obtained successfully.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.RequestResult`1.Error">
            <summary>
            If Success is false, this contains the error that occured.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.RequestResult`1.AdditionalData">
            <summary>
            Contains any additional data sent in the response.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.RequestResult`1.Value">
            <summary>
            The actual result of the request.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.ResultHolder`1">
            <summary>
            This class represents a result from the Everlive service. The service always returns the result of the request
            wrapped in an object. This object contains the result itself and may contain other data, depending on the type
            and settings of the request.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.ResultHolder`1.Result">
            <summary>
            The result of the query.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.ResultHolder`1.AdditionalData">
            <summary>
            This object contains any additional data sent with the response.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.StringResult">
            <summary>
            Represents the result of a get request for a single item.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Result.UpdateResult">
            <summary>
            Represents the result of an update request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.UpdateResult.UpdatedItemsCount">
            <summary>
            The number of items that were updated by the update request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Result.UpdateResult.ModifiedAt">
            <summary>
            The server date when the items were modified.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> to resolves a <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> to resolves a <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class"/>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example"/>
            </example>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
            <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Telerik.Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Telerik.Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonContract"/> for the given type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Telerik.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:Telerik.Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Telerik.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:Telerik.Newtonsoft.Json.MemberSerialization"/>.</param>
            <param name="member">The member to create a <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> for.</param>
            <returns>A created <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConverter.WriteJson(Telerik.Newtonsoft.Json.JsonWriter,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConverter.ReadJson(Telerik.Newtonsoft.Json.JsonReader,System.Type,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConverter.GetSchema">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.
            </summary>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.</returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Telerik.Newtonsoft.Json.JsonWriter,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Telerik.Newtonsoft.Json.JsonReader,System.Type,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Serialization.EverliveJsonConverter.GetFieldServerName(System.String,System.Type)">
            <summary>
            Returns the name of the server field for the specified property name and type.
            </summary>
            <param name="propertyName"></param>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Serialization.ServerIgnoreAttribute">
            <summary>
            Specifies that the property should not be serialized
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Serialization.ServerPropertyAttribute.ReadFromServer">
            <summary>
            Specifies whether values coming from server are deserialised to the client.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Serialization.ServerPropertyAttribute.WriteToServer">
            <summary>
            Specifies whether values from the client are sent to the server.
            </summary>
        </member>
        <member name="T:Telerik.Everlive.Sdk.Core.Serialization.ServerTypeAttribute">
            <summary>
            This attribute is used to explicitly set properties for user generated classes which 
            correspond to Everlive Content Types
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Serialization.ServerTypeAttribute.ServerTypeName">
            <summary>
            The name of the Everlive Content Type.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Communicator.GetEverliveException(System.Exception,System.Net.HttpWebResponse@)">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Communicator.GetResponseBody(System.Net.WebResponse)">
            <summary>
            Reads the response body of a WebResponse object and returns it as a string.
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.EverliveException.Code">
            <summary>
            The error code returned from the Everlive service.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.EverliveException.ErrorType">
            <summary>
            The error code returned from the Everlive service transformed to an enum.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.GetResultAsObject``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.GetResultAsEnumerable``1">
            <summary>
            Returns the result
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.GetResultAsStronglyTyped(System.Type)">
            <summary>
            Returns the result of the response casted to the provided resultType, 
            so SelectQuery can return correct result
            </summary>
            <param name="resultType"></param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.GetAsObject``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.GetAsEnumerable``1">
            <summary>
            Returns the inner result
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.CreateSuccess``1(Telerik.Everlive.Sdk.Core.EverliveConnection,Telerik.Everlive.Sdk.Core.Transport.Request,System.Net.HttpWebResponse)">
            <summary>
            Creates an instance of Response representing a successful service call.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Response.CreateError``1(Telerik.Everlive.Sdk.Core.EverliveConnection,Telerik.Everlive.Sdk.Core.Transport.Request,Telerik.Everlive.Sdk.Core.Transport.EverliveException,System.Net.HttpWebResponse)">
            <summary>
            Creates an instance of Response representing a failed service call.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.Request">
            <summary>
            The request that resulted in this response.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.Connection">
            <summary>
            The app that was used to make the request that resulted in the current response.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.WebResponse">
            <summary>
            The actual HttpWebResponse object.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.State">
            <summary>
            The state of the response.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.Success">
            <summary>
            Returns whether the request was successful.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.CompletedSynchronously">
            <summary>
            Returns whether the request was completed synchronously.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.ResponseString">
            <summary>
            The body of the response as a string.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.ResponseStream">
            <summary>
            The response as a stream.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Response.Error">
            <summary>
            The error that occured while processing the request.
            </summary>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.JsonResponse.GetResultAsObject``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.JsonResponse.GetResultAsEnumerable``1">
            <summary>
            Returns the result
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.JsonResponse.GetAsObject``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.JsonResponse.GetAsEnumerable``1">
            <summary>
            Returns the inner result
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Request.ApplyBodyForCreate(System.Object)">
            <summary>
            Sets the specified object as body of the request, using JSON serialization.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Request.ApplyBodyForUpdate(Telerik.Everlive.Sdk.Core.Model.Interfaces.IUpdateableObject)">
            <summary>
            Sets the specified object as body of the request, using JSON serialization.
            </summary>
            <param name="updateObject"></param>
        </member>
        <member name="M:Telerik.Everlive.Sdk.Core.Transport.Request.ApplyBodyForMultiUpdate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sets the specified object as body of the request, using JSON serialization.
            </summary>
            <param name="updateObjects"></param>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.Connection">
            <summary>
            The EverliveConnection used to make the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.Query">
            <summary>
            The IEverliveQuery instance that was used to create the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.RootUrl">
            <summary>
            The root URL for invoking the Everlive service. No trailing slash. Example: https://api.everlive.com
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.Path">
            <summary>
            The path for the request. Example: Users/user_id_guid
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.Method">
            <summary>
            The HTTP method for the request e.g. GET, POST, etc.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.CustomPayloadDelegate">
            <summary>
            A delegate that will be invoked to supply custom body for the HTTP request. Can be null.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.Payload">
            <summary>
            The body of the request as stream.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.Headers">
            <summary>
            A collection of headers for the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.QueryParameters">
            <summary>
            A collection of query parameters sent with the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.ContentType">
            <summary>
            The content type used for the request.
            </summary>
        </member>
        <member name="P:Telerik.Everlive.Sdk.Core.Transport.Request.SynchronousResponse">
            <summary>
            This must be set whenever MustExecute is set to false. This response will be used when invoking the callback supplied by the caller.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Bson.BsonObjectId"/> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.SetToken(Telerik.Newtonsoft.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.SetToken(Telerik.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:Telerik.Newtonsoft.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the reader is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the reader is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.SupportMultipleContent">
            <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
            <value>
            true to support reading multiple pieces of JSON content; otherwise false. The default is false.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when reading JSON.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.DateFormatString">
            <summary>
            Get or set how custom date formatted strings are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Telerik.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.Start">
            <summary>
            The Read method has not been called.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.Closed">
            <summary>
            The Close method has been called.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>
            Reader in a constructor.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonReader.Close">
            <summary>
            Changes the <see cref="T:Telerik.Newtonsoft.Json.JsonReader.State"/> to Closed.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.#ctor">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a Json object.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current Json object or array.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteToken(Telerik.Newtonsoft.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> token and its children.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteToken(Telerik.Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteEnd(Telerik.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriter.SetWriteState(Telerik.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the state of the JsonWriter,
            </summary>
            <param name="token">The JsonToken being written.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the writer is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the writer is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonWriter.Path">
            <summary>
            Gets the path of the writer. 
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when writing JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonWriter.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonWriter.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonWriter.Culture">
            <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Telerik.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind"/> used when writing <see cref="T:System.DateTime"/> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified"/> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind"/> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:Telerik.Newtonsoft.Json.Bson.BsonObjectId"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Telerik.Newtonsoft.Json.JsonWriter,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Telerik.Newtonsoft.Json.JsonReader,System.Type,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>
            Create a custom object
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Telerik.Newtonsoft.Json.JsonWriter,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Telerik.Newtonsoft.Json.JsonReader,System.Type,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
            <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Telerik.Newtonsoft.Json.JsonWriter,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Telerik.Newtonsoft.Json.JsonReader,System.Type,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Telerik.Newtonsoft.Json.JsonWriter,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Telerik.Newtonsoft.Json.JsonReader,System.Type,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Telerik.Newtonsoft.Json.JsonWriter,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Telerik.Newtonsoft.Json.JsonReader,System.Type,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.RegexConverter.WriteJson(Telerik.Newtonsoft.Json.JsonWriter,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.RegexConverter.ReadJson(Telerik.Newtonsoft.Json.JsonReader,System.Type,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Telerik.Newtonsoft.Json.JsonWriter,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Telerik.Newtonsoft.Json.JsonReader,System.Type,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>
            Gets or sets a value indicating whether integer values are allowed.
            </summary>
            <value><c>true</c> if integers are allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version"/> to and from a string (e.g. "1.2.3.4").
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.VersionConverter.WriteJson(Telerik.Newtonsoft.Json.JsonWriter,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.VersionConverter.ReadJson(Telerik.Newtonsoft.Json.JsonReader,System.Type,System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Telerik.Newtonsoft.Json.DateParseHandling.DateTime"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DateParseHandling.DateTimeOffset">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Telerik.Newtonsoft.Json.DateParseHandling.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime"/> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime"/> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime"/> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime"/>, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class"/>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example"/>
            </example>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the property.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/> with <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double"/> property, null for a <see cref="T:System.Nullable`1"/> property.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:Telerik.Newtonsoft.Json.FloatParseHandling.Double"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:Telerik.Newtonsoft.Json.FloatParseHandling.Decimal"/>.
            </summary>
        </member>
        <member name="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle">
            <summary>
            Indicates the method that will be used during deserialization for locating and loading assemblies.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple">
            <summary>
            In simple mode, the assembly used during deserialization need not match exactly the assembly used during serialization. Specifically, the version numbers need not match as the LoadWithPartialName method is used to load the assembly.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Full">
            <summary>
            In full mode, the assembly used during deserialization must match exactly the assembly used during serialization. The Load method of the Assembly class is used to load the assembly.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Telerik.Newtonsoft.Json.JsonTextWriter"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Telerik.Newtonsoft.Json.JsonTextWriter.Indentation"/> and <see cref="P:Telerik.Newtonsoft.Json.JsonTextWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonContainerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonContainerAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
            	<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonArrayAttribute"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonObjectAttribute"/> class with a flag indicating whether the array can contain null items
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonArrayAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonConvert">
            <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Telerik.Newtonsoft.Json.DateFormatHandling,Telerik.Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation using the <see cref="T:Telerik.Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Telerik.Newtonsoft.Json.DateFormatHandling)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation using the <see cref="T:Telerik.Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Telerik.Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Telerik.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Telerik.Newtonsoft.Json.Formatting,Telerik.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Telerik.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Telerik.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Telerik.Newtonsoft.Json.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Telerik.Newtonsoft.Json.Formatting,Telerik.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Telerik.Newtonsoft.Json.Formatting,Telerik.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Telerik.Newtonsoft.Json.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Telerik.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Telerik.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Telerik.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Telerik.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Telerik.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Telerik.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Telerik.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string using <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            Default settings are automatically used by serialization methods on <see cref="T:Telerik.Newtonsoft.Json.JsonConvert"/>,
            and <see cref="M:Telerik.Newtonsoft.Json.Linq.JToken.ToObject``1"/> and <see cref="M:Telerik.Newtonsoft.Json.Linq.JToken.FromObject(System.Object)"/> on <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            To serialize without using any default settings create a <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> with
            <see cref="M:Telerik.Newtonsoft.Json.JsonSerializer.Create"/>.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> to use the specified <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> when serializing the member or class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the converter.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the type of the converter.
            </summary>
            <value>The type of the converter.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonDictionaryAttribute"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonDictionaryAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonExtensionDataAttribute">
            <summary>
            Instructs the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonExtensionDataAttribute"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
            <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
            <value>
            	<c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
            <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
            <value>
            	<c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonObjectAttribute.#ctor(Telerik.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonObjectAttribute"/> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonObjectAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonPropertyAttribute"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
            <value>The numeric order of serialization or deserialization.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> will not use default settings.
            </summary>
            <returns>
            A new <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> will not use default settings.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.Create(Telerik.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> will not use default settings.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> will not use default settings.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> will use default settings.
            </summary>
            <returns>
            A new <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> will use default settings.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.CreateDefault(Telerik.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> will use default settings.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> will use default settings.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.Populate(Telerik.Newtonsoft.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.Deserialize(Telerik.Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.Deserialize``1(Telerik.Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T"/> being deserialized.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.Deserialize(Telerik.Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.Serialize(Telerik.Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Telerik.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Telerik.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializer.Serialize(Telerik.Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="E:Telerik.Newtonsoft.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Telerik.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a collection <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Telerik.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.DateTimeOffset"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextReader.Close">
            <summary>
            Changes the state to closed. 
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteEnd(Telerik.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Telerik.Newtonsoft.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="T:Telerik.Newtonsoft.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of Json token.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> if a <see cref="M:Telerik.Newtonsoft.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonValidatingReader">
            <summary>
            Represents a reader that provides <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> validation.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonValidatingReader.#ctor(Telerik.Newtonsoft.Json.JsonReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonValidatingReader"/> class that
            validates the content returned from the given <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> to read from while validating.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="E:Telerik.Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>
            Gets the type of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> used to construct this <see cref="T:Telerik.Newtonsoft.Json.JsonValidatingReader"/>.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> specified in the constructor.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the ancestors of every node in the source collection.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Telerik.Newtonsoft.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the descendants of every node in the source collection.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Telerik.Newtonsoft.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JProperty"/> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Telerik.Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Telerik.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Telerik.Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Telerik.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Telerik.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Telerik.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:Telerik.Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Telerik.Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:Telerik.Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Telerik.Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.DeepEquals(Telerik.Newtonsoft.Json.Linq.JToken,Telerik.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns>true if the tokens are equal; otherwise false.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JEnumerable`1"/> containing the child tokens of this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.Replace(Telerik.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.WriteTo(Telerik.Newtonsoft.Json.JsonWriter,Telerik.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.ToString(Telerik.Newtonsoft.Json.Formatting,Telerik.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection of <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte[]"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Explicit(Telerik.Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Telerik.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>
            Creates an <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> for this token.
            </summary>
            <returns>An <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> from an object using the specified <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates the specified .NET type from the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.ToObject``1(Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.ReadFrom(Telerik.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.Load(Telerik.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects a <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>, or null.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects a <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the selected elements.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the selected elements.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The root <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JToken.Path">
            <summary>
            Gets the path of the JSON token. 
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the descendant tokens of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates an <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> that can be used to add tokens to the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <returns>An <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> that is ready to have content written to it.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens</value>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.#ctor(Telerik.Newtonsoft.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> class from another <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> object.
            </summary>
            <param name="other">A <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> object to copy from.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.Load(Telerik.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text"/>
            </example>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.WriteTo(Telerik.Newtonsoft.Json.JsonWriter,Telerik.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.IndexOf(Telerik.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Telerik.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.Add(Telerik.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.Contains(Telerik.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.CopyTo(Telerik.Newtonsoft.Json.Linq.JToken[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JArray.Remove(Telerik.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JConstructor"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JConstructor.#ctor(Telerik.Newtonsoft.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JConstructor"/> class from another <see cref="T:Telerik.Newtonsoft.Json.Linq.JConstructor"/> object.
            </summary>
            <param name="other">A <see cref="T:Telerik.Newtonsoft.Json.Linq.JConstructor"/> object to copy from.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JConstructor.WriteTo(Telerik.Newtonsoft.Json.JsonWriter,Telerik.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JConstructor.Load(Telerik.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Telerik.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JEnumerable`1"/> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.#ctor(Telerik.Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> class from another <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> object.
            </summary>
            <param name="other">A <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> object to copy from.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:Telerik.Newtonsoft.Json.Linq.JProperty"/> the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JProperty"/> with the specified name or null.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets an <see cref="T:Telerik.Newtonsoft.Json.Linq.JEnumerable`1"/> of this object's property values.
            </summary>
            <returns>An <see cref="T:Telerik.Newtonsoft.Json.Linq.JEnumerable`1"/> of this object's property values.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.Load(Telerik.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text"/>
            </example>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Telerik.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.WriteTo(Telerik.Newtonsoft.Json.JsonWriter,Telerik.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Telerik.Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>true if a value was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.Add(System.String,Telerik.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>true if item was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Telerik.Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>true if a value was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Telerik.Newtonsoft.Json.Linq.JObject.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:Telerik.Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JProperty.#ctor(Telerik.Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JProperty"/> class from another <see cref="T:Telerik.Newtonsoft.Json.Linq.JProperty"/> object.
            </summary>
            <param name="other">A <see cref="T:Telerik.Newtonsoft.Json.Linq.JProperty"/> object to copy from.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JProperty.WriteTo(Telerik.Newtonsoft.Json.JsonWriter,Telerik.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JProperty.Load(Telerik.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Telerik.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(Telerik.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class from another <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> object.
            </summary>
            <param name="other">A <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> object to copy from.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> comment with the given value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> string with the given value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.CreateNull">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> null value.
            </summary>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> null value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.CreateUndefined">
            <summary>
            Creates a <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> null value.
            </summary>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Linq.JValue"/> null value.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.WriteTo(Telerik.Newtonsoft.Json.JsonWriter,Telerik.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.Equals(Telerik.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JValue.CompareTo(Telerik.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance.
            </exception>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JRaw.#ctor(Telerik.Newtonsoft.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JRaw"/> class from another <see cref="T:Telerik.Newtonsoft.Json.Linq.JRaw"/> object.
            </summary>
            <param name="other">A <see cref="T:Telerik.Newtonsoft.Json.Linq.JRaw"/> object to copy from.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JRaw"/> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JRaw.Create(Telerik.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:Telerik.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:Telerik.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Telerik.Newtonsoft.Json.Linq.JToken,Telerik.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Telerik.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenReader.#ctor(Telerik.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JTokenReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.#ctor(Telerik.Newtonsoft.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JTokenWriter"/> class writing to the given <see cref="T:Telerik.Newtonsoft.Json.Linq.JContainer"/>.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Linq.JTokenWriter"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Telerik.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being writen.
            </summary>
            <value>The token being writen.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Telerik.Newtonsoft.Json.JsonIgnoreAttribute"/> or <see cref="!:NonSerializedAttribute"/>.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.MemberSerialization.OptIn">
            <summary>
            Only members must be marked with <see cref="T:Telerik.Newtonsoft.Json.JsonPropertyAttribute"/> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Telerik.Newtonsoft.Json.JsonIgnoreAttribute"/> or <see cref="!:NonSerializedAttribute"/>.
            This member serialization mode can also be set by marking the class with <see cref="!:SerializableAttribute"/>
            and setting IgnoreSerializableAttribute on <see cref="T:Telerik.Newtonsoft.Json.Serialization.DefaultContractResolver"/> to false.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.MetadataPropertyHandling">
            <summary>
            Specifies metadata property handling options for the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.MetadataPropertyHandling.Default">
            <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
            <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:Telerik.Newtonsoft.Json.JsonSerializationException"/> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class"/>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example"/>
            </example>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References"/>       
            </example>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Telerik.Newtonsoft.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Schema.Extensions">
            <summary>
            Contains the JSON schema extension methods.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.Extensions.IsValid(Telerik.Newtonsoft.Json.Linq.JToken,Telerik.Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            Determines whether the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> is valid.
            </summary>
            <param name="source">The source <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.Extensions.IsValid(Telerik.Newtonsoft.Json.Linq.JToken,Telerik.Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            Determines whether the <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> is valid.
            </summary>
            <param name="source">The source <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.Extensions.Validate(Telerik.Newtonsoft.Json.Linq.JToken,Telerik.Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            Validates the specified <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="source">The source <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.Extensions.Validate(Telerik.Newtonsoft.Json.Linq.JToken,Telerik.Newtonsoft.Json.Schema.JsonSchema,Telerik.Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
            Validates the specified <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="source">The source <see cref="T:Telerik.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="validationEventHandler">The validation event handler.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Schema.JsonSchema">
            <summary>
            An in-memory representation of a JSON Schema.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchema.Read(Telerik.Newtonsoft.Json.JsonReader)">
            <summary>
            Reads a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchema.Read(Telerik.Newtonsoft.Json.JsonReader,Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Telerik.Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver"/> to use when resolving schema references.</param>
            <returns>The <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from a string that contains schema JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchema.WriteTo(Telerik.Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchema.WriteTo(Telerik.Newtonsoft.Json.JsonWriter,Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> using the specified <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="writer">A <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read only.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
            <value>A number that the value should be divisble by.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> of items.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> of items.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> instance at their array position from <see cref="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Items"/>.
            </summary>
            <value>
            	<c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> of additional items.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> of additional items.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
            <value>
            	<c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>
            Gets or sets whether the array items must be unique.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> of properties.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> of properties.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
            	<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallow types.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the collection of <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.
            </summary>
            <value>The collection of <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
            Returns detailed information about the schema exception.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaException"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
            Generates a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from a specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            Generate a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Generate a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            Generate a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            Generate a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            Gets or sets the contract resolver.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
            Resolves <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> from an id.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.
            </summary>
            <param name="reference">The id.</param>
            <returns>A <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.</returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
            The value types allowed by the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchema"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaGenerator"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            Do not infer a schema Id.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            Use the .NET type name as the schema Id.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
            Returns detailed information related to the <see cref="T:Telerik.Newtonsoft.Json.Schema.ValidationEventHandler"/>.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.Schema.JsonSchemaException"/> associated with the validation error.
            </summary>
            <value>The JsonSchemaException associated with the validation error.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
            <value>The path of the JSON location where the validation error occurred.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>
            Gets the text description corresponding to the validation error.
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Telerik.Newtonsoft.Json.Schema.ValidationEventArgs"/>.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.SerializationBinder">
            <summary>
            Allows users to control class loading and mandate what class to load.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.SerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.SerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The property name camel cased.</returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the sepecified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object. </param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object. </param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Newtonsoft.Json.Serialization.ErrorContext"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Telerik.Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.ErrorEventArgs"/> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.ITraceWriter.Trace(Telerik.Newtonsoft.Json.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:Telerik.Newtonsoft.Json.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.TraceLevel"/> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
            <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
            <value>The method called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
            <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
            <value>The method called during deserialization of the object.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
            <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
            <value>The method called after serialization of the object graph.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
            <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
            <value>The method called before serialization of the object.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.OnError">
            <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The method called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonContainerContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value><c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonArrayContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type"/> of the collection items.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value><c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.SerializationCallback">
            <summary>
            Handles <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> serialization callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.SerializationErrorCallback">
            <summary>
            Handles <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/> serialization error callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.ExtensionDataSetter">
            <summary>
            Sets extension data for an object during deserialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
            <param name="key">The extension data key.</param>
            <param name="value">The extension data value.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.ExtensionDataGetter">
            <summary>
            Gets extension data for an object during serialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary keys.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary values.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonLinqContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
            <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary>
            Gets a collection of <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> instances that define the parameters used with <see cref="P:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator"/>.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
            <value>The override constructor.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
            <value>The parametrized constructor.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:DefaultCreator"/>.
            This function is called with a collection of arguments which are defined by the <see cref="P:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters"/> collection.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            Gets or sets the extension data setter.
            </summary>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            Gets or sets the extension data getter.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
            <value>The numeric order of serialization or deserialization.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.
            </summary>
            <value>The <see cref="T:Telerik.Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:Telerik.Newtonsoft.Json.JsonConverter"/> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets or sets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> has a member attribute.
            </summary>
            <value><c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets or sets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets or sets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets or sets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets or sets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
            <value>A predicate used to determine whether the property should be serialize.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> objects.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonPropertyCollection"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Telerik.Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Telerik.Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonProperty"/> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.JsonStringContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.MemoryTraceWriter"/> class.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(Telerik.Newtonsoft.Json.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:Telerik.Newtonsoft.Json.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
            <returns>An enumeration of the most recent trace messages.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> of the most recent trace messages.
            </summary>
            <returns>
            A <see cref="T:System.String"/> of the most recent trace messages.
            </returns>
        </member>
        <member name="P:Telerik.Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:Telerik.Newtonsoft.Json.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>
            The <see cref="T:Telerik.Newtonsoft.Json.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using reflection.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Newtonsoft.Json.Serialization.ReflectionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, &apos;, &quot;) and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.TraceLevel">
            <summary>
            Specifies what messages to output for the <see cref="T:Telerik.Newtonsoft.Json.Serialization.ITraceWriter"/> class.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.TraceLevel.Off">
            <summary>
            Output no tracing and debugging messages.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.TraceLevel.Error">
            <summary>
            Output error-handling messages.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.TraceLevel.Warning">
            <summary>
            Output warnings and error-handling messages.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.TraceLevel.Info">
            <summary>
            Output informational messages, warnings, and error-handling messages.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.TraceLevel.Verbose">
            <summary>
            Output all debugging and tracing messages.
            </summary>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:Telerik.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="list">A sequence in which to locate a value.</param>
            <param name="value">The object to locate in the sequence</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <param name="enumType">The enum type to get names and values for.</param>
            <returns></returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Telerik.Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
            <summary>
            Nulls an empty string.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string was null, otherwise the string unchanged.</returns>
        </member>
        <member name="T:Telerik.Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:Telerik.Newtonsoft.Json.JsonWriter.Close"/> method to put the <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:Telerik.Newtonsoft.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Telerik.Newtonsoft.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Telerik.Newtonsoft.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
    </members>
</doc>
